{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiptManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_merchantManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_isoManagerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidConfig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCustomURI",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Promotion_Expired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIAlreadSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "thresholdAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rafflePrizeBPs",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumOrderSize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintsNFTs",
          "type": "bool"
        }
      ],
      "name": "DrawingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemedAmount",
          "type": "uint256"
        }
      ],
      "name": "DrawingCustodyRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "participantNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cohort",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receiptID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        }
      ],
      "name": "DrawingReceiptMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cohortNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemedAmount",
          "type": "uint256"
        }
      ],
      "name": "DrawingReceiptRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cohort",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "randomWord",
          "type": "uint256"
        }
      ],
      "name": "RaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "promotionIDs",
          "type": "uint64[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vrfRequestID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "cohorts",
          "type": "uint16[]"
        }
      ],
      "name": "RafflesInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "DrawingReceipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "drawingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cohortNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "redeemableAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Drawings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "thresholdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rafflePrizeBPs",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "returnedCustody",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "mintsNFTs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "soldOut",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "cancelledDrawing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "minimumOrderSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeCohort",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "URISetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToPromotions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedOperators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrayOfApprovedOperators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "drawingID",
          "type": "uint256"
        }
      ],
      "name": "cancelDrawing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commission",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_thresholdAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rafflePrizeBPs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumOrderSize",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_numberOfRaffles",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_mintsNFTs",
          "type": "bool"
        }
      ],
      "name": "createDrawing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "drawingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cohort",
          "type": "uint256"
        }
      ],
      "name": "drawingEligibility",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "drawingIDCohortToReceipts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drawingIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnedCommissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfParticipants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        }
      ],
      "name": "getPromotionReceipts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "promotionOwner",
          "type": "address"
        }
      ],
      "name": "getPromotionsByOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "arrayOfDrawingIDs",
          "type": "uint64[]"
        },
        {
          "internalType": "uint16[]",
          "name": "arrayOfcohorts",
          "type": "uint16[]"
        }
      ],
      "name": "initiateDrawings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isoManager",
      "outputs": [
        {
          "internalType": "contract IISOManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isoManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "drawingID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "purchaseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "joinPromotion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merchantManager",
      "outputs": [
        {
          "internalType": "contract IMerchantManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merchantManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "promotionIDToReceiptIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raffleInitiatedBool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receiptIDToPromotionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptManager",
      "outputs": [
        {
          "internalType": "contract IReceiptManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiptManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "receiptIDs",
          "type": "uint256[]"
        }
      ],
      "name": "redeemDrawingReceipts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "drawingID",
          "type": "uint256"
        }
      ],
      "name": "retrieveExcessDrawingCustody",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCommissionBPs",
          "type": "uint256"
        }
      ],
      "name": "setCommission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newURIRoot",
          "type": "string"
        }
      ],
      "name": "setPromotionURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_merchantManagerAddress",
          "type": "address"
        }
      ],
      "name": "setPromotionsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiptManagerAddress",
          "type": "address"
        }
      ],
      "name": "setReceiptManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "promotionID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basisPoints",
          "type": "uint256"
        }
      ],
      "name": "setRoyalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newURISetter",
          "type": "address"
        }
      ],
      "name": "setURISetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unmintedReceiptsToOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        }
      ],
      "name": "withdrawCommissions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawnCommissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fec48bf62c4b9a0422a96c6a5b5d7bc5dab5e3a7908836bc180db9a377add80",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "4890622",
    "logsBloom": "0x
    "blockHash": "0x1161f7c1b2ed33eab20d5fd2a32d955457b1b61c7ee9089a2d77206c4473efd4",
    "transactionHash": "0x5fec48bf62c4b9a0422a96c6a5b5d7bc5dab5e3a7908836bc180db9a377add80",
    "logs": [],
    "blockNumber": 37,
    "cumulativeGasUsed": "4890622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x84eA74d481Ee0A5332c457a4d796187F6Ba67fEB",
    "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "0x9E545E3C0baAB3E08CdfD552C960A1050f373042",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "0x0000000000000000000000000000000000000000000000000000000000000001",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "8189e57a09356806dcc9d43da62e3641",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiptManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_merchantManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_isoManagerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidConfig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCustomURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Promotion_Expired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIAlreadSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rafflePrizeBPs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumOrderSize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintsNFTs\",\"type\":\"bool\"}],\"name\":\"DrawingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"}],\"name\":\"DrawingCustodyRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"participantNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cohort\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receiptID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"}],\"name\":\"DrawingReceiptMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cohortNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"}],\"name\":\"DrawingReceiptRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cohort\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randomWord\",\"type\":\"uint256\"}],\"name\":\"RaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"promotionIDs\",\"type\":\"uint64[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vrfRequestID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"cohorts\",\"type\":\"uint16[]\"}],\"name\":\"RafflesInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"DrawingReceipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"drawingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cohortNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redeemableAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Drawings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rafflePrizeBPs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"returnedCustody\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"mintsNFTs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"soldOut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"cancelledDrawing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"minimumOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeCohort\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"URISetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToPromotions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayOfApprovedOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawingID\",\"type\":\"uint256\"}],\"name\":\"cancelDrawing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rafflePrizeBPs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOrderSize\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_numberOfRaffles\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_mintsNFTs\",\"type\":\"bool\"}],\"name\":\"createDrawing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cohort\",\"type\":\"uint256\"}],\"name\":\"drawingEligibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"drawingIDCohortToReceipts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawingIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"}],\"name\":\"getNumberOfParticipants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"}],\"name\":\"getPromotionReceipts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"promotionOwner\",\"type\":\"address\"}],\"name\":\"getPromotionsByOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"arrayOfDrawingIDs\",\"type\":\"uint64[]\"},{\"internalType\":\"uint16[]\",\"name\":\"arrayOfcohorts\",\"type\":\"uint16[]\"}],\"name\":\"initiateDrawings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isoManager\",\"outputs\":[{\"internalType\":\"contract IISOManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isoManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawingID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"joinPromotion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merchantManager\",\"outputs\":[{\"internalType\":\"contract IMerchantManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merchantManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotionIDToReceiptIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raffleInitiatedBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiptIDToPromotionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptManager\",\"outputs\":[{\"internalType\":\"contract IReceiptManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiptManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"receiptIDs\",\"type\":\"uint256[]\"}],\"name\":\"redeemDrawingReceipts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawingID\",\"type\":\"uint256\"}],\"name\":\"retrieveExcessDrawingCustody\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCommissionBPs\",\"type\":\"uint256\"}],\"name\":\"setCommission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newURIRoot\",\"type\":\"string\"}],\"name\":\"setPromotionURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_merchantManagerAddress\",\"type\":\"address\"}],\"name\":\"setPromotionsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiptManagerAddress\",\"type\":\"address\"}],\"name\":\"setReceiptManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoints\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newURISetter\",\"type\":\"address\"}],\"name\":\"setURISetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unmintedReceiptsToOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"withdrawCommissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawnCommissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Protocol Contracts/drawingManagerv7.sol\":\"DrawingManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Protocol Contracts/SatsumePromotion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nerror NotCustomURI();\\nerror URIAlreadSet();\\n\\nimport \\\"../../interfaces/IReceiptManager.sol\\\";\\nimport \\\"../../interfaces/IMerchantManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract SatsumePromotion {\\n    uint256 public commission = 200; // basis points (divided by 10,000)\\n    address public contractOwner;\\n    address public receiptManagerAddress;\\n    address public merchantManagerAddress;\\n    mapping(address => uint256) public earnedCommissions;\\n    mapping(address => uint256) public withdrawnCommissions;\\n    mapping(address => mapping(address => bool)) public approvedOperators;\\n    mapping(address => address[]) public arrayOfApprovedOperators;\\n    mapping(address => uint256[]) public addressToPromotions;\\n    mapping(uint256 => address) public unmintedReceiptsToOwners;\\n    mapping(uint256 => uint256[]) public promotionIDToReceiptIDs;\\n    mapping(uint256 => uint256) public receiptIDToPromotionID;\\n    IReceiptManager public receiptManager;\\n    IMerchantManager public merchantManager;\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == contractOwner, \\\"NotOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyReceiptManager() {\\n        require(msg.sender == receiptManagerAddress, \\\"NotOwner\\\");\\n        _;\\n    }\\n\\n    modifier onlyApprovedOperators(address parentAccount) {\\n        require(\\n            merchantManager.isApprovedOperator(msg.sender, parentAccount),\\n            \\\"Not Approved\\\"\\n        );\\n        _;\\n    }\\n\\n    function joinPromotion(\\n        uint256 promotionID,\\n        uint256 numOrders,\\n        uint256 orderID,\\n        address buyer\\n    ) external virtual;\\n\\n    function setPromotionURI(\\n        uint256 promotionID,\\n        string calldata newURIRoot\\n    ) external virtual;\\n\\n    function setRoyalty(\\n        uint256 promotionID,\\n        uint256 royaltyBPs\\n    ) external virtual;\\n\\n    function getPromotionReceipts(\\n        uint256 promotionID\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory receipts = promotionIDToReceiptIDs[promotionID];\\n        return (receipts);\\n    }\\n\\n    function getNumberOfParticipants(\\n        uint256 promotionID\\n    ) public view returns (uint256) {\\n        return promotionIDToReceiptIDs[promotionID].length;\\n    }\\n\\n    function getPromotionsByOwner(\\n        address promotionOwner\\n    ) public view returns (uint256[] memory) {\\n        return addressToPromotions[promotionOwner];\\n    }\\n\\n    function setOwner(address payable newOwner) external onlyOwner {\\n        contractOwner = payable(newOwner);\\n    }\\n\\n    function setReceiptManager(\\n        address _receiptManagerAddress\\n    ) external onlyOwner {\\n        receiptManagerAddress = _receiptManagerAddress;\\n        receiptManager = IReceiptManager(_receiptManagerAddress);\\n    }\\n\\n    function setPromotionsManager(\\n        address _merchantManagerAddress\\n    ) external onlyOwner {\\n        merchantManagerAddress = _merchantManagerAddress;\\n        merchantManager = IMerchantManager(_merchantManagerAddress);\\n    }\\n\\n    function withdrawCommissions(address erc20Token) external onlyOwner {\\n        IERC20(erc20Token).transfer(\\n            contractOwner,\\n            earnedCommissions[erc20Token] - withdrawnCommissions[erc20Token]\\n        );\\n        withdrawnCommissions[erc20Token] = earnedCommissions[erc20Token];\\n    }\\n\\n    function setCommission(uint256 newCommissionBPs) external onlyOwner {\\n        require(newCommissionBPs <= 10000, \\\"Inv\\\");\\n        commission = newCommissionBPs;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9725f6c021332074ea596119492a969b5ab34ab2ae277598964e16f3d074bb\",\"license\":\"MIT\"},\"contracts/Protocol Contracts/drawingManagerv7.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nerror Promotion_Expired();\\nerror InvalidConfig(); \\nerror NotApproved();\\n\\nevent DrawingCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 thresholdAmount, uint256 endTime, uint256 rafflePrizeBPs, uint256 minimumOrderSize, bool mintsNFTs);\\nevent DrawingCustodyRedeemed(uint256 indexed promotionID, uint256 redeemedAmount); \\nevent DrawingCancelled(uint256 indexed promotionID, uint256 numberOfParticipants);\\nevent DrawingReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 cohortNumber, uint256 redeemedAmount); \\nevent DrawingReceiptMinted(address indexed buyer, uint256 indexed promotionID, uint256 indexed participantNumber, uint256 cohort, uint256 receiptID, uint256 purchaseAmount, uint256 orderID);\\nevent RaffleWinner(uint256 indexed promotionID, uint256 cohort, uint256 tokenID, uint256 prize,  uint256 randomWord); \\nevent RafflesInitiated(uint64[] promotionIDs, uint256 indexed vrfRequestID, address indexed initiator, uint16[] cohorts); //initiators should be reimbursed more in potential air-drops\\n\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./SatsumePromotion.sol\\\";\\nimport \\\"../../interfaces/IISOManager.sol\\\"; \\n\\ncontract DrawingManager is VRFConsumerBaseV2, SatsumePromotion {\\n\\n    struct Drawing {\\n        uint256 endTime;  \\n        uint256 thresholdAmount;\\n        uint256 rafflePrizeBPs;    \\n        address owner;          \\n        bool returnedCustody;    \\n        bool mintsNFTs;    \\n        bool soldOut;     \\n        bool cancelledDrawing; \\n        uint256[] raffleAmounts;        \\n        uint256 minimumOrderSize;\\n        uint256 activeCohort;       \\n        address erc20Token;      \\n    }\\n\\n    struct DrawingReceipt {\\n        uint256 drawingID;\\n        uint256 cohortNumber;\\n        uint256 raffleContribution;\\n        uint256 redeemableAmount; \\n    }\\n\\n    struct VRFRequestContext {\\n        uint64[] drawingIDArray; \\n        uint16[] cohorts;\\n        uint256[] randomWords; \\n    }\\n\\n    uint256 public drawingIDs = 1;// type(uint256).max / 10 * 2 + 1;\\n    uint256 public constant MINIMUM_DURATION = 900; \\n    address public URISetter;\\n    bool allowCustomReceipts; \\n\\n\\n    mapping(uint256 => DrawingReceipt) public DrawingReceipts;\\n    mapping(uint256 => Drawing) public Drawings;\\n    mapping(uint256 => VRFRequestContext) private vrfRequestIDtoContext; //must this be private? \\n    mapping(uint256=> mapping(uint256 => bool)) public raffleInitiatedBool;\\n    mapping(uint256 => mapping(uint256 => uint256[])) public drawingIDCohortToReceipts; \\n\\n    /* State Variables */\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    \\n    IISOManager public isoManager;\\n    address public isoManagerAddress; \\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint64 private immutable i_subscriptionId;\\n    uint256 private s_lastTimeStamp;\\n    bytes32 private immutable i_gasLane;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        address _receiptManagerAddress,\\n        address _merchantManagerAddress, \\n        address _isoManagerAddress, \\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) { \\n        contractOwner = msg.sender; // Set the owner to the contract deployer\\n        receiptManagerAddress = _receiptManagerAddress;  \\n        receiptManager = IReceiptManager(_receiptManagerAddress);\\n        merchantManagerAddress = _merchantManagerAddress;  \\n        merchantManager = IMerchantManager(_merchantManagerAddress);\\n        isoManagerAddress = _isoManagerAddress;\\n        isoManager = IISOManager(_isoManagerAddress);\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function createDrawing(\\n        uint256 _duration,\\n        uint256 _thresholdAmount,\\n        uint256 _rafflePrizeBPs, \\n        uint256 _minimumOrderSize,\\n        uint16 _numberOfRaffles, \\n        address _owner,\\n        address _erc20Token, \\n        bool _mintsNFTs\\n    ) public onlyApprovedOperators(_owner) {\\n        if ( _duration < MINIMUM_DURATION || _minimumOrderSize < _thresholdAmount || _rafflePrizeBPs >= 10000) {\\n            revert InvalidConfig();\\n        }\\n\\n        // Initialize a new drawing contract and store it in storage\\n        Drawing storage drawing = Drawings[drawingIDs];\\n        drawing.owner = payable(_owner);\\n        drawing.endTime = block.timestamp + _duration;\\n        drawing.thresholdAmount = _thresholdAmount; \\n        drawing.rafflePrizeBPs = _rafflePrizeBPs; \\n        drawing.minimumOrderSize = _minimumOrderSize; \\n        drawing.erc20Token = _erc20Token; \\n        drawing.mintsNFTs = _mintsNFTs;\\n        drawing.raffleAmounts = new uint256[](_numberOfRaffles);\\n\\n        emit DrawingCreated(_owner, drawingIDs, _erc20Token, _thresholdAmount, _duration + block.timestamp, _rafflePrizeBPs, _minimumOrderSize, _mintsNFTs); \\n        addressToPromotions[_owner].push(drawingIDs);\\n        if (_mintsNFTs) {\\n            receiptManager.setPromotionOwner(drawingIDs, _owner); \\n        }\\n        drawingIDs+=1; \\n    }\\n    //OrderID is an optional parameter. Can put anything there\\n    function joinPromotion(uint256 drawingID, uint256 purchaseAmount, uint256 orderID, address buyer) public override {\\n        Drawing memory drawing = Drawings[drawingID];\\n        uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\\n\\n        // Check if the promotion is expired or slots are full\\n        if (drawing.soldOut ||  drawing.endTime < block.timestamp) {\\n            revert Promotion_Expired();\\n        } \\n        \\n        //Potential overflow here *********************************************************\\n        uint256 sharedTotal = purchaseAmount * drawing.rafflePrizeBPs / 10000; \\n        uint256 commissionAmount = (purchaseAmount - sharedTotal) * commission / 10000;\\n\\n        // Transfer funds\\n        isoManager.payStore(drawing.owner, (purchaseAmount - commissionAmount - sharedTotal), commissionAmount, sharedTotal, drawing.erc20Token, buyer); \\n\\n        // Update commission balances\\n        earnedCommissions[drawing.erc20Token] += commissionAmount;\\n\\n        // Mint NFT receipts and log details\\n        uint256 receiptID;\\n        if (drawing.mintsNFTs) {\\n            receiptID = receiptManager.mintReceipts(\\n                buyer,\\n                drawingID,\\n                numParticipants + 1,\\n                1\\n            );\\n        } else {\\n            receiptID = receiptManager.incrementReceiptIDs(1);\\n        }\\n\\n        DrawingReceipt storage drawingReceipt = DrawingReceipts[receiptID];\\n        drawingReceipt.drawingID = drawingID; \\n        drawingReceipt.raffleContribution = sharedTotal; \\n\\n        // Directly push to storage array\\n        promotionIDToReceiptIDs[drawingID].push(receiptID);\\n        drawingIDCohortToReceipts[drawingID][drawing.activeCohort].push(receiptID); \\n\\n        if(drawing.raffleAmounts[drawing.activeCohort] >= drawing.thresholdAmount) {\\n            if(drawing.activeCohort == drawing.raffleAmounts.length-1) {\\n                drawing.soldOut = true;\\n            }\\n            else {\\n                drawing.activeCohort += 1; \\n            }\\n        }\\n\\n        // Handle unminted receipt ownership\\n        if (!drawing.mintsNFTs) {\\n            unmintedReceiptsToOwners[receiptID] = buyer;\\n        }\\n        \\n        // Update the number of participants\\n        emit DrawingReceiptMinted(buyer, drawingID, numParticipants +1, drawing.activeCohort, receiptID, purchaseAmount, orderID);\\n    }\\n\\n    function drawingEligibility(uint256 drawingID, uint256 cohort) public view returns (bool) {\\n        Drawing storage drawing = Drawings[drawingID];\\n        if(drawing.raffleAmounts[cohort] < drawing.thresholdAmount || raffleInitiatedBool[drawingID][cohort] == true) {\\n            return false;\\n        }\\n        else {\\n            return true;\\n        } \\n    } \\n\\n    function initiateDrawings(uint64[] calldata arrayOfDrawingIDs, uint16[] calldata arrayOfcohorts) public {\\n        // Check array lengths match\\n        require(arrayOfDrawingIDs.length == arrayOfcohorts.length, \\\"Array length mismatch\\\");\\n        require(arrayOfDrawingIDs.length <= 5, \\\"Exceed length\\\");\\n        require(arrayOfDrawingIDs.length > 0, \\\"Zero length\\\");\\n\\n        // Pre-check eligibility for all entries\\n        for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\\n            require(drawingEligibility(arrayOfDrawingIDs[i], arrayOfcohorts[i]), \\\"Ineligible entry\\\");\\n        }\\n\\n        // Process each drawingID and cohort\\n        for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\\n            raffleInitiatedBool[arrayOfDrawingIDs[i]][arrayOfcohorts[i]] = true;\\n        }\\n\\n        // Convert length to uint32 for VRF call\\n        uint32 numWords = uint32(arrayOfDrawingIDs.length);\\n\\n        // Request randomness\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            numWords // Number of random words to request (adjust if needed)\\n        );\\n\\n        // Create storage reference to the context\\n        VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\\n\\n        // Manually copy arrays from calldata to storage\\n        context.drawingIDArray = arrayOfDrawingIDs; // This copies elements\\n        context.cohorts = arrayOfcohorts; // This copies elements\\n        \\n        //emit event\\n        emit RafflesInitiated(arrayOfDrawingIDs, requestId, msg.sender, arrayOfcohorts);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId, \\n        uint256[] memory randomWords\\n    ) internal override {\\n        VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\\n        // Ensure we have enough random words\\n        require(\\n            randomWords.length == context.drawingIDArray.length, \\n            \\\"Random words length mismatch\\\"\\n        );\\n        \\n        // Process each drawing/cohort combination\\n        for (uint i = 0; i < context.drawingIDArray.length; i++) {\\n            uint256 drawingID = context.drawingIDArray[i];\\n            uint256 cohort = context.cohorts[i];\\n            uint256 randomWord = randomWords[i];\\n            uint256[] memory cohortReceipts = drawingIDCohortToReceipts[drawingID][cohort]; \\n            \\n            // Calculate winner position\\n            uint256 x = randomWord % Drawings[drawingID].raffleAmounts[cohort];\\n            uint256 sum; \\n            uint256 winningIndex;\\n            for (uint256 j = 0; j < cohortReceipts.length; j ++) {\\n                sum += DrawingReceipts[cohortReceipts[j]].raffleContribution;\\n                if ( sum > x) {\\n                    winningIndex = j;\\n                    break;\\n                } \\n           }\\n            uint256 winningReceiptID = cohortReceipts[winningIndex];            \\n            \\n            // Update receipt\\n            DrawingReceipt storage drawingReceipt = DrawingReceipts[winningReceiptID];\\n            drawingReceipt.redeemableAmount = Drawings[drawingID].raffleAmounts[cohort];\\n            \\n            // Emit event for this winner\\n            emit RaffleWinner(\\n                drawingID,\\n                cohort,\\n                winningReceiptID,\\n                Drawings[drawingID].raffleAmounts[cohort],\\n                randomWord\\n            );\\n        }\\n        // Optional: Clean up storage to save gas\\n        delete vrfRequestIDtoContext[requestId];\\n    }\\n\\n\\n    function redeemDrawingReceipts(uint256[] calldata receiptIDs) external {\\n        uint256 redeemableAmount; \\n        address erc20Token = Drawings[DrawingReceipts[receiptIDs[0]].drawingID].erc20Token; //erc20 address of the first token\\n        for(uint256 i =0; i < receiptIDs.length; i++) {\\n            DrawingReceipt memory drawingReceipt = DrawingReceipts[receiptIDs[i]];\\n            Drawing storage drawing = Drawings[drawingReceipt.drawingID];\\n            require(erc20Token == drawing.erc20Token, \\\"Invalid\\\"); \\n            if(drawing.mintsNFTs) {\\n                require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \\\"Not owned\\\");\\n            }\\n            else {\\n                require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \\\"Not owned\\\");\\n            }            \\n            if(drawingReceipt.redeemableAmount >0) {\\n                redeemableAmount += drawingReceipt.redeemableAmount;\\n                DrawingReceipts[receiptIDs[i]].redeemableAmount = 0; \\n                emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.cohortNumber, drawingReceipt.redeemableAmount); \\n            }\\n            //For cancelled drawings, the last cohort gets to receive their raffle contributions back\\n            else if(drawing.cancelledDrawing && drawing.raffleAmounts[drawingReceipt.cohortNumber] < drawing.thresholdAmount) {\\n                redeemableAmount += drawingReceipt.raffleContribution;\\n                DrawingReceipts[receiptIDs[i]].raffleContribution = 0;\\n                emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.cohortNumber, drawingReceipt.raffleContribution); \\n            }\\n        }\\n        if(redeemableAmount !=0) {\\n            IERC20(erc20Token).transfer(\\n                msg.sender,\\n                redeemableAmount\\n            );\\n        }\\n    }\\n\\n\\n    function cancelDrawing(uint256 drawingID) external {\\n        Drawing storage drawing = Drawings[drawingID];\\n        if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) {\\n            revert NotApproved(); \\n        }\\n        if (drawing.endTime > block.timestamp) {\\n            drawing.endTime = 0; \\n            drawing.cancelledDrawing = true; \\n            drawing.returnedCustody = true; \\n        }\\n    }\\n\\n    function retrieveExcessDrawingCustody(uint256 drawingID) public {\\n        Drawing storage drawing = Drawings[drawingID];\\n\\n        require(block.timestamp > drawing.endTime && drawing.endTime != 0, \\\"Ineligible\\\");\\n        require(!drawing.returnedCustody, \\\"Already Returned\\\");\\n\\n        if(drawing.raffleAmounts[drawing.activeCohort] < drawing.thresholdAmount && !drawing.returnedCustody) {\\n            drawing.returnedCustody = true;\\n            // Pay the contract  owner the remaining amount \\n            IERC20(drawing.erc20Token).transfer(contractOwner, drawing.raffleAmounts[drawing.activeCohort]); \\n            earnedCommissions[drawing.erc20Token] += drawing.raffleAmounts[drawing.activeCohort];\\n            emit DrawingCustodyRedeemed(drawingID, drawing.raffleAmounts[drawing.activeCohort]); \\n        }\\n    }\\n\\n\\n    function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\\n        Drawing storage drawing = Drawings[promotionID];\\n        \\n        // Common validation checks\\n        if (!drawing.mintsNFTs) revert NotCustomURI();\\n        if (bytes(receiptManager.customURIRoot(promotionID)).length != 0) revert URIAlreadSet();\\n        \\n        // Permission checks based on allowCustomReceipts flag\\n        if (allowCustomReceipts) {\\n            if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) revert NotApproved();\\n        } else {\\n            if (msg.sender != URISetter) revert NotApproved();\\n        }\\n        \\n        // Update URI\\n        receiptManager.modifyPromotionURI(promotionID, newURIRoot);\\n    }\\n\\n    function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\\n        Drawing storage drawing = Drawings[promotionID]; \\n        if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) {\\n            revert NotApproved(); \\n        }\\n        receiptManager.setRoyalty(promotionID, basisPoints);\\n    }\\n\\n    function setURISetter(address newURISetter) onlyOwner public{\\n        URISetter = newURISetter; \\n    }\\n}\",\"keccak256\":\"0x31a510e0185488c403a09cb9449ff3207c27fd110ee2e869e12d7c9e7ebf21d9\",\"license\":\"MIT\"},\"interfaces/IISOManager.sol\":{\"content\":\"pragma solidity ^0.8.24;\\n\\ninterface IISOManager {\\n    function payStore(\\n        address store,\\n        uint256 toStore,\\n        uint256 commission,\\n        uint256 custodyAmount,\\n        address erc20Token,\\n        address payor\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e41fc3cf1e85c30969818a24d762664f76890c740ec261a0402d43761020878\"},\"interfaces/IMerchantManager.sol\":{\"content\":\"pragma solidity ^0.8.24;\\n\\ninterface IMerchantManager {\\n    function approveOperator(\\n        address approvedOperator,\\n        address parentAccount\\n    ) external;\\n\\n    function removeOperator(address toRemove, address parentAccount) external;\\n\\n    function approveAdministrator(\\n        address approvedAdministrator,\\n        bool addOperator\\n    ) external;\\n\\n    function removeAdministrator(\\n        address toRemove,\\n        bool removeAsOperator\\n    ) external;\\n\\n    function isApprovedOperator(\\n        address operator,\\n        address parentAccount\\n    ) external view returns (bool);\\n\\n    function getReceiverAddress(\\n        address userAddress,\\n        address tokenAddress\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x36b16f8627bdec87d0fcac17721cceef2b4c46adf1649498ab11cbb40277957f\"},\"interfaces/IReceiptManager.sol\":{\"content\":\"pragma solidity ^0.8.24;\\n\\ninterface IReceiptManager {\\n    function setRoyalty(uint256 promotionID, uint256 basisPoints) external;\\n\\n    function setPromotionOwner(\\n        uint256 promotionID,\\n        address promotionOwner\\n    ) external;\\n\\n    function mintReceipts(\\n        address to,\\n        uint256 promotionID,\\n        uint256 participantNumber,\\n        uint256 numTokens\\n    ) external returns (uint256);\\n\\n    function incrementReceiptIDs(uint256 numOrders) external returns (uint256);\\n\\n    function modifyPromotionURI(\\n        uint256 promotionID,\\n        string calldata newURIRoot\\n    ) external;\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function customURIRoot(uint256 key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x704116f24fc394fbeae6e4dc34e84d2a70acbe0fe81ce2e5280cb73de4ebefbe\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c80639eb7b72011610146578063cfefaa4e116100c3578063e9b08e1311610087578063e9b08e131461078c578063ee1309b3146107bc578063ef5856c3146107d8578063f07fe62b14610808578063f7dbfa5314610826578063fec32170146108425761025e565b8063cfefaa4e146106d2578063d8793fda14610702578063e148919114610732578063e3bbf52e14610750578063e3d904a01461076e5761025e565b8063be4466681161010a578063be44666814610610578063c0628f1d1461062e578063c4e80dbc1461065e578063c57fa71314610698578063ce606ee0146106b45761025e565b80639eb7b72014610558578063a0bbde3214610574578063a3a92ad814610592578063aeac69e2146105c2578063b724ec7f146105e05761025e565b80633a810114116101df57806364ead1eb116101a357806364ead1eb1461048457806378ac6401146104b45780637aa88c7f146104d25780639165bdba14610502578063933a6f0d1461052057806398a734731461053c5761025e565b80633a810114146103cd5780634950345c146103fd57806351f7a854146104195780635970b2da146104355780635a31470d146104685761025e565b80632d2828f5116102265780632d2828f5146103175780632d28e89d146103475780632ff71a691461036557806334d8222014610381578063355e6b43146103b15761025e565b8063039551f4146102635780630bd7b3221461029357806313af4035146102af57806317a59ab0146102cb5780631fe543e3146102fb575b600080fd5b61027d60048036038101906102789190613aae565b61085e565b60405161028a9190613afd565b60405180910390f35b6102ad60048036038101906102a89190613b18565b6108ac565b005b6102c960048036038101906102c49190613b83565b610a10565b005b6102e560048036038101906102e09190613bb0565b610ae4565b6040516102f29190613bec565b60405180910390f35b61031560048036038101906103109190613d60565b610afc565b005b610331600480360381019061032c9190613dbc565b610bbc565b60405161033e9190613e17565b60405180910390f35b61034f610c56565b60405161035c9190613bec565b60405180910390f35b61037f600480360381019061037a9190613bb0565b610c5c565b005b61039b60048036038101906103969190613e32565b610d71565b6040516103a89190613e17565b60405180910390f35b6103cb60048036038101906103c69190613b18565b610da0565b005b6103e760048036038101906103e29190613bb0565b610e7f565b6040516103f49190613f30565b60405180910390f35b61041760048036038101906104129190613f52565b610f16565b005b610433600480360381019061042e9190613bb0565b611603565b005b61044f600480360381019061044a9190613b18565b611843565b60405161045f9493929190613fb9565b60405180910390f35b610482600480360381019061047d9190614059565b611873565b005b61049e60048036038101906104999190613b18565b611bde565b6040516104ab9190613bec565b60405180910390f35b6104bc611bfe565b6040516104c99190614118565b60405180910390f35b6104ec60048036038101906104e79190613b18565b611c24565b6040516104f99190613afd565b60405180910390f35b61050a611c57565b6040516105179190614154565b60405180910390f35b61053a60048036038101906105359190613dbc565b611c7d565b005b610556600480360381019061055191906141d5565b611e20565b005b610572600480360381019061056d91906142e1565b612241565b005b61057c61280e565b6040516105899190613afd565b60405180910390f35b6105ac60048036038101906105a79190613b18565b612834565b6040516105b99190613bec565b60405180910390f35b6105ca61284c565b6040516105d7919061434f565b60405180910390f35b6105fa60048036038101906105f5919061436a565b612872565b6040516106079190613bec565b60405180910390f35b6106186128b0565b6040516106259190613afd565b60405180910390f35b61064860048036038101906106439190613aae565b6128d6565b6040516106559190613bec565b60405180910390f35b61067860048036038101906106739190613b18565b612907565b60405161068f9b9a999897969594939291906143bd565b60405180910390f35b6106b260048036038101906106ad9190614514565b6129d5565b005b6106bc612dce565b6040516106c99190613afd565b60405180910390f35b6106ec60048036038101906106e79190613bb0565b612df4565b6040516106f99190613bec565b60405180910390f35b61071c60048036038101906107179190613dbc565b612e0c565b6040516107299190613e17565b60405180910390f35b61073a612e3b565b6040516107479190613bec565b60405180910390f35b610758612e41565b6040516107659190613bec565b60405180910390f35b610776612e47565b6040516107839190613afd565b60405180910390f35b6107a660048036038101906107a19190613b18565b612e6d565b6040516107b39190613f30565b60405180910390f35b6107d660048036038101906107d19190613b18565b612ede565b005b6107f260048036038101906107ed9190613dbc565b6131ee565b6040516107ff9190613bec565b60405180910390f35b61081061321f565b60405161081d9190613afd565b60405180910390f35b610840600480360381019061083b9190613bb0565b613245565b005b61085c60048036038101906108579190613bb0565b61335a565b005b6007602052816000526040600020818154811061087a57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601160008381526020019081526020016000209050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a179451338360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610944929190614595565b602060405180830381865afa158015610961573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098591906145d3565b6109bb576040517fc19f17a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281600001541115610a0c576000816000018190555060018160030160176101000a81548160ff02191690831515021790555060018160030160146101000a81548160ff0219169083151502179055505b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a979061465d565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bae57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610ba5929190614595565b60405180910390fd5b610bb8828261342e565b5050565b6000806011600085815260200190815260200160002090508060010154816004018481548110610bef57610bee61467d565b5b90600052602060002001541080610c3b57506001151560136000868152602001908152602001600020600085815260200190815260200160002060009054906101000a900460ff161515145b15610c4a576000915050610c50565b60019150505b92915050565b61038481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce39061465d565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e279061465d565b60405180910390fd5b612710811115610e75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6c906146f8565b60405180910390fd5b8060008190555050565b6060600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610f0a57602002820191906000526020600020905b815481526020019060010190808311610ef6575b50505050509050919050565b600060116000868152602001908152602001600020604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff161515151581526020016003820160159054906101000a900460ff161515151581526020016003820160169054906101000a900460ff161515151581526020016003820160179054906101000a900460ff161515151581526020016004820180548060200260200160405190810160405280929190818152602001828054801561106657602002820191906000526020600020905b815481526020019060010190808311611052575b5050505050815260200160058201548152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506000600a60008781526020019081526020016000208054905090508160c00151806111095750428260000151105b15611140576040517faf061c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006127108360400151876111559190614747565b61115f91906147b8565b90506000612710600054838961117591906147e9565b61117f9190614747565b61118991906147b8565b9050601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e76c66c5856060015184848b6111db91906147e9565b6111e591906147e9565b84868961016001518b6040518763ffffffff1660e01b815260040161120f9695949392919061481d565b600060405180830381600087803b15801561122957600080fd5b505af115801561123d573d6000803e3d6000fd5b50505050806004600086610160015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611295919061487e565b9250508190555060008460a001511561135f57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16629308a1878b6001886112f4919061487e565b60016040518563ffffffff1660e01b815260040161131594939291906148ed565b6020604051808303816000875af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113589190614947565b9050611401565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631d4922b860016040518263ffffffff1660e01b81526004016113bb9190614974565b6020604051808303816000875af11580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190614947565b90505b6000601060008381526020019081526020016000209050898160000181905550838160020181905550600a60008b8152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055601460008b8152602001908152602001600020600087610140015181526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558560200151866101000151876101400151815181106114d6576114d561467d565b5b602002602001015110611534576001866101000151516114f691906147e9565b866101400151036115175760018660c0019015159081151581525050611533565b6001866101400181815161152b919061487e565b915081815250505b5b8560a0015161159057866009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b60018561159d919061487e565b8a8873ffffffffffffffffffffffffffffffffffffffff167fd3530f32f73ea0e8dc48247cc4bae22a44c6ea323cff02e38ecbaee4b0900d70896101400151868e8e6040516115ef9493929190613fb9565b60405180910390a450505050505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168a9061465d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461175c91906147e9565b6040518363ffffffff1660e01b815260040161177992919061498f565b6020604051808303816000875af1158015611798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bc91906145d3565b50600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60106020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60006011600085815260200190815260200160002090508060030160159054906101000a900460ff166118d2576040517f1fbb40b200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663135a0ce9866040518263ffffffff1660e01b815260040161192f9190613bec565b600060405180830381865afa15801561194c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906119759190614a88565b51146119ad576040517f1c1d2b4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f60149054906101000a900460ff1615611abf57600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a179451338360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401611a43929190614595565b602060405180830381865afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8491906145d3565b611aba576040517fc19f17a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b47565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b46576040517fc19f17a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166384936ac08585856040518463ffffffff1660e01b8152600401611ba693929190614b0d565b600060405180830381600087803b158015611bc057600080fd5b505af1158015611bd4573d6000803e3d6000fd5b5050505050505050565b6000600a6000838152602001908152602001600020805490509050919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000601160008481526020019081526020016000209050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a179451338360030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401611d15929190614595565b602060405180830381865afa158015611d32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5691906145d3565b611d8c576040517fc19f17a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663933a6f0d84846040518363ffffffff1660e01b8152600401611de9929190614b3f565b600060405180830381600087803b158015611e0357600080fd5b505af1158015611e17573d6000803e3d6000fd5b50505050505050565b82600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a17945133836040518363ffffffff1660e01b8152600401611e7e929190614595565b602060405180830381865afa158015611e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebf91906145d3565b611efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef590614bb4565b60405180910390fd5b610384891080611f0d57508786105b80611f1a57506127108710155b15611f51576040517f35be3ac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060116000600e5481526020019081526020016000209050848160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508942611fb9919061487e565b8160000181905550888160010181905550878160020181905550868160050181905550838160070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550828160030160156101000a81548160ff0219169083151502179055508561ffff1667ffffffffffffffff81111561205957612058613c1d565b5b6040519080825280602002602001820160405280156120875781602001602082028036833780820191505090505b5081600401908051906020019061209f9291906137b7565b508373ffffffffffffffffffffffffffffffffffffffff16600e548673ffffffffffffffffffffffffffffffffffffffff167f234106205cc05502c0d7a005ee11332de02fa0009ffd236de186df28bdfbd5188c428f6120ff919061487e565b8d8d8a604051612113959493929190614bd4565b60405180910390a4600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600e549080600181540180825580915050600190039060005260206000200160009091909190915055821561221b57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335b20baf600e54876040518363ffffffff1660e01b81526004016121e8929190614c27565b600060405180830381600087803b15801561220257600080fd5b505af1158015612216573d6000803e3d6000fd5b505050505b6001600e600082825461222e919061487e565b9250508190555050505050505050505050565b6000806011600060106000878760008181106122605761225f61467d565b5b90506020020135815260200190815260200160002060000154815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060005b8484905081101561277f576000601060008787858181106122d4576122d361467d565b5b90506020020135815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820154815260200160038201548152505090506000601160008360000151815260200190815260200160002090508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146123cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c290614c9c565b60405180910390fd5b8060030160159054906101000a900460ff1615612509573373ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e89898781811061244a5761244961467d565b5b905060200201356040518263ffffffff1660e01b815260040161246d9190613bec565b602060405180830381865afa15801561248a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ae9190614cd1565b73ffffffffffffffffffffffffffffffffffffffff1614612504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fb90614d4a565b60405180910390fd5b6125c4565b3373ffffffffffffffffffffffffffffffffffffffff16600960008989878181106125375761253661467d565b5b90506020020135815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146125c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125ba90614d4a565b60405180910390fd5b5b60008260600151111561267d578160600151856125e1919061487e565b94506000601060008989878181106125fc576125fb61467d565b5b9050602002013581526020019081526020016000206003018190555081600001518787858181106126305761262f61467d565b5b905060200201357f581ee2414bca8a07ca81630d93cd63564db9c860f42beaa8f38d6f465f13c79184602001518560600151604051612670929190614b3f565b60405180910390a3612770565b8060030160179054906101000a900460ff1680156126c257508060010154816004018360200151815481106126b5576126b461467d565b5b9060005260206000200154105b1561276f578160400151856126d7919061487e565b94506000601060008989878181106126f2576126f161467d565b5b9050602002013581526020019081526020016000206002018190555081600001518787858181106127265761272561467d565b5b905060200201357f581ee2414bca8a07ca81630d93cd63564db9c860f42beaa8f38d6f465f13c79184602001518560400151604051612766929190614b3f565b60405180910390a35b5b505080806001019150506122b0565b5060008214612808578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016127c392919061498f565b6020604051808303816000875af11580156127e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280691906145d3565b505b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b6020528060005260406000206000915090505481565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6014602052826000526040600020602052816000526040600020818154811061289a57600080fd5b9060005260206000200160009250925050505481565b601660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860205281600052604060002081815481106128f257600080fd5b90600052602060002001600091509150505481565b60116020528060005260406000206000915090508060000154908060010154908060020154908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160149054906101000a900460ff16908060030160159054906101000a900460ff16908060030160169054906101000a900460ff16908060030160179054906101000a900460ff16908060050154908060060154908060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508b565b818190508484905014612a1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a1490614db6565b60405180910390fd5b6005848490501115612a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5b90614e22565b60405180910390fd5b60008484905011612aaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa190614e8e565b60405180910390fd5b60005b84849050811015612b6a57612b1e858583818110612ace57612acd61467d565b5b9050602002016020810190612ae39190614eee565b67ffffffffffffffff16848484818110612b0057612aff61467d565b5b9050602002016020810190612b159190614f1b565b61ffff16610bbc565b612b5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5490614f94565b60405180910390fd5b8080600101915050612aad565b5060005b84849050811015612c1f57600160136000878785818110612b9257612b9161467d565b5b9050602002016020810190612ba79190614eee565b67ffffffffffffffff1681526020019081526020016000206000858585818110612bd457612bd361467d565b5b9050602002016020810190612be99190614f1b565b61ffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612b6e565b50600084849050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f0000000000000000000000000000000000000000000000000000000000000000876040518663ffffffff1660e01b8152600401612cec95949392919061500a565b6020604051808303816000875af1158015612d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2f9190614947565b905060006012600083815260200190815260200160002090508686826000019190612d5b929190613804565b508484826001019190612d6f9291906138ca565b503373ffffffffffffffffffffffffffffffffffffffff16827f3cb9ed3a89ef4948343d11d9f1d39efb7379b133aecf5bada39329275c55915c89898989604051612dbd94939291906151e3565b60405180910390a350505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60056020528060005260406000206000915090505481565b60136020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60005481565b600e5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000600a6000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612ece57602002820191906000526020600020905b815481526020019060010190808311612eba575b5050505050905080915050919050565b6000601160008381526020019081526020016000209050806000015442118015612f0d57506000816000015414155b612f4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f439061526a565b60405180910390fd5b8060030160149054906101000a900460ff1615612f9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f95906152d6565b60405180910390fd5b806001015481600401826006015481548110612fbd57612fbc61467d565b5b9060005260206000200154108015612fe457508060030160149054906101000a900460ff16155b156131ea5760018160030160146101000a81548160ff0219169083151502179055508060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836004018460060154815481106130835761308261467d565b5b90600052602060002001546040518363ffffffff1660e01b81526004016130ab92919061498f565b6020604051808303816000875af11580156130ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ee91906145d3565b50806004018160060154815481106131095761310861467d565b5b9060005260206000200154600460008360070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613186919061487e565b92505081905550817fc8238ac10f9eb45287c62f15a3fc07d82e14337161270a251934c7e77b78ae59826004018360060154815481106131c9576131c861467d565b5b90600052602060002001546040516131e19190613bec565b60405180910390a25b5050565b600a602052816000526040600020818154811061320a57600080fd5b90600052602060002001600091509150505481565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cc9061465d565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146133ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e19061465d565b60405180910390fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000601260008481526020019081526020016000209050806000018054905082511461348f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348690615342565b60405180910390fd5b60005b816000018054905081101561376b5760008260000182815481106134b9576134b861467d565b5b90600052602060002090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060008360010183815481106135075761350661467d565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16905060008584815181106135465761354561467d565b5b6020026020010151905060006014600085815260200190815260200160002060008481526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156135c057602002820191906000526020600020905b8154815260200190600101908083116135ac575b5050505050905060006011600086815260200190815260200160002060040184815481106135f1576135f061467d565b5b9060005260206000200154836136079190615362565b905060008060005b8451811015613673576010600086838151811061362f5761362e61467d565b5b602002602001015181526020019081526020016000206002015483613654919061487e565b92508383111561366657809150613673565b808060010191505061360f565b5060008482815181106136895761368861467d565b5b602002602001015190506000601060008381526020019081526020016000209050601160008a815260200190815260200160002060040188815481106136d2576136d161467d565b5b90600052602060002001548160030181905550887f8d4d788998b1cad4a78fe57b5e1b026284c9e71d242f78a5e4f1fac5f59288798984601160008e81526020019081526020016000206004018c815481106137315761373061467d565b5b90600052602060002001548b60405161374d9493929190613fb9565b60405180910390a25050505050505050508080600101915050613492565b5060126000848152602001908152602001600020600080820160006137909190613978565b6001820160006137a091906139a0565b6002820160006137b091906139c8565b5050505050565b8280548282559060005260206000209081019282156137f3579160200282015b828111156137f25782518255916020019190600101906137d7565b5b50905061380091906139e9565b5090565b828054828255906000526020600020906003016004900481019282156138b95791602002820160005b8382111561388357833567ffffffffffffffff1683826101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550926020019260080160208160070104928301926001030261382d565b80156138b75782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302613883565b505b5090506138c691906139e9565b5090565b82805482825590600052602060002090600f016010900481019282156139675791602002820160005b8382111561393757833561ffff1683826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026138f3565b80156139655782816101000a81549061ffff0219169055600201602081600101049283019260010302613937565b505b50905061397491906139e9565b5090565b50805460008255600301600490049060005260206000209081019061399d91906139e9565b50565b50805460008255600f0160109004906000526020600020908101906139c591906139e9565b50565b50805460008255906000526020600020908101906139e691906139e9565b50565b5b80821115613a025760008160009055506001016139ea565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a4582613a1a565b9050919050565b613a5581613a3a565b8114613a6057600080fd5b50565b600081359050613a7281613a4c565b92915050565b6000819050919050565b613a8b81613a78565b8114613a9657600080fd5b50565b600081359050613aa881613a82565b92915050565b60008060408385031215613ac557613ac4613a10565b5b6000613ad385828601613a63565b9250506020613ae485828601613a99565b9150509250929050565b613af781613a3a565b82525050565b6000602082019050613b126000830184613aee565b92915050565b600060208284031215613b2e57613b2d613a10565b5b6000613b3c84828501613a99565b91505092915050565b6000613b5082613a1a565b9050919050565b613b6081613b45565b8114613b6b57600080fd5b50565b600081359050613b7d81613b57565b92915050565b600060208284031215613b9957613b98613a10565b5b6000613ba784828501613b6e565b91505092915050565b600060208284031215613bc657613bc5613a10565b5b6000613bd484828501613a63565b91505092915050565b613be681613a78565b82525050565b6000602082019050613c016000830184613bdd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613c5582613c0c565b810181811067ffffffffffffffff82111715613c7457613c73613c1d565b5b80604052505050565b6000613c87613a06565b9050613c938282613c4c565b919050565b600067ffffffffffffffff821115613cb357613cb2613c1d565b5b602082029050602081019050919050565b600080fd5b6000613cdc613cd784613c98565b613c7d565b90508083825260208201905060208402830185811115613cff57613cfe613cc4565b5b835b81811015613d285780613d148882613a99565b845260208401935050602081019050613d01565b5050509392505050565b600082601f830112613d4757613d46613c07565b5b8135613d57848260208601613cc9565b91505092915050565b60008060408385031215613d7757613d76613a10565b5b6000613d8585828601613a99565b925050602083013567ffffffffffffffff811115613da657613da5613a15565b5b613db285828601613d32565b9150509250929050565b60008060408385031215613dd357613dd2613a10565b5b6000613de185828601613a99565b9250506020613df285828601613a99565b9150509250929050565b60008115159050919050565b613e1181613dfc565b82525050565b6000602082019050613e2c6000830184613e08565b92915050565b60008060408385031215613e4957613e48613a10565b5b6000613e5785828601613a63565b9250506020613e6885828601613a63565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ea781613a78565b82525050565b6000613eb98383613e9e565b60208301905092915050565b6000602082019050919050565b6000613edd82613e72565b613ee78185613e7d565b9350613ef283613e8e565b8060005b83811015613f23578151613f0a8882613ead565b9750613f1583613ec5565b925050600181019050613ef6565b5085935050505092915050565b60006020820190508181036000830152613f4a8184613ed2565b905092915050565b60008060008060808587031215613f6c57613f6b613a10565b5b6000613f7a87828801613a99565b9450506020613f8b87828801613a99565b9350506040613f9c87828801613a99565b9250506060613fad87828801613a63565b91505092959194509250565b6000608082019050613fce6000830187613bdd565b613fdb6020830186613bdd565b613fe86040830185613bdd565b613ff56060830184613bdd565b95945050505050565b600080fd5b60008083601f84011261401957614018613c07565b5b8235905067ffffffffffffffff81111561403657614035613ffe565b5b60208301915083600182028301111561405257614051613cc4565b5b9250929050565b60008060006040848603121561407257614071613a10565b5b600061408086828701613a99565b935050602084013567ffffffffffffffff8111156140a1576140a0613a15565b5b6140ad86828701614003565b92509250509250925092565b6000819050919050565b60006140de6140d96140d484613a1a565b6140b9565b613a1a565b9050919050565b60006140f0826140c3565b9050919050565b6000614102826140e5565b9050919050565b614112816140f7565b82525050565b600060208201905061412d6000830184614109565b92915050565b600061413e826140e5565b9050919050565b61414e81614133565b82525050565b60006020820190506141696000830184614145565b92915050565b600061ffff82169050919050565b6141868161416f565b811461419157600080fd5b50565b6000813590506141a38161417d565b92915050565b6141b281613dfc565b81146141bd57600080fd5b50565b6000813590506141cf816141a9565b92915050565b600080600080600080600080610100898b0312156141f6576141f5613a10565b5b60006142048b828c01613a99565b98505060206142158b828c01613a99565b97505060406142268b828c01613a99565b96505060606142378b828c01613a99565b95505060806142488b828c01614194565b94505060a06142598b828c01613a63565b93505060c061426a8b828c01613a63565b92505060e061427b8b828c016141c0565b9150509295985092959890939650565b60008083601f8401126142a1576142a0613c07565b5b8235905067ffffffffffffffff8111156142be576142bd613ffe565b5b6020830191508360208202830111156142da576142d9613cc4565b5b9250929050565b600080602083850312156142f8576142f7613a10565b5b600083013567ffffffffffffffff81111561431657614315613a15565b5b6143228582860161428b565b92509250509250929050565b6000614339826140e5565b9050919050565b6143498161432e565b82525050565b60006020820190506143646000830184614340565b92915050565b60008060006060848603121561438357614382613a10565b5b600061439186828701613a99565b93505060206143a286828701613a99565b92505060406143b386828701613a99565b9150509250925092565b6000610160820190506143d3600083018e613bdd565b6143e0602083018d613bdd565b6143ed604083018c613bdd565b6143fa606083018b613aee565b614407608083018a613e08565b61441460a0830189613e08565b61442160c0830188613e08565b61442e60e0830187613e08565b61443c610100830186613bdd565b61444a610120830185613bdd565b614458610140830184613aee565b9c9b505050505050505050505050565b60008083601f84011261447e5761447d613c07565b5b8235905067ffffffffffffffff81111561449b5761449a613ffe565b5b6020830191508360208202830111156144b7576144b6613cc4565b5b9250929050565b60008083601f8401126144d4576144d3613c07565b5b8235905067ffffffffffffffff8111156144f1576144f0613ffe565b5b60208301915083602082028301111561450d5761450c613cc4565b5b9250929050565b6000806000806040858703121561452e5761452d613a10565b5b600085013567ffffffffffffffff81111561454c5761454b613a15565b5b61455887828801614468565b9450945050602085013567ffffffffffffffff81111561457b5761457a613a15565b5b614587878288016144be565b925092505092959194509250565b60006040820190506145aa6000830185613aee565b6145b76020830184613aee565b9392505050565b6000815190506145cd816141a9565b92915050565b6000602082840312156145e9576145e8613a10565b5b60006145f7848285016145be565b91505092915050565b600082825260208201905092915050565b7f4e6f744f776e6572000000000000000000000000000000000000000000000000600082015250565b6000614647600883614600565b915061465282614611565b602082019050919050565b600060208201905081810360008301526146768161463a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e760000000000000000000000000000000000000000000000000000000000600082015250565b60006146e2600383614600565b91506146ed826146ac565b602082019050919050565b60006020820190508181036000830152614711816146d5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061475282613a78565b915061475d83613a78565b925082820261476b81613a78565b9150828204841483151761478257614781614718565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006147c382613a78565b91506147ce83613a78565b9250826147de576147dd614789565b5b828204905092915050565b60006147f482613a78565b91506147ff83613a78565b925082820390508181111561481757614816614718565b5b92915050565b600060c0820190506148326000830189613aee565b61483f6020830188613bdd565b61484c6040830187613bdd565b6148596060830186613bdd565b6148666080830185613aee565b61487360a0830184613aee565b979650505050505050565b600061488982613a78565b915061489483613a78565b92508282019050808211156148ac576148ab614718565b5b92915050565b6000819050919050565b60006148d76148d26148cd846148b2565b6140b9565b613a78565b9050919050565b6148e7816148bc565b82525050565b60006080820190506149026000830187613aee565b61490f6020830186613bdd565b61491c6040830185613bdd565b61492960608301846148de565b95945050505050565b60008151905061494181613a82565b92915050565b60006020828403121561495d5761495c613a10565b5b600061496b84828501614932565b91505092915050565b600060208201905061498960008301846148de565b92915050565b60006040820190506149a46000830185613aee565b6149b16020830184613bdd565b9392505050565b600080fd5b600067ffffffffffffffff8211156149d8576149d7613c1d565b5b6149e182613c0c565b9050602081019050919050565b60005b83811015614a0c5780820151818401526020810190506149f1565b60008484015250505050565b6000614a2b614a26846149bd565b613c7d565b905082815260208101848484011115614a4757614a466149b8565b5b614a528482856149ee565b509392505050565b600082601f830112614a6f57614a6e613c07565b5b8151614a7f848260208601614a18565b91505092915050565b600060208284031215614a9e57614a9d613a10565b5b600082015167ffffffffffffffff811115614abc57614abb613a15565b5b614ac884828501614a5a565b91505092915050565b82818337600083830152505050565b6000614aec8385614600565b9350614af9838584614ad1565b614b0283613c0c565b840190509392505050565b6000604082019050614b226000830186613bdd565b8181036020830152614b35818486614ae0565b9050949350505050565b6000604082019050614b546000830185613bdd565b614b616020830184613bdd565b9392505050565b7f4e6f7420417070726f7665640000000000000000000000000000000000000000600082015250565b6000614b9e600c83614600565b9150614ba982614b68565b602082019050919050565b60006020820190508181036000830152614bcd81614b91565b9050919050565b600060a082019050614be96000830188613bdd565b614bf66020830187613bdd565b614c036040830186613bdd565b614c106060830185613bdd565b614c1d6080830184613e08565b9695505050505050565b6000604082019050614c3c6000830185613bdd565b614c496020830184613aee565b9392505050565b7f496e76616c696400000000000000000000000000000000000000000000000000600082015250565b6000614c86600783614600565b9150614c9182614c50565b602082019050919050565b60006020820190508181036000830152614cb581614c79565b9050919050565b600081519050614ccb81613a4c565b92915050565b600060208284031215614ce757614ce6613a10565b5b6000614cf584828501614cbc565b91505092915050565b7f4e6f74206f776e65640000000000000000000000000000000000000000000000600082015250565b6000614d34600983614600565b9150614d3f82614cfe565b602082019050919050565b60006020820190508181036000830152614d6381614d27565b9050919050565b7f4172726179206c656e677468206d69736d617463680000000000000000000000600082015250565b6000614da0601583614600565b9150614dab82614d6a565b602082019050919050565b60006020820190508181036000830152614dcf81614d93565b9050919050565b7f457863656564206c656e67746800000000000000000000000000000000000000600082015250565b6000614e0c600d83614600565b9150614e1782614dd6565b602082019050919050565b60006020820190508181036000830152614e3b81614dff565b9050919050565b7f5a65726f206c656e677468000000000000000000000000000000000000000000600082015250565b6000614e78600b83614600565b9150614e8382614e42565b602082019050919050565b60006020820190508181036000830152614ea781614e6b565b9050919050565b600067ffffffffffffffff82169050919050565b614ecb81614eae565b8114614ed657600080fd5b50565b600081359050614ee881614ec2565b92915050565b600060208284031215614f0457614f03613a10565b5b6000614f1284828501614ed9565b91505092915050565b600060208284031215614f3157614f30613a10565b5b6000614f3f84828501614194565b91505092915050565b7f496e656c696769626c6520656e74727900000000000000000000000000000000600082015250565b6000614f7e601083614600565b9150614f8982614f48565b602082019050919050565b60006020820190508181036000830152614fad81614f71565b9050919050565b6000819050919050565b614fc781614fb4565b82525050565b614fd681614eae565b82525050565b614fe58161416f565b82525050565b600063ffffffff82169050919050565b61500481614feb565b82525050565b600060a08201905061501f6000830188614fbe565b61502c6020830187614fcd565b6150396040830186614fdc565b6150466060830185614ffb565b6150536080830184614ffb565b9695505050505050565b600082825260208201905092915050565b6000819050919050565b61508181614eae565b82525050565b60006150938383615078565b60208301905092915050565b60006150ae6020840184614ed9565b905092915050565b6000602082019050919050565b60006150cf838561505d565b93506150da8261506e565b8060005b85811015615113576150f0828461509f565b6150fa8882615087565b9750615105836150b6565b9250506001810190506150de565b5085925050509392505050565b600082825260208201905092915050565b6000819050919050565b6151448161416f565b82525050565b6000615156838361513b565b60208301905092915050565b60006151716020840184614194565b905092915050565b6000602082019050919050565b60006151928385615120565b935061519d82615131565b8060005b858110156151d6576151b38284615162565b6151bd888261514a565b97506151c883615179565b9250506001810190506151a1565b5085925050509392505050565b600060408201905081810360008301526151fe8186886150c3565b90508181036020830152615213818486615186565b905095945050505050565b7f496e656c696769626c6500000000000000000000000000000000000000000000600082015250565b6000615254600a83614600565b915061525f8261521e565b602082019050919050565b6000602082019050818103600083015261528381615247565b9050919050565b7f416c72656164792052657475726e656400000000000000000000000000000000600082015250565b60006152c0601083614600565b91506152cb8261528a565b602082019050919050565b600060208201905081810360008301526152ef816152b3565b9050919050565b7f52616e646f6d20776f726473206c656e677468206d69736d6174636800000000600082015250565b600061532c601c83614600565b9150615337826152f6565b602082019050919050565b6000602082019050818103600083015261535b8161531f565b9050919050565b600061536d82613a78565b915061537883613a78565b92508261538857615387614789565b5b82820690509291505056fea2646970667358221220e3d4d568a629de1ab6cbb86bd48cf842907092e8ce5ce0b97e5c0e025171a28164736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8278,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "commission",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8280,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "contractOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8282,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "receiptManagerAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8284,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "merchantManagerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8288,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "earnedCommissions",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8292,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "withdrawnCommissions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8298,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "approvedOperators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 8303,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "arrayOfApprovedOperators",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 8308,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "addressToPromotions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8312,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "unmintedReceiptsToOwners",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8317,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "promotionIDToReceiptIDs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8321,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "receiptIDToPromotionID",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8324,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "receiptManager",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IReceiptManager)10050"
      },
      {
        "astId": 8327,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "merchantManager",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IMerchantManager)9992"
      },
      {
        "astId": 8685,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "drawingIDs",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 8690,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "URISetter",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 8692,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "allowCustomReceipts",
        "offset": 20,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 8697,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "DrawingReceipts",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(DrawingReceipt)8672_storage)"
      },
      {
        "astId": 8702,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "Drawings",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Drawing)8663_storage)"
      },
      {
        "astId": 8707,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "vrfRequestIDtoContext",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(VRFRequestContext)8682_storage)"
      },
      {
        "astId": 8713,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "raffleInitiatedBool",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 8720,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "drawingIDCohortToReceipts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 8726,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "isoManager",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IISOManager)9943"
      },
      {
        "astId": 8728,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "isoManagerAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 8737,
        "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IISOManager)9943": {
        "encoding": "inplace",
        "label": "contract IISOManager",
        "numberOfBytes": "20"
      },
      "t_contract(IMerchantManager)9992": {
        "encoding": "inplace",
        "label": "contract IMerchantManager",
        "numberOfBytes": "20"
      },
      "t_contract(IReceiptManager)10050": {
        "encoding": "inplace",
        "label": "contract IReceiptManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Drawing)8663_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DrawingManager.Drawing)",
        "numberOfBytes": "32",
        "value": "t_struct(Drawing)8663_storage"
      },
      "t_mapping(t_uint256,t_struct(DrawingReceipt)8672_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DrawingManager.DrawingReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DrawingReceipt)8672_storage"
      },
      "t_mapping(t_uint256,t_struct(VRFRequestContext)8682_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DrawingManager.VRFRequestContext)",
        "numberOfBytes": "32",
        "value": "t_struct(VRFRequestContext)8682_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Drawing)8663_storage": {
        "encoding": "inplace",
        "label": "struct DrawingManager.Drawing",
        "members": [
          {
            "astId": 8639,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "endTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8641,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "thresholdAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8643,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "rafflePrizeBPs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8645,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 8647,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "returnedCustody",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8649,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "mintsNFTs",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8651,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "soldOut",
            "offset": 22,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8653,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "cancelledDrawing",
            "offset": 23,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 8656,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "raffleAmounts",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 8658,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "minimumOrderSize",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8660,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "activeCohort",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8662,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "erc20Token",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(DrawingReceipt)8672_storage": {
        "encoding": "inplace",
        "label": "struct DrawingManager.DrawingReceipt",
        "members": [
          {
            "astId": 8665,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "drawingID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8667,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "cohortNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8669,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "raffleContribution",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8671,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "redeemableAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VRFRequestContext)8682_storage": {
        "encoding": "inplace",
        "label": "struct DrawingManager.VRFRequestContext",
        "members": [
          {
            "astId": 8675,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "drawingIDArray",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint64)dyn_storage"
          },
          {
            "astId": 8678,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "cohorts",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 8681,
            "contract": "contracts/Protocol Contracts/drawingManagerv7.sol:DrawingManager",
            "label": "randomWords",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}