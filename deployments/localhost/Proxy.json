{
  "address": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderNo",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "skuId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "priceToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventoryVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionID",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Proxy.PurchaseItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "Purchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "skuId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceVersion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInventory",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inventoryVersion",
          "type": "uint256"
        }
      ],
      "name": "SkuUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_promotionAddress",
          "type": "address"
        }
      ],
      "name": "approvePromotions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAdministrators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedOperators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvedPromotions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrayOfApprovedAdministrators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrayOfApprovedOperators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "skuId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "priceToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventoryVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proxy.PurchaseItem[]",
          "name": "items",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "payExpire",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderNo",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "buyWithBatchHash",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllApprovedPromotions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skuId",
          "type": "uint256"
        }
      ],
      "name": "getSku",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventoryVersion",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proxy.SkuState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "skuId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unitPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "priceToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "priceVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inventoryVersion",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "promotionID",
              "type": "uint256"
            }
          ],
          "internalType": "struct Proxy.PurchaseItem[]",
          "name": "items",
          "type": "tuple[]"
        }
      ],
      "name": "hashPurchaseItems",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialPromotionIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "receiverAccounts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "name": "setSystemSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "skus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inventory",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inventoryVersion",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "systemSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "skuId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newInventory",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inventoryVersion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expireTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "updater",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "updateSkuWithSig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedOrderNo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe76a6991f18a4533b7ac30d973b92310ece33a4497f0c74a5f9dca57ebfff1a0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE6E340D132b5f46d1e472DebcD681B2aBc16e57E",
    "transactionIndex": 0,
    "gasUsed": "3232358",
    "logsBloom": "0x
    "blockHash": "0x6aee9898dc5006fe3c45f7d10cd63cdd9d1d5c6c540c07c39fa015cfd3f69745",
    "transactionHash": "0xe76a6991f18a4533b7ac30d973b92310ece33a4497f0c74a5f9dca57ebfff1a0",
    "logs": [],
    "blockNumber": 31,
    "cumulativeGasUsed": "3232358",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"
  ],
  "numDeployments": 1,
  "solcInputHash": "2f65572559b14528c94d5dcf73c7a96a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderNo\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Proxy.PurchaseItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"Purchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInventory\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"}],\"name\":\"SkuUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_promotionAddress\",\"type\":\"address\"}],\"name\":\"approvePromotions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAdministrators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvedPromotions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayOfApprovedAdministrators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrayOfApprovedOperators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"}],\"internalType\":\"struct Proxy.PurchaseItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"payExpire\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderNo\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"buyWithBatchHash\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllApprovedPromotions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"}],\"name\":\"getSku\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"}],\"internalType\":\"struct Proxy.SkuState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promotionID\",\"type\":\"uint256\"}],\"internalType\":\"struct Proxy.PurchaseItem[]\",\"name\":\"items\",\"type\":\"tuple[]\"}],\"name\":\"hashPurchaseItems\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialPromotionIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"receiverAccounts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"name\":\"setSystemSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"skus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"skuId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newInventory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inventoryVersion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"updater\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"updateSkuWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedOrderNo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"buyWithBatchHash((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[],uint256,uint256,bytes)\":{\"params\":{\"items\":\"Array of purchase items\",\"orderNo\":\"Unique order number to prevent replay\",\"payExpire\":\"Expiration timestamp for payment\",\"signature\":\"EIP-712 signature from system signer\"}},\"constructor\":{\"params\":{\"_signer\":\"The authorized system signer\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getSku(uint256)\":{\"params\":{\"skuId\":\"SKU ID\"},\"returns\":{\"_0\":\"SkuState struct containing price, inventory, and version info\"}},\"hashPurchaseItems((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])\":{\"params\":{\"items\":\"Array of PurchaseItem structs\"},\"returns\":{\"_0\":\"bytes32 The cumulative hash of all items\"}},\"updateSkuWithSig(uint256,uint256,uint256,uint256,uint256,uint256,address,bytes)\":{\"params\":{\"expireTime\":\"Signature expiration timestamp\",\"inventoryVersion\":\"Inventory version\",\"newInventory\":\"New inventory amount\",\"newPrice\":\"New unit price\",\"priceVersion\":\"Price version\",\"signature\":\"EIP-712 signature from system signer\",\"skuId\":\"SKU ID\",\"updater\":\"Address authorized to perform the update\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Purchased(address,uint256,(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Event emitted on a purchase\"},\"SkuUpdated(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a SKU is updated\"}},\"kind\":\"user\",\"methods\":{\"buyWithBatchHash((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[],uint256,uint256,bytes)\":{\"notice\":\"Batch purchase using a single EIP-712 signature\"},\"getSku(uint256)\":{\"notice\":\"Get SKU state\"},\"hashPurchaseItems((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])\":{\"notice\":\"Constructs a hash for an array of PurchaseItem structs\"},\"skus(uint256)\":{\"notice\":\"SKU mapping\"},\"systemSigner()\":{\"notice\":\"System signer address for EIP-712 signatures\"},\"updateSkuWithSig(uint256,uint256,uint256,uint256,uint256,uint256,address,bytes)\":{\"notice\":\"Update SKU using a system signature\"},\"usedHashes(bytes32)\":{\"notice\":\"Used struct hashes to prevent signature replay\"},\"usedOrderNo(uint256)\":{\"notice\":\"Used order numbers to prevent replay attacks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Protocol Contracts/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Protocol Contracts/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// Interface for Promotion Contracts\\ninterface IPromotion {\\n    function joinPromotion(\\n        uint256 promotionID,\\n        uint256 purchaseAmount,\\n        uint256 orderID,\\n        address buyer\\n    ) external;\\n}\\n\\ncontract Proxy is ReentrancyGuard, EIP712 {\\n    using ECDSA for bytes32;\\n    using SafeERC20 for IERC20;\\n\\n    address public contractOwner;\\n    mapping(address => mapping(address => bool)) public approvedOperators;\\n    mapping(address => address[]) public arrayOfApprovedOperators;\\n    mapping(address => mapping(address => bool)) public approvedAdministrators;\\n    mapping(address => address[]) public arrayOfApprovedAdministrators;\\n    mapping(address => mapping(address => address)) public receiverAccounts;\\n    uint256[] public initialPromotionIDs; //sorted list\\n    address[] public approvedPromotions;\\n\\n    /// @notice SKU state struct\\n    struct SkuState {\\n        uint256 price; // Unit price\\n        uint256 priceVersion; // Price version\\n        uint256 inventory; // Available stock\\n        uint256 inventoryVersion; // Inventory version\\n    }\\n\\n    /// @notice Struct for a purchase item\\n    struct PurchaseItem {\\n        uint256 skuId; // SKU ID\\n        uint256 quantity; // Quantity to buy\\n        uint256 unitPrice; // Price per unit\\n        address priceToken; // Payment token address (ETH = address(0))\\n        uint256 priceVersion; // Price version\\n        uint256 inventory; // current version of inventory\\n        uint256 inventoryVersion; // Inventory version\\n        uint256 promotionID; // Receiver of the payment\\n    }\\n\\n    bytes32 private constant PURCHASE_ITEM_TYPEHASH =\\n        keccak256(\\n            \\\"PurchaseItem(uint256 skuId,uint256 quantity,uint256 unitPrice,address priceToken,uint256 priceVersion,uint256 inventory,uint256 inventoryVersion,uint256 promotionID)\\\"\\n        );\\n\\n    /// @notice SKU mapping\\n    mapping(uint256 => SkuState) public skus;\\n\\n    /// @notice Used order numbers to prevent replay attacks\\n    mapping(uint256 => bool) public usedOrderNo;\\n\\n    /// @notice Used struct hashes to prevent signature replay\\n    mapping(bytes32 => bool) public usedHashes;\\n\\n    /// @notice System signer address for EIP-712 signatures\\n    address public systemSigner;\\n\\n    /// @notice Event emitted on a purchase\\n    event Purchased(\\n        address indexed buyer,\\n        uint256 indexed orderNo,\\n        PurchaseItem[] items\\n    );\\n\\n    /// @notice Event emitted when a SKU is updated\\n    event SkuUpdated(\\n        uint256 indexed skuId,\\n        uint256 newPrice,\\n        uint256 priceVersion,\\n        uint256 newInventory,\\n        uint256 inventoryVersion\\n    );\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == contractOwner, \\\"Not Owner\\\");\\n        _;\\n    }\\n\\n    /// @param _signer The authorized system signer\\n    constructor(address _signer) EIP712(\\\"Shop\\\", \\\"1\\\") {\\n        require(_signer != address(0), \\\"invalid signer\\\");\\n        systemSigner = _signer;\\n        contractOwner = msg.sender;\\n    }\\n\\n    function setOwner(address newOwner) public onlyOwner {\\n        contractOwner = newOwner;\\n    }\\n\\n    function setSystemSigner(address _signer) external onlyOwner {\\n        require(_signer != address(0), \\\"invalid signer\\\");\\n        systemSigner = _signer;\\n    }\\n\\n    function getAllApprovedPromotions()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return approvedPromotions;\\n    }\\n\\n    /// @notice Batch purchase using a single EIP-712 signature\\n    /// @param items Array of purchase items\\n    /// @param payExpire Expiration timestamp for payment\\n    /// @param orderNo Unique order number to prevent replay\\n    /// @param signature EIP-712 signature from system signer\\n    function buyWithBatchHash(\\n        PurchaseItem[] calldata items,\\n        uint256 payExpire,\\n        uint256 orderNo,\\n        // address[] calldata tokenAddresses,\\n        // uint256[] calldata permittedAmounts,\\n        // //permitted  signatures\\n        bytes calldata signature\\n    ) external payable nonReentrant {\\n        require(block.timestamp <= payExpire, \\\"expired\\\");\\n        require(items.length > 0, \\\"empty batch\\\");\\n        require(!usedOrderNo[orderNo], \\\"orderNo used\\\");\\n\\n        // 1. Hash the entire PurchaseItem array\\n        bytes32 itemsHash = hashPurchaseItems(items);\\n\\n        // 2. Construct the EIP-712 struct hash and verify signature\\n        //\\u8fd9\\u91cc\\u9700\\u8981\\u6dfb\\u52a0 promotionIDs + numOrders \\u5417\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"BatchPurchase(uint256 payExpire,uint256 orderNo,address buyer,bytes32 itemsHash)\\\"\\n                ),\\n                payExpire,\\n                orderNo,\\n                msg.sender,\\n                itemsHash\\n            )\\n        );\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n        require(\\n            ECDSA.recover(digest, signature) == systemSigner,\\n            \\\"invalid signature\\\"\\n        );\\n\\n        // 3. Process each purchase item\\n        for (uint256 i = 0; i < items.length; i++) {\\n            PurchaseItem calldata item = items[i];\\n\\n            SkuState storage s = skus[item.skuId];\\n\\n            // Update price if submitted version is newer\\n            require(item.priceVersion >= s.priceVersion, \\\"stale price\\\");\\n            if (item.priceVersion > s.priceVersion) {\\n                s.price = item.unitPrice;\\n                s.priceVersion = item.priceVersion;\\n            } else {\\n                require(s.price == item.unitPrice, \\\"price mismatch\\\");\\n            }\\n\\n            // Update inventory if submitted version is newer\\n            require(\\n                item.inventoryVersion >= s.inventoryVersion,\\n                \\\"stale inventory\\\"\\n            );\\n            require(s.inventory >= item.quantity, \\\"insufficient stock\\\");\\n            if (item.inventoryVersion > s.inventoryVersion) {\\n                s.inventory = item.inventory - item.quantity;\\n                s.inventoryVersion = item.inventoryVersion;\\n            }\\n\\n            if (item.promotionID < initialPromotionIDs[0]) {\\n                revert(\\\"Invalid promotion ID\\\");\\n            }\\n\\n            // Start from the last promotion and work backwards\\n            uint256 index = initialPromotionIDs.length - 1;\\n\\n            // Find the largest initial ID <= promotionID\\n            while (index > 0 && initialPromotionIDs[index] > item.promotionID) {\\n                unchecked {\\n                    index--;\\n                }\\n            }\\n\\n            address promotionContract = approvedPromotions[index];\\n            IPromotion(promotionContract).joinPromotion(\\n                item.promotionID,\\n                s.price,\\n                orderNo,\\n                msg.sender\\n            );\\n        }\\n\\n        // 5. Mark order number as used to prevent replay\\n        usedOrderNo[orderNo] = true;\\n        // Emit Purchased event\\n        emit Purchased(msg.sender, orderNo, items);\\n    }\\n\\n    /// @notice Constructs a hash for an array of PurchaseItem structs\\n    /// @param items Array of PurchaseItem structs\\n    /// @return bytes32 The cumulative hash of all items\\n    function hashPurchaseItems(\\n        PurchaseItem[] calldata items\\n    ) public pure returns (bytes32) {\\n        bytes32[] memory hashes = new bytes32[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            hashes[i] = _hashPurchaseItem(items[i]);\\n        }\\n        //EIP-712\\n        return keccak256(abi.encodePacked(hashes));\\n    }\\n\\n    function _hashPurchaseItem(\\n        PurchaseItem calldata item\\n    ) private pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    PURCHASE_ITEM_TYPEHASH,\\n                    item.skuId,\\n                    item.quantity,\\n                    item.unitPrice,\\n                    item.priceToken,\\n                    item.priceVersion,\\n                    item.inventory,\\n                    item.inventoryVersion,\\n                    item.promotionID\\n                )\\n            );\\n    }\\n\\n    /// @notice Update SKU using a system signature\\n    /// @param skuId SKU ID\\n    /// @param newPrice New unit price\\n    /// @param priceVersion Price version\\n    /// @param newInventory New inventory amount\\n    /// @param inventoryVersion Inventory version\\n    /// @param expireTime Signature expiration timestamp\\n    /// @param updater Address authorized to perform the update\\n    /// @param signature EIP-712 signature from system signer\\n    function updateSkuWithSig(\\n        uint256 skuId,\\n        uint256 newPrice,\\n        uint256 priceVersion,\\n        uint256 newInventory,\\n        uint256 inventoryVersion,\\n        uint256 expireTime,\\n        address updater,\\n        bytes calldata signature\\n    ) external {\\n        require(msg.sender == updater, \\\"caller not authorized\\\");\\n        require(block.timestamp <= expireTime, \\\"signature expired\\\");\\n\\n        // Construct EIP-712 struct hash\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"UpdateSku(uint256 skuId,uint256 newPrice,uint256 priceVersion,uint256 newInventory,uint256 inventoryVersion,uint256 expireTime,address updater)\\\"\\n                ),\\n                skuId,\\n                newPrice,\\n                priceVersion,\\n                newInventory,\\n                inventoryVersion,\\n                expireTime,\\n                updater\\n            )\\n        );\\n        bytes32 digest = _hashTypedDataV4(structHash);\\n\\n        // Verify signature and prevent replay\\n        require(\\n            ECDSA.recover(digest, signature) == systemSigner,\\n            \\\"invalid signature\\\"\\n        );\\n        require(!usedHashes[digest], \\\"signature replayed\\\");\\n        usedHashes[digest] = true;\\n\\n        SkuState storage s = skus[skuId];\\n        require(priceVersion >= s.priceVersion, \\\"stale price version\\\");\\n        require(\\n            inventoryVersion >= s.inventoryVersion,\\n            \\\"stale inventory version\\\"\\n        );\\n\\n        // Update SKU\\n        if (priceVersion > s.priceVersion) {\\n            s.price = newPrice;\\n            s.priceVersion = priceVersion;\\n        }\\n\\n        if (inventoryVersion > s.inventoryVersion) {\\n            s.inventory = newInventory;\\n            s.inventoryVersion = inventoryVersion;\\n        }\\n\\n        // Emit SKU update event\\n        emit SkuUpdated(\\n            skuId,\\n            s.price,\\n            s.priceVersion,\\n            s.inventory,\\n            s.inventoryVersion\\n        );\\n    }\\n\\n    /// @notice Get SKU state\\n    /// @param skuId SKU ID\\n    /// @return SkuState struct containing price, inventory, and version info\\n    function getSku(uint256 skuId) external view returns (SkuState memory) {\\n        return skus[skuId];\\n    }\\n\\n    function approvePromotions(\\n        uint256 _initialID,\\n        address _promotionAddress\\n    ) public onlyOwner {\\n        uint256[] storage initialIDs = initialPromotionIDs;\\n        address[] storage promotions = approvedPromotions;\\n        uint256 length = initialIDs.length;\\n\\n        // Check for duplicate ID\\n        for (uint256 i = 0; i < length; ) {\\n            if (initialIDs[i] == _initialID) {\\n                revert(\\\"Duplicate promotion ID\\\");\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Find insertion position (maintain ascending order)\\n        uint256 insertIndex = length;\\n        for (uint256 i = 0; i < length; ) {\\n            if (initialIDs[i] > _initialID) {\\n                insertIndex = i;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        // Expand arrays with dummy values\\n        initialIDs.push(0);\\n        promotions.push(address(0));\\n\\n        // Shift elements after insertion point\\n        for (uint256 i = length; i > insertIndex; ) {\\n            unchecked {\\n                initialIDs[i] = initialIDs[i - 1];\\n                promotions[i] = promotions[i - 1];\\n                --i;\\n            }\\n        }\\n\\n        // Insert new values\\n        initialIDs[insertIndex] = _initialID;\\n        promotions[insertIndex] = _promotionAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x9ad13630c0ba5ef349105b13c71845c15069c476c94134cf63ae774b54d14748\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162004224380380620042248339818101604052810190620000389190620003ed565b6040518060400160405280600481526020017f53686f70000000000000000000000000000000000000000000000000000000008152506040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506001600081905550620000c26001836200025760201b90919060201c565b6101208181525050620000e06002826200025760201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a081815250506200011f620002af60201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001c59062000480565b60405180910390fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620009e1565b60006020835110156200027d5762000275836200030c60201b60201c565b9050620002a9565b826200028f836200037960201b60201c565b6000019081620002a091906200071c565b5060ff60001b90505b92915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e051610100514630604051602001620002f195949392919062000840565b60405160208183030381529060405280519060200120905090565b600080829050601f815111156200035c57826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016200035391906200091b565b60405180910390fd5b8051816200036a9062000971565b60001c1760001b915050919050565b6000819050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003b58262000388565b9050919050565b620003c781620003a8565b8114620003d357600080fd5b50565b600081519050620003e781620003bc565b92915050565b60006020828403121562000406576200040562000383565b5b60006200041684828501620003d6565b91505092915050565b600082825260208201905092915050565b7f696e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b600062000468600e836200041f565b9150620004758262000430565b602082019050919050565b600060208201905081810360008301526200049b8162000459565b9050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052457607f821691505b6020821081036200053a5762000539620004dc565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000565565b620005b0868362000565565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005fd620005f7620005f184620005c8565b620005d2565b620005c8565b9050919050565b6000819050919050565b6200061983620005dc565b62000631620006288262000604565b84845462000572565b825550505050565b600090565b6200064862000639565b620006558184846200060e565b505050565b5b818110156200067d57620006716000826200063e565b6001810190506200065b565b5050565b601f821115620006cc57620006968162000540565b620006a18462000555565b81016020851015620006b1578190505b620006c9620006c08562000555565b8301826200065a565b50505b505050565b600082821c905092915050565b6000620006f160001984600802620006d1565b1980831691505092915050565b60006200070c8383620006de565b9150826002028217905092915050565b6200072782620004a2565b67ffffffffffffffff811115620007435762000742620004ad565b5b6200074f82546200050b565b6200075c82828562000681565b600060209050601f8311600181146200079457600084156200077f578287015190505b6200078b8582620006fe565b865550620007fb565b601f198416620007a48662000540565b60005b82811015620007ce57848901518255600182019150602085019450602081019050620007a7565b86831015620007ee5784890151620007ea601f891682620006de565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b620008188162000803565b82525050565b6200082981620005c8565b82525050565b6200083a81620003a8565b82525050565b600060a0820190506200085760008301886200080d565b6200086660208301876200080d565b6200087560408301866200080d565b6200088460608301856200081e565b6200089360808301846200082f565b9695505050505050565b60005b83811015620008bd578082015181840152602081019050620008a0565b60008484015250505050565b6000601f19601f8301169050919050565b6000620008e782620004a2565b620008f381856200041f565b9350620009058185602086016200089d565b6200091081620008c9565b840191505092915050565b60006020820190508181036000830152620009378184620008da565b905092915050565b600081519050919050565b6000819050602082019050919050565b600062000968825162000803565b80915050919050565b60006200097e826200093f565b826200098a846200094a565b905062000997816200095a565b92506020821015620009da57620009d57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360200360080262000565565b831692505b5050919050565b60805160a05160c05160e0516101005161012051610140516137e862000a3c6000396000611a07015260006119cc01526000611f7f01526000611f5e01526000611c1101526000611c6701526000611c9001526137e86000f3fe60806040526004361061012a5760003560e01c80637f0d4fb7116100ab578063b85f3bf01161006f578063b85f3bf01461046d578063c2d40357146104aa578063ce606ee0146104e7578063cf2b120214610512578063f2e1efa11461053b578063f88c4892146105575761012a565b80637f0d4fb71461034857806384b0196e146103855780638783346a146103b6578063a1c6ae19146103f3578063aef18bf7146104305761012a565b806334d82220116100f257806334d822201461022657806335007f0e1461026357806338d70ed8146102a35780633a886a4d146102e0578063676d82a41461030b5761012a565b8063039551f41461012f57806312388fe41461016c57806313af4035146101a957806314f22387146101d257806332613df5146101fb575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906121d9565b610580565b6040516101639190612228565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906121d9565b6105ce565b6040516101a09190612228565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190612243565b61061c565b005b3480156101de57600080fd5b506101f960048036038101906101f49190612243565b6106f0565b005b34801561020757600080fd5b50610210610833565b60405161021d9190612228565b60405180910390f35b34801561023257600080fd5b5061024d60048036038101906102489190612270565b610859565b60405161025a91906122cb565b60405180910390f35b34801561026f57600080fd5b5061028a600480360381019061028591906122e6565b610888565b60405161029a9493929190612322565b60405180910390f35b3480156102af57600080fd5b506102ca60048036038101906102c59190612270565b6108b8565b6040516102d791906122cb565b60405180910390f35b3480156102ec57600080fd5b506102f56108e7565b6040516103029190612425565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190612270565b610975565b60405161033f9190612228565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906122e6565b6109b7565b60405161037c9190612447565b60405180910390f35b34801561039157600080fd5b5061039a6109db565b6040516103ad9796959493929190612604565b60405180910390f35b3480156103c257600080fd5b506103dd60048036038101906103d891906122e6565b610a85565b6040516103ea9190612228565b60405180910390f35b3480156103ff57600080fd5b5061041a600480360381019061041591906122e6565b610ac4565b60405161042791906126dd565b60405180910390f35b34801561043c57600080fd5b5061045760048036038101906104529190612724565b610b19565b60405161046491906122cb565b60405180910390f35b34801561047957600080fd5b50610494600480360381019061048f91906122e6565b610b39565b6040516104a191906122cb565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc91906127b7565b610b59565b6040516104de9190612804565b60405180910390f35b3480156104f357600080fd5b506104fc610c37565b6040516105099190612228565b60405180910390f35b34801561051e57600080fd5b5061053960048036038101906105349190612875565b610c5d565b005b6105556004803603810190610550919061294b565b61101d565b005b34801561056357600080fd5b5061057e600480360381019061057991906129f2565b611654565b005b6005602052816000526040600020818154811061059c57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760205281600052604060002081815481106105ea57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a390612a7e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610780576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077790612a7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e690612aea565b60405180910390fd5b80600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b600b6020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60066020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b6060600a80548060200260200160405190810160405280929190818152602001828054801561096b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610921575b5050505050905090565b60086020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600981815481106109c757600080fd5b906000526020600020016000915090505481565b6000606080600080600060606109ef6119c3565b6109f76119fe565b46306000801b600067ffffffffffffffff811115610a1857610a17612b0a565b5b604051908082528060200260200182016040528015610a465781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b600a8181548110610a9557600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610acc612113565b600b60008381526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050919050565b600d6020528060005260406000206000915054906101000a900460ff1681565b600c6020528060005260406000206000915054906101000a900460ff1681565b6000808383905067ffffffffffffffff811115610b7957610b78612b0a565b5b604051908082528060200260200182016040528015610ba75781602001602082028036833780820191505090505b50905060005b84849050811015610c0657610bda858583818110610bce57610bcd612b39565b5b90506101000201611a39565b828281518110610bed57610bec612b39565b5b6020026020010181815250508080600101915050610bad565b5080604051602001610c189190612c20565b6040516020818303038152906040528051906020012091505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290612c83565b60405180910390fd5b83421115610d0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0590612cef565b60405180910390fd5b60007f8058e1123f055dd4e813dd95e63abf022a823c53f4ee75967a693e97cdfecd368a8a8a8a8a8a8a604051602001610d4f989796959493929190612d0f565b6040516020818303038152906040528051906020012090506000610d7282611ac7565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610dfb8286868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae1565b73ffffffffffffffffffffffffffffffffffffffff1614610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4890612dd9565b60405180910390fd5b600d600082815260200190815260200160002060009054906101000a900460ff1615610eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea990612e45565b60405180910390fd5b6001600d600083815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600b60008d8152602001908152602001600020905080600101548a1015610f3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3390612eb1565b60405180910390fd5b8060030154881015610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612f1d565b60405180910390fd5b80600101548a1115610fa2578a81600001819055508981600101819055505b8060030154881115610fc1578881600201819055508781600301819055505b8b7f2b092840ce5167ca3607754fd32cf828341f11d58c79dcae6a0051a17459119882600001548360010154846002015485600301546040516110079493929190612322565b60405180910390a2505050505050505050505050565b611025611b0d565b83421115611068576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105f90612f89565b60405180910390fd5b600086869050116110ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a590612ff5565b60405180910390fd5b600c600084815260200190815260200160002060009054906101000a900460ff161561110f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110690613061565b60405180910390fd5b600061111b8787610b59565b905060007f381abef6f07c6d7a174e78e58e22dcfb2bccc5ed73079967f6ffc5a16b918ec486863385604051602001611158959493929190613081565b604051602081830303815290604052805190602001209050600061117b82611ac7565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112048287878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611ae1565b73ffffffffffffffffffffffffffffffffffffffff161461125a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125190612dd9565b60405180910390fd5b60005b898990508110156115c357368a8a8381811061127c5761127b612b39565b5b9050610100020190506000600b60008360000135815260200190815260200160002090508060010154826080013510156112eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e290613120565b60405180910390fd5b80600101548260800135111561131a578160400135816000018190555081608001358160010181905550611365565b8160400135816000015414611364576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135b9061318c565b60405180910390fd5b5b80600301548260c0013510156113b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a7906131f8565b60405180910390fd5b8160200135816002015410156113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f290613264565b60405180910390fd5b80600301548260c0013511156114355781602001358260a0013561141f91906132b3565b81600201819055508160c0013581600301819055505b600960008154811061144a57611449612b39565b5b90600052602060002001548260e00135101561149b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149290613333565b60405180910390fd5b600060016009805490506114af91906132b3565b90505b6000811180156114e357508260e00135600982815481106114d6576114d5612b39565b5b9060005260206000200154115b156114f6578080600190039150506114b2565b6000600a828154811061150c5761150b612b39565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634950345c8560e0013585600001548e336040518563ffffffff1660e01b81526004016115809493929190613353565b600060405180830381600087803b15801561159a57600080fd5b505af11580156115ae573d6000803e3d6000fd5b5050505050505050808060010191505061125d565b506001600c600088815260200190815260200160002060006101000a81548160ff021916908315150217905550853373ffffffffffffffffffffffffffffffffffffffff167fb51d8f109b7e2b51135f2d8f1b45fd957374e8d8296083a13c9bc5375cd420e88b8b604051611639929190613552565b60405180910390a350505061164c611b53565b505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db90612a7e565b60405180910390fd5b6000600990506000600a905060008280549050905060005b8181101561176e578584828154811061171857611717612b39565b5b906000526020600020015403611763576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175a906135c2565b60405180910390fd5b8060010190506116fc565b50600081905060005b828110156117b7578685828154811061179357611792612b39565b5b906000526020600020015411156117ac578091506117b7565b806001019050611777565b5083600090806001815401808255809150506001900390600052602060002001600090919091909150558260009080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008290505b8181111561193c5784600182038154811061186857611867612b39565b5b906000526020600020015485828154811061188657611885612b39565b5b90600052602060002001819055508360018203815481106118aa576118a9612b39565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168482815481106118e8576118e7612b39565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019003905061184a565b508584828154811061195157611950612b39565b5b90600052602060002001819055508483828154811061197357611972612b39565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050565b60606119f960017f0000000000000000000000000000000000000000000000000000000000000000611b5d90919063ffffffff16565b905090565b6060611a3460027f0000000000000000000000000000000000000000000000000000000000000000611b5d90919063ffffffff16565b905090565b60007f7f11064311a4d79e89d4a8af1d912adacf3c11181103e65f43a84f383af7842b826000013583602001358460400135856060016020810190611a7e9190612243565b86608001358760a001358860c001358960e00135604051602001611aaa999897969594939291906135e2565b604051602081830303815290604052805190602001209050919050565b6000611ada611ad4611c0d565b83611cc4565b9050919050565b600080600080611af18686611d05565b925092509250611b018282611d61565b82935050505092915050565b600260005403611b49576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b606060ff60001b8314611b7a57611b7383611ec5565b9050611c07565b818054611b869061369e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bb29061369e565b8015611bff5780601f10611bd457610100808354040283529160200191611bff565b820191906000526020600020905b815481529060010190602001808311611be257829003601f168201915b505050505090505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015611c8957507f000000000000000000000000000000000000000000000000000000000000000046145b15611cb6577f00000000000000000000000000000000000000000000000000000000000000009050611cc1565b611cbe611f39565b90505b90565b60006040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b60008060006041845103611d4a5760008060006020870151925060408701519150606087015160001a9050611d3c88828585611fcf565b955095509550505050611d5a565b60006002855160001b9250925092505b9250925092565b60006003811115611d7557611d746136cf565b5b826003811115611d8857611d876136cf565b5b0315611ec15760016003811115611da257611da16136cf565b5b826003811115611db557611db46136cf565b5b03611dec576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026003811115611e0057611dff6136cf565b5b826003811115611e1357611e126136cf565b5b03611e58578060001c6040517ffce698f7000000000000000000000000000000000000000000000000000000008152600401611e4f9190612447565b60405180910390fd5b600380811115611e6b57611e6a6136cf565b5b826003811115611e7e57611e7d6136cf565b5b03611ec057806040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600401611eb79190612804565b60405180910390fd5b5b5050565b60606000611ed2836120c3565b90506000602067ffffffffffffffff811115611ef157611ef0612b0a565b5b6040519080825280601f01601f191660200182016040528015611f235781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000004630604051602001611fb49594939291906136fe565b60405160208183030381529060405280519060200120905090565b60008060007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08460001c111561200f5760006003859250925092506120b9565b600060018888888860405160008152602001604052604051612034949392919061376d565b6020604051602081039080840390855afa158015612056573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120aa57600060016000801b935093509350506120b9565b8060008060001b935093509350505b9450945094915050565b60008060ff8360001c169050601f81111561210a576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061217082612145565b9050919050565b61218081612165565b811461218b57600080fd5b50565b60008135905061219d81612177565b92915050565b6000819050919050565b6121b6816121a3565b81146121c157600080fd5b50565b6000813590506121d3816121ad565b92915050565b600080604083850312156121f0576121ef61213b565b5b60006121fe8582860161218e565b925050602061220f858286016121c4565b9150509250929050565b61222281612165565b82525050565b600060208201905061223d6000830184612219565b92915050565b6000602082840312156122595761225861213b565b5b60006122678482850161218e565b91505092915050565b600080604083850312156122875761228661213b565b5b60006122958582860161218e565b92505060206122a68582860161218e565b9150509250929050565b60008115159050919050565b6122c5816122b0565b82525050565b60006020820190506122e060008301846122bc565b92915050565b6000602082840312156122fc576122fb61213b565b5b600061230a848285016121c4565b91505092915050565b61231c816121a3565b82525050565b60006080820190506123376000830187612313565b6123446020830186612313565b6123516040830185612313565b61235e6060830184612313565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61239c81612165565b82525050565b60006123ae8383612393565b60208301905092915050565b6000602082019050919050565b60006123d282612367565b6123dc8185612372565b93506123e783612383565b8060005b838110156124185781516123ff88826123a2565b975061240a836123ba565b9250506001810190506123eb565b5085935050505092915050565b6000602082019050818103600083015261243f81846123c7565b905092915050565b600060208201905061245c6000830184612313565b92915050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b61249781612462565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124d75780820151818401526020810190506124bc565b60008484015250505050565b6000601f19601f8301169050919050565b60006124ff8261249d565b61250981856124a8565b93506125198185602086016124b9565b612522816124e3565b840191505092915050565b6000819050919050565b6125408161252d565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61257b816121a3565b82525050565b600061258d8383612572565b60208301905092915050565b6000602082019050919050565b60006125b182612546565b6125bb8185612551565b93506125c683612562565b8060005b838110156125f75781516125de8882612581565b97506125e983612599565b9250506001810190506125ca565b5085935050505092915050565b600060e082019050612619600083018a61248e565b818103602083015261262b81896124f4565b9050818103604083015261263f81886124f4565b905061264e6060830187612313565b61265b6080830186612219565b61266860a0830185612537565b81810360c083015261267a81846125a6565b905098975050505050505050565b60808201600082015161269e6000850182612572565b5060208201516126b16020850182612572565b5060408201516126c46040850182612572565b5060608201516126d76060850182612572565b50505050565b60006080820190506126f26000830184612688565b92915050565b6127018161252d565b811461270c57600080fd5b50565b60008135905061271e816126f8565b92915050565b60006020828403121561273a5761273961213b565b5b60006127488482850161270f565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261277657612775612751565b5b8235905067ffffffffffffffff81111561279357612792612756565b5b602083019150836101008202830111156127b0576127af61275b565b5b9250929050565b600080602083850312156127ce576127cd61213b565b5b600083013567ffffffffffffffff8111156127ec576127eb612140565b5b6127f885828601612760565b92509250509250929050565b60006020820190506128196000830184612537565b92915050565b60008083601f84011261283557612834612751565b5b8235905067ffffffffffffffff81111561285257612851612756565b5b60208301915083600182028301111561286e5761286d61275b565b5b9250929050565b60008060008060008060008060006101008a8c0312156128985761289761213b565b5b60006128a68c828d016121c4565b99505060206128b78c828d016121c4565b98505060406128c88c828d016121c4565b97505060606128d98c828d016121c4565b96505060806128ea8c828d016121c4565b95505060a06128fb8c828d016121c4565b94505060c061290c8c828d0161218e565b93505060e08a013567ffffffffffffffff81111561292d5761292c612140565b5b6129398c828d0161281f565b92509250509295985092959850929598565b600080600080600080608087890312156129685761296761213b565b5b600087013567ffffffffffffffff81111561298657612985612140565b5b61299289828a01612760565b965096505060206129a589828a016121c4565b94505060406129b689828a016121c4565b935050606087013567ffffffffffffffff8111156129d7576129d6612140565b5b6129e389828a0161281f565b92509250509295509295509295565b60008060408385031215612a0957612a0861213b565b5b6000612a17858286016121c4565b9250506020612a288582860161218e565b9150509250929050565b7f4e6f74204f776e65720000000000000000000000000000000000000000000000600082015250565b6000612a686009836124a8565b9150612a7382612a32565b602082019050919050565b60006020820190508181036000830152612a9781612a5b565b9050919050565b7f696e76616c6964207369676e6572000000000000000000000000000000000000600082015250565b6000612ad4600e836124a8565b9150612adf82612a9e565b602082019050919050565b60006020820190508181036000830152612b0381612ac7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600081905092915050565b6000819050602082019050919050565b612b978161252d565b82525050565b6000612ba98383612b8e565b60208301905092915050565b6000602082019050919050565b6000612bcd82612b68565b612bd78185612b73565b9350612be283612b7e565b8060005b83811015612c13578151612bfa8882612b9d565b9750612c0583612bb5565b925050600181019050612be6565b5085935050505092915050565b6000612c2c8284612bc2565b915081905092915050565b7f63616c6c6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b6000612c6d6015836124a8565b9150612c7882612c37565b602082019050919050565b60006020820190508181036000830152612c9c81612c60565b9050919050565b7f7369676e61747572652065787069726564000000000000000000000000000000600082015250565b6000612cd96011836124a8565b9150612ce482612ca3565b602082019050919050565b60006020820190508181036000830152612d0881612ccc565b9050919050565b600061010082019050612d25600083018b612537565b612d32602083018a612313565b612d3f6040830189612313565b612d4c6060830188612313565b612d596080830187612313565b612d6660a0830186612313565b612d7360c0830185612313565b612d8060e0830184612219565b9998505050505050505050565b7f696e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b6000612dc36011836124a8565b9150612dce82612d8d565b602082019050919050565b60006020820190508181036000830152612df281612db6565b9050919050565b7f7369676e6174757265207265706c617965640000000000000000000000000000600082015250565b6000612e2f6012836124a8565b9150612e3a82612df9565b602082019050919050565b60006020820190508181036000830152612e5e81612e22565b9050919050565b7f7374616c652070726963652076657273696f6e00000000000000000000000000600082015250565b6000612e9b6013836124a8565b9150612ea682612e65565b602082019050919050565b60006020820190508181036000830152612eca81612e8e565b9050919050565b7f7374616c6520696e76656e746f72792076657273696f6e000000000000000000600082015250565b6000612f076017836124a8565b9150612f1282612ed1565b602082019050919050565b60006020820190508181036000830152612f3681612efa565b9050919050565b7f6578706972656400000000000000000000000000000000000000000000000000600082015250565b6000612f736007836124a8565b9150612f7e82612f3d565b602082019050919050565b60006020820190508181036000830152612fa281612f66565b9050919050565b7f656d707479206261746368000000000000000000000000000000000000000000600082015250565b6000612fdf600b836124a8565b9150612fea82612fa9565b602082019050919050565b6000602082019050818103600083015261300e81612fd2565b9050919050565b7f6f726465724e6f20757365640000000000000000000000000000000000000000600082015250565b600061304b600c836124a8565b915061305682613015565b602082019050919050565b6000602082019050818103600083015261307a8161303e565b9050919050565b600060a0820190506130966000830188612537565b6130a36020830187612313565b6130b06040830186612313565b6130bd6060830185612219565b6130ca6080830184612537565b9695505050505050565b7f7374616c65207072696365000000000000000000000000000000000000000000600082015250565b600061310a600b836124a8565b9150613115826130d4565b602082019050919050565b60006020820190508181036000830152613139816130fd565b9050919050565b7f7072696365206d69736d61746368000000000000000000000000000000000000600082015250565b6000613176600e836124a8565b915061318182613140565b602082019050919050565b600060208201905081810360008301526131a581613169565b9050919050565b7f7374616c6520696e76656e746f72790000000000000000000000000000000000600082015250565b60006131e2600f836124a8565b91506131ed826131ac565b602082019050919050565b60006020820190508181036000830152613211816131d5565b9050919050565b7f696e73756666696369656e742073746f636b0000000000000000000000000000600082015250565b600061324e6012836124a8565b915061325982613218565b602082019050919050565b6000602082019050818103600083015261327d81613241565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132be826121a3565b91506132c9836121a3565b92508282039050818111156132e1576132e0613284565b5b92915050565b7f496e76616c69642070726f6d6f74696f6e204944000000000000000000000000600082015250565b600061331d6014836124a8565b9150613328826132e7565b602082019050919050565b6000602082019050818103600083015261334c81613310565b9050919050565b60006080820190506133686000830187612313565b6133756020830186612313565b6133826040830185612313565b61338f6060830184612219565b95945050505050565b600082825260208201905092915050565b6000819050919050565b60006133c260208401846121c4565b905092915050565b60006133d9602084018461218e565b905092915050565b61010082016133f360008301836133b3565b6134006000850182612572565b5061340e60208301836133b3565b61341b6020850182612572565b5061342960408301836133b3565b6134366040850182612572565b5061344460608301836133ca565b6134516060850182612393565b5061345f60808301836133b3565b61346c6080850182612572565b5061347a60a08301836133b3565b61348760a0850182612572565b5061349560c08301836133b3565b6134a260c0850182612572565b506134b060e08301836133b3565b6134bd60e0850182612572565b50505050565b60006134cf83836133e1565b6101008301905092915050565b600082905092915050565b600061010082019050919050565b60006135018385613398565b935061350c826133a9565b8060005b858110156135455761352282846134dc565b61352c88826134c3565b9750613537836134e7565b925050600181019050613510565b5085925050509392505050565b6000602082019050818103600083015261356d8184866134f5565b90509392505050565b7f4475706c69636174652070726f6d6f74696f6e20494400000000000000000000600082015250565b60006135ac6016836124a8565b91506135b782613576565b602082019050919050565b600060208201905081810360008301526135db8161359f565b9050919050565b6000610120820190506135f8600083018c612537565b613605602083018b612313565b613612604083018a612313565b61361f6060830189612313565b61362c6080830188612219565b61363960a0830187612313565b61364660c0830186612313565b61365360e0830185612313565b613661610100830184612313565b9a9950505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806136b657607f821691505b6020821081036136c9576136c861366f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600060a0820190506137136000830188612537565b6137206020830187612537565b61372d6040830186612537565b61373a6060830185612313565b6137476080830184612219565b9695505050505050565b600060ff82169050919050565b61376781613751565b82525050565b60006080820190506137826000830187612537565b61378f602083018661375e565b61379c6040830185612537565b6137a96060830184612537565b9594505050505056fea26469706673582212209ab7131e33e8c3d36bb70c4c41cca3260856d637ec1bcd0cef40d74bd9b56ab164736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "buyWithBatchHash((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[],uint256,uint256,bytes)": {
        "params": {
          "items": "Array of purchase items",
          "orderNo": "Unique order number to prevent replay",
          "payExpire": "Expiration timestamp for payment",
          "signature": "EIP-712 signature from system signer"
        }
      },
      "constructor": {
        "params": {
          "_signer": "The authorized system signer"
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getSku(uint256)": {
        "params": {
          "skuId": "SKU ID"
        },
        "returns": {
          "_0": "SkuState struct containing price, inventory, and version info"
        }
      },
      "hashPurchaseItems((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])": {
        "params": {
          "items": "Array of PurchaseItem structs"
        },
        "returns": {
          "_0": "bytes32 The cumulative hash of all items"
        }
      },
      "updateSkuWithSig(uint256,uint256,uint256,uint256,uint256,uint256,address,bytes)": {
        "params": {
          "expireTime": "Signature expiration timestamp",
          "inventoryVersion": "Inventory version",
          "newInventory": "New inventory amount",
          "newPrice": "New unit price",
          "priceVersion": "Price version",
          "signature": "EIP-712 signature from system signer",
          "skuId": "SKU ID",
          "updater": "Address authorized to perform the update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Purchased(address,uint256,(uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Event emitted on a purchase"
      },
      "SkuUpdated(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when a SKU is updated"
      }
    },
    "kind": "user",
    "methods": {
      "buyWithBatchHash((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[],uint256,uint256,bytes)": {
        "notice": "Batch purchase using a single EIP-712 signature"
      },
      "getSku(uint256)": {
        "notice": "Get SKU state"
      },
      "hashPurchaseItems((uint256,uint256,uint256,address,uint256,uint256,uint256,uint256)[])": {
        "notice": "Constructs a hash for an array of PurchaseItem structs"
      },
      "skus(uint256)": {
        "notice": "SKU mapping"
      },
      "systemSigner()": {
        "notice": "System signer address for EIP-712 signatures"
      },
      "updateSkuWithSig(uint256,uint256,uint256,uint256,uint256,uint256,address,bytes)": {
        "notice": "Update SKU using a system signature"
      },
      "usedHashes(bytes32)": {
        "notice": "Used struct hashes to prevent signature replay"
      },
      "usedOrderNo(uint256)": {
        "notice": "Used order numbers to prevent replay attacks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 692,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1717,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1719,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3172,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "contractOwner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3178,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "approvedOperators",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3183,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "arrayOfApprovedOperators",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3189,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "approvedAdministrators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3194,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "arrayOfApprovedAdministrators",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3200,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "receiverAccounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 3203,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "initialPromotionIDs",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3206,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "approvedPromotions",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3245,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "skus",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(SkuState)3216_storage)"
      },
      {
        "astId": 3250,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "usedOrderNo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 3255,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "usedHashes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 3258,
        "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
        "label": "systemSigner",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(SkuState)3216_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Proxy.SkuState)",
        "numberOfBytes": "32",
        "value": "t_struct(SkuState)3216_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(SkuState)3216_storage": {
        "encoding": "inplace",
        "label": "struct Proxy.SkuState",
        "members": [
          {
            "astId": 3209,
            "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3211,
            "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
            "label": "priceVersion",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3213,
            "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
            "label": "inventory",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3215,
            "contract": "contracts/Protocol Contracts/Proxy.sol:Proxy",
            "label": "inventoryVersion",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}