{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"./IERC721.sol\";\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {Strings} from \"../../utils/Strings.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    mapping(uint256 tokenId => address) private _owners;\n\n    mapping(address owner => uint256) private _balances;\n\n    mapping(uint256 tokenId => address) private _tokenApprovals;\n\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual returns (uint256) {\n        if (owner == address(0)) {\n            revert ERC721InvalidOwner(address(0));\n        }\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\n        return _requireOwned(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\n        _requireOwned(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual {\n        _approve(to, tokenId, _msgSender());\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\n        _requireOwned(tokenId);\n\n        return _getApproved(tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\n        address previousOwner = _update(to, tokenId, _msgSender());\n        if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\n        transferFrom(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     *\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\n     */\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n     * particular (ignoring whether it is owned by `owner`).\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n     * the `spender` for the specific `tokenId`.\n     *\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n     * assumption.\n     */\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n     *\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n     * remain consistent with one another.\n     */\n    function _increaseBalance(address account, uint128 value) internal virtual {\n        unchecked {\n            _balances[account] += value;\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\n\n    /**\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        _checkOnERC721Received(address(0), to, tokenId, data);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        } else if (previousOwner != from) {\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\n        }\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `tokenId` token must exist and be owned by `from`.\n     * - `to` cannot be the zero address.\n     * - `from` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\n        _safeTransfer(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        _checkOnERC721Received(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\n     *\n     * Emits an {Approval} event.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address to, uint256 tokenId, address auth) internal {\n        _approve(to, tokenId, auth, true);\n    }\n\n    /**\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n     * emitted in the context of transfers.\n     */\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Requirements:\n     * - operator can't be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC721InvalidOperator(operator);\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n     * Returns the owner.\n     *\n     * Overrides to ownership logic should be done to {_ownerOf}.\n     */\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\n        if (to.code.length > 0) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                if (retval != IERC721Receiver.onERC721Received.selector) {\n                    revert ERC721InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert ERC721InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC721} from \"../ERC721.sol\";\nimport {IERC721Enumerable} from \"./IERC721Enumerable.sol\";\nimport {IERC165} from \"../../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\n * of all the token ids in the contract as well as all token ids owned by each account.\n *\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\n\n    uint256[] private _allTokens;\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\n\n    /**\n     * @dev An `owner`'s token query was out of bounds for `index`.\n     *\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\n     */\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\n\n    /**\n     * @dev Batch mint is not allowed.\n     */\n    error ERC721EnumerableForbiddenBatchMint();\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\n        if (index >= balanceOf(owner)) {\n            revert ERC721OutOfBoundsIndex(owner, index);\n        }\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\n        if (index >= totalSupply()) {\n            revert ERC721OutOfBoundsIndex(address(0), index);\n        }\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev See {ERC721-_update}.\n     */\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\n        address previousOwner = super._update(to, tokenId, auth);\n\n        if (previousOwner == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (previousOwner != to) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n\n        return previousOwner;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = balanceOf(to) - 1;\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = balanceOf(from);\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n\n    /**\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\n     */\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\n        if (amount > 0) {\n            revert ERC721EnumerableForbiddenBatchMint();\n        }\n        super._increaseBalance(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC721} from \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n     * reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.2) (utils/Base64.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides a set of functions to operate with Base64 strings.\n */\nlibrary Base64 {\n    /**\n     * @dev Base64 Encoding/Decoding Table\n     */\n    string internal constant _TABLE = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n    /**\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\n     */\n    function encode(bytes memory data) internal pure returns (string memory) {\n        /**\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\n         */\n        if (data.length == 0) return \"\";\n\n        // Loads the table into memory\n        string memory table = _TABLE;\n\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\n        // and split into 4 numbers of 6 bits.\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\n        // - `data.length + 2`  -> Round up\n        // - `/ 3`              -> Number of 3-bytes chunks\n        // - `4 *`              -> 4 characters for each chunk\n        string memory result = new string(4 * ((data.length + 2) / 3));\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Prepare the lookup table (skip the first \"length\" byte)\n            let tablePtr := add(table, 1)\n\n            // Prepare result pointer, jump over length\n            let resultPtr := add(result, 0x20)\n            let dataPtr := data\n            let endPtr := add(data, mload(data))\n\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\n            // set it to zero to make sure no dirty bytes are read in that section.\n            let afterPtr := add(endPtr, 0x20)\n            let afterCache := mload(afterPtr)\n            mstore(afterPtr, 0x00)\n\n            // Run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // Advance 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // To write each character, shift the 3 byte (24 bits) chunk\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\n                // Use this as an index into the lookup table, mload an entire word\n                // so the desired character is in the least significant byte, and\n                // mstore8 this least significant byte into the result and continue.\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1) // Advance\n            }\n\n            // Reset the value that was cached\n            mstore(afterPtr, afterCache)\n\n            // When data `bytes` is not exactly 3 bytes long\n            // it is padded with `=` characters at the end\n            switch mod(mload(data), 3)\n            case 1 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n                mstore8(sub(resultPtr, 2), 0x3d)\n            }\n            case 2 {\n                mstore8(sub(resultPtr, 1), 0x3d)\n            }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/DrawingManagerv4.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event DrawingCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 maxSlots, uint256 endTime, uint256 price, uint256 cohortSize, uint256 rebateAmount, bool mintsNFTs);\n// event DrawingCustodyRedeemed(uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingCancelled(uint256 indexed promotionID, uint256 numberOfParticipants);\n// event DrawingReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingReceiptsMinted(address indexed joiner, uint256 indexed promotionID, uint256 indexed firstParticipantNumber, uint256 firstTokenID, uint256 numTickets);\n// event RaffleWinner(uint256 indexed promotionID, uint256 cohort, uint256 tokenID, uint256 participantNumber, uint256 prize,  uint256 randomWord); \n// event RafflesInitiated(uint256[] promotionIDs, uint256 indexed vrfRequestID, address indexed initiator, uint256[] cohorts); //initiators should be reimbursed more in potential air-drops\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv9.sol\";\n\n// contract DrawingManager is VRFConsumerBaseV2, PromotionManager {\n\n//     struct Drawing {\n//         uint16 maxSlots;\n//         uint256 endTime;\n//         uint256 price;\n//         uint256 cohortSize;\n//         uint256 rebateAmount;\n//         address owner; \n//         bool returnedCustody;\n//         address erc20Token;\n//         bool mintsNFTs;\n//     }\n\n//     struct DrawingReceipt {\n//         uint256 drawingID;\n//         uint256 redeemableAmount;\n//     }\n\n//     struct VRFRequestContext {\n//         uint256[] drawingIDArray; \n//         uint256[] cohorts;\n//         uint256[] randomWords; \n//     }\n\n//     uint256 public drawingIDs = 200;// type(uint256).max / 10 * 2 + 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n\n\n//     mapping(uint256 => DrawingReceipt) public DrawingReceipts;\n//     mapping(uint256 => Drawing) public Drawings;\n//     mapping(uint256 => VRFRequestContext) vrfRequestIDtoContext; \n//     mapping(uint256=> mapping(uint256 => bool)) raffleInitiatedBool;\n\n//     /* State Variables */\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n\n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\n//     uint32 private immutable i_callbackGasLimit;\n//     uint64 private immutable i_subscriptionId;\n//     uint256 private s_lastTimeStamp;\n//     bytes32 private immutable i_gasLane;\n\n//     constructor(\n//         address vrfCoordinatorV2,\n//         address _receiptManagerAddress,\n//         address _promotionsManagerAddress, \n//         bytes32 gasLane,\n//         uint64 subscriptionId,\n//         uint32 callbackGasLimit\n//     ) VRFConsumerBaseV2(vrfCoordinatorV2) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManagerAddress = _receiptManagerAddress;  \n//         receiptManager = IReceiptManager(_receiptManagerAddress);\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//         i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n//         i_gasLane = gasLane;\n//         i_subscriptionId = subscriptionId;\n//         i_callbackGasLimit = callbackGasLimit;\n//     }\n\n//     function createDrawing(\n//         uint16 _maxSlots,\n//         uint256 _duration,\n//         uint256 _price,\n//         uint256 _cohortSize,\n//         uint256 _rebateAmount,\n//         address _owner,\n//         address _erc20Token, \n//         bool _mintsNFTs\n//     ) public onlyApprovedOperators(_owner) {\n//         if (_cohortSize<=1 || _maxSlots % _cohortSize != 0  || _duration < MINIMUM_DURATION || _maxSlots <= 1 || _rebateAmount >= _price*_cohortSize) {\n//             revert InvalidConfig();\n//         }\n\n//         // Initialize a new drawing contract and store it in storage\n//         Drawing storage drawing = Drawings[drawingIDs];\n//         drawing.maxSlots = _maxSlots;\n//         drawing.owner = payable(_owner);\n//         drawing.endTime = block.timestamp + _duration;\n//         drawing.price = _price;\n//         drawing.cohortSize = _cohortSize;\n//         drawing.rebateAmount = _rebateAmount;\n//         drawing.erc20Token = _erc20Token; \n//         drawing.mintsNFTs = _mintsNFTs;\n\n//         emit DrawingCreated(_owner, drawingIDs, _erc20Token, _maxSlots, _duration + block.timestamp, _price, _cohortSize, _rebateAmount, _mintsNFTs); \n//         addressToPromotions[_owner].push(drawingIDs);\n//         if (_mintsNFTs) {\n//             receiptManager.setPromotionOwner(drawingIDs, _owner); \n//         }\n//         drawingIDs+=1; \n//     }\n\n//     function joinDrawing(uint256 drawingID, uint256 numOrders) public {\n//         Drawing memory drawing = Drawings[drawingID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         console.log(\"1\");\n//         // Check if the promotion is expired or slots are full\n//         if (numParticipants >= drawing.maxSlots ||  drawing.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if(numParticipants + numOrders > drawing.maxSlots) {\n//             numOrders = drawing.maxSlots - numParticipants;\n//         }\n//         console.log(\"2\");\n//         // Calculate amounts\n//         uint256 totalRebate = drawing.rebateAmount * numOrders;\n//         uint256 totalSellerAmount = (drawing.price - drawing.rebateAmount) * numOrders;\n//         uint256 commissionAmount = (totalSellerAmount) * commission / 10000;\n//         uint256 totalAmount = totalRebate + totalSellerAmount;\n//         console.log(totalRebate);\n//         console.log(totalSellerAmount);\n//         console.log(commissionAmount);\n//         console.log(totalAmount);\n//         console.log(\"9\");\n//         // Transfer funds\n//         IERC20(drawing.erc20Token).transferFrom(msg.sender, address(this), totalAmount);\n//         console.log(\"3a\");\n//         IERC20(drawing.erc20Token).transfer(promotionsManager.getReceiverAddress(drawing.owner, drawing.erc20Token), totalSellerAmount - commissionAmount);\n//         console.log(\"4\");\n//         // Update balances\n//         earnedCommissions[drawing.erc20Token] += commissionAmount;\n\n//         // Mint NFT receipts and log details\n//         uint256 initialReceiptID;\n//         if (drawing.mintsNFTs) {\n//             initialReceiptID = receiptManager.mintReceipts(\n//                 msg.sender,\n//                 drawingID,\n//                 numParticipants + 1,\n//                 numOrders\n//             );\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n//         console.log(\"5\");\n\n//         for (uint256 i = 0; i < numOrders; ++i) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[initialReceiptID + i];\n//             drawingReceipt.drawingID = drawingID; \n\n//             // Directly push to storage array\n//             promotionIDToReceiptIDs[drawingID].push(initialReceiptID + i);\n\n//             // Handle unminted receipt ownership\n//             if (!drawing.mintsNFTs) {\n//                 unmintedReceiptsToOwners[initialReceiptID + i] = msg.sender;\n//             }\n//         }\n//         console.log(\"6\");\n\n//         // Update the number of participants\n//         emit DrawingReceiptsMinted(msg.sender, drawingID, numParticipants +1, initialReceiptID, numOrders);\n//         console.log(\"7\");\n//     }\n\n//     function drawingEligibility(uint256 drawingID, uint256 cohort) public view returns (bool) {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if(promotionIDToReceiptIDs[drawingID].length < drawing.cohortSize*(1+cohort) || raffleInitiatedBool[drawingID][cohort] == true || promotionIDToReceiptIDs[drawingID].length == 0) {\n//             console.log(drawingID, cohort);\n//             console.log(\"Ineligible\");\n//             return false; \n//         }\n//         else {\n//             console.log(drawingID, cohort);\n//             console.log(\"eligible\");\n//             return true;\n//         } \n//     } \n\n//     function initiateDrawings(uint256[] calldata arrayOfDrawingIDs, uint256[] calldata arrayOfcohorts) public {\n//         // Check array lengths match\n//         require(arrayOfDrawingIDs.length == arrayOfcohorts.length, \"Array length mismatch\");\n//         require(arrayOfDrawingIDs.length <= 5, \"Exceed length\");\n//         require(arrayOfDrawingIDs.length > 0, \"Zero length\");\n\n//         // Pre-check eligibility for all entries\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             require(drawingEligibility(arrayOfDrawingIDs[i], arrayOfcohorts[i]), \"Ineligible entry\");\n//         }\n\n//         // Process each drawingID and cohort\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             raffleInitiatedBool[arrayOfDrawingIDs[i]][arrayOfcohorts[i]] = true;\n//         }\n\n//         // Convert length to uint32 for VRF call\n//         uint32 numWords = uint32(arrayOfDrawingIDs.length);\n\n//         // Request randomness\n//         uint256 requestId = i_vrfCoordinator.requestRandomWords(\n//             i_gasLane,\n//             i_subscriptionId,\n//             REQUEST_CONFIRMATIONS,\n//             i_callbackGasLimit,\n//             numWords // Number of random words to request (adjust if needed)\n//         );\n\n//         // Create storage reference to the context\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n\n//         // Manually copy arrays from calldata to storage\n//         context.drawingIDArray = arrayOfDrawingIDs; // This copies elements\n//         context.cohorts = arrayOfcohorts; // This copies elements\n        \n\n//         //emit event\n//         emit RafflesInitiated(arrayOfDrawingIDs, requestId, msg.sender, arrayOfcohorts);\n//     }\n\n//     function fulfillRandomWords(\n//         uint256 requestId, \n//         uint256[] memory randomWords\n//     ) internal override {\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n//         console.log(\"fulfilling\");\n//         // Ensure we have enough random words\n//         require(\n//             randomWords.length == context.drawingIDArray.length, \n//             \"Random words length mismatch\"\n//         );\n//         console.log(context.drawingIDArray.length); \n        \n//         // Process each drawing/cohort combination\n//         for (uint i = 0; i < context.drawingIDArray.length; i++) {\n//             uint256 drawingID = context.drawingIDArray[i];\n//             uint256 cohort = context.cohorts[i];\n//             uint256 randomWord = randomWords[i];\n//             console.log(\"a\");\n            \n//             uint256 cohortSize = Drawings[drawingID].cohortSize;\n            \n//             // Calculate winner position\n//             uint256 winnerIndex = (cohort * cohortSize) + (randomWord % cohortSize);\n//             uint256 winningReceiptID = promotionIDToReceiptIDs[drawingID][winnerIndex];\n//             uint256 winningAmount = Drawings[drawingID].rebateAmount * cohortSize;\n            \n            \n//             // Update receipt\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[winningReceiptID];\n//             drawingReceipt.redeemableAmount = winningAmount;\n//             console.log(winningReceiptID);\n//             console.log(winningAmount);\n//             console.log(drawingReceipt.redeemableAmount);\n            \n//             // Emit event for this winner\n//             emit RaffleWinner(\n//                 drawingID,\n//                 cohort,\n//                 winningReceiptID,\n//                 winnerIndex + 1,\n//                 winningAmount,\n//                 randomWord\n//             );\n//         }\n//         console.log(\"b\");\n        \n//         // Optional: Clean up storage to save gas\n//         delete vrfRequestIDtoContext[requestId];\n//     }\n\n\n//     function redeemDrawingReceipts(uint256[] calldata receiptIDs) external {\n//         uint256 redeemableAmount; \n//         address erc20Token = Drawings[DrawingReceipts[receiptIDs[0]].drawingID].erc20Token; //erc20 address of the first token\n//         for(uint256 i =0; i < receiptIDs.length; i++) {\n//             DrawingReceipt memory drawingReceipt = DrawingReceipts[receiptIDs[i]];\n//             Drawing storage drawing = Drawings[drawingReceipt.drawingID];\n//             require(erc20Token == drawing.erc20Token, \"Invalid\"); \n//             if(drawing.mintsNFTs) {\n//                 require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \"Not owned\");\n//             }\n//             else {\n//                 require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \"Not owned\");\n//             }            \n//             if(drawingReceipt.redeemableAmount >0) {\n//                 redeemableAmount += drawingReceipt.redeemableAmount;\n//                 DrawingReceipts[receiptIDs[i]].redeemableAmount = 0; \n//                 emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.redeemableAmount); \n//             }\n//         }\n//         if(redeemableAmount !=0) {\n//             IERC20(erc20Token).transfer(\n//                 msg.sender,\n//                 redeemableAmount\n//             );\n//         }\n//     }\n\n\n//     function cancelDrawing(uint256 drawingID) external {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length; \n//         if (drawing.endTime > block.timestamp && numParticipants < drawing.maxSlots) {\n//             uint256 numBuyersToCompensate = numParticipants % drawing.cohortSize;\n//             // Ensure we are compensating the last `numBuyersToCompensate` participants\n//             uint256 startIndex = numParticipants - numBuyersToCompensate; // Start index for the last `numBuyersToCompensate`\n//             uint256 endIndex = numParticipants - 1; // End index for the last participant\n\n//             // Create a new array to hold the slice\n//             uint256[] memory receiptsToCompensate = new uint256[](numBuyersToCompensate);\n\n//             // Copy the elements from the original array to the new array\n//             for (uint256 i = startIndex; i <= endIndex; i++) {\n//                 receiptsToCompensate[i - startIndex] = promotionIDToReceiptIDs[drawingID][i];\n//             }\n\n//             // Pass the array to the rebate function\n//             rebateDrawingReceipts(receiptsToCompensate, drawing.rebateAmount);\n//             emit DrawingCancelled(drawingID, numBuyersToCompensate);\n//             drawing.maxSlots = numParticipants; \n//             drawing.returnedCustody = true; \n//         }\n//     }\n\n//     function rebateDrawingReceipts(\n//         uint256[] memory tokenIds,\n//         uint256 rebateAmount\n//     ) internal {\n//         for (uint256 i = 0; i < tokenIds.length; i++) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[\n//                 tokenIds[i]\n//             ];\n//             drawingReceipt.redeemableAmount = rebateAmount;\n//         }\n//     }\n\n//     function retrieveExcessDrawingCustody(uint256 drawingID) public {\n//         Drawing memory drawing = Drawings[drawingID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         // Check if the custody has already been returned\n//         require(block.timestamp > drawing.endTime || drawing.maxSlots == numParticipants, \"Ineligible\");\n//         require(!drawing.returnedCustody, \"Already Returned\");\n\n//         // Calculate excess custody based on remaining participants in last cohort\n//         uint256 excessCustody = (numParticipants % drawing.cohortSize) * drawing.rebateAmount;\n\n//         // Pay the contract  owner the remaining amount \n//         IERC20(drawing.erc20Token).transfer(contractOwner, excessCustody); \n        \n//         // Update storage values\n//         Drawing storage drawingStorage = Drawings[drawingID];\n//         drawingStorage.returnedCustody = true;\n\n//         //Emit the event\n//         emit DrawingCustodyRedeemed(drawingID, excessCustody); \n//     }\n\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Drawing storage drawing =Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!drawing.mintsNFTs) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Drawing storage drawing = Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n// }"
    },
    "contracts/DrawingManagerv5.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event DrawingCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 maxSlots, uint256 endTime, uint256 price, uint256 cohortSize, uint256 rebateAmount, bool mintsNFTs);\n// event DrawingCustodyRedeemed(uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingCancelled(uint256 indexed promotionID, uint256 numberOfParticipants);\n// event DrawingReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingReceiptsMinted(address indexed joiner, uint256 indexed promotionID, uint256 indexed firstParticipantNumber, uint256 firstTokenID, uint256 numTickets);\n// event RaffleWinner(uint256 indexed promotionID, uint256 cohort, uint256 tokenID, uint256 participantNumber, uint256 prize,  uint256 randomWord); \n// event RafflesInitiated(uint64[] promotionIDs, uint256 indexed vrfRequestID, address indexed initiator, uint16[] cohorts); //initiators should be reimbursed more in potential air-drops\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv9.sol\";\n\n// contract DrawingManager is VRFConsumerBaseV2, PromotionManager {\n\n//     struct Drawing {\n//         uint256 endTime;  \n//         uint256 price;  \n//         uint256 rebateAmount;    \n//         address owner;          \n//         bool returnedCustody;    \n//         bool mintsNFTs;        \n//         uint16 maxSlots;        \n//         uint16 cohortSize;      \n//         address erc20Token;      \n//     }\n\n//     struct DrawingReceipt {\n//         uint256 drawingID;\n//         uint256 redeemableAmount;\n//     }\n\n//     struct VRFRequestContext {\n//         uint64[] drawingIDArray; \n//         uint16[] cohorts;\n//         uint256[] randomWords; \n//     }\n\n//     uint256 public drawingIDs = 200;// type(uint256).max / 10 * 2 + 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n\n\n//     mapping(uint256 => DrawingReceipt) public DrawingReceipts;\n//     mapping(uint256 => Drawing) public Drawings;\n//     mapping(uint256 => VRFRequestContext) vrfRequestIDtoContext; \n//     mapping(uint256=> mapping(uint256 => bool)) raffleInitiatedBool;\n\n//     /* State Variables */\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n\n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\n//     uint32 private immutable i_callbackGasLimit;\n//     uint64 private immutable i_subscriptionId;\n//     uint256 private s_lastTimeStamp;\n//     bytes32 private immutable i_gasLane;\n\n//     constructor(\n//         address vrfCoordinatorV2,\n//         address _receiptManagerAddress,\n//         address _promotionsManagerAddress, \n//         bytes32 gasLane,\n//         uint64 subscriptionId,\n//         uint32 callbackGasLimit\n//     ) VRFConsumerBaseV2(vrfCoordinatorV2) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManagerAddress = _receiptManagerAddress;  \n//         receiptManager = IReceiptManager(_receiptManagerAddress);\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//         i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n//         i_gasLane = gasLane;\n//         i_subscriptionId = subscriptionId;\n//         i_callbackGasLimit = callbackGasLimit;\n//     }\n\n//     function createDrawing(\n//         uint16 _maxSlots,\n//         uint256 _duration,\n//         uint256 _price,\n//         uint16 _cohortSize,\n//         uint256 _rebateAmount,\n//         address _owner,\n//         address _erc20Token, \n//         bool _mintsNFTs\n//     ) public onlyApprovedOperators(_owner) {\n//         if (_cohortSize<=1 || _maxSlots % _cohortSize != 0  || _duration < MINIMUM_DURATION || _maxSlots <= 1 || _rebateAmount >= _price*_cohortSize) {\n//             revert InvalidConfig();\n//         }\n\n//         // Initialize a new drawing contract and store it in storage\n//         Drawing storage drawing = Drawings[drawingIDs];\n//         drawing.maxSlots = _maxSlots;\n//         drawing.owner = payable(_owner);\n//         drawing.endTime = block.timestamp + _duration;\n//         drawing.price = _price;\n//         drawing.cohortSize = _cohortSize;\n//         drawing.rebateAmount = _rebateAmount;\n//         drawing.erc20Token = _erc20Token; \n//         drawing.mintsNFTs = _mintsNFTs;\n\n//         emit DrawingCreated(_owner, drawingIDs, _erc20Token, _maxSlots, _duration + block.timestamp, _price, _cohortSize, _rebateAmount, _mintsNFTs); \n//         addressToPromotions[_owner].push(drawingIDs);\n//         if (_mintsNFTs) {\n//             receiptManager.setPromotionOwner(drawingIDs, _owner); \n//         }\n//         drawingIDs+=1; \n//     }\n\n//     function joinDrawing(uint256 drawingID, uint256 numOrders) public {\n//         Drawing memory drawing = Drawings[drawingID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         console.log(\"1\");\n//         // Check if the promotion is expired or slots are full\n//         if (numParticipants >= drawing.maxSlots ||  drawing.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if(numParticipants + numOrders > drawing.maxSlots) {\n//             numOrders = drawing.maxSlots - numParticipants;\n//         }\n//         console.log(\"2\");\n//         // Calculate amounts\n//         uint256 totalRebate = drawing.rebateAmount * numOrders;\n//         uint256 totalSellerAmount = (drawing.price - drawing.rebateAmount) * numOrders;\n//         uint256 commissionAmount = (totalSellerAmount) * commission / 10000;\n//         uint256 totalAmount = totalRebate + totalSellerAmount;\n//         console.log(totalRebate);\n//         console.log(totalSellerAmount);\n//         console.log(commissionAmount);\n//         console.log(totalAmount);\n//         console.log(\"9\");\n//         // Transfer funds\n//         IERC20(drawing.erc20Token).transferFrom(msg.sender, address(this), totalAmount);\n//         console.log(\"3a\");\n//         IERC20(drawing.erc20Token).transfer(promotionsManager.getReceiverAddress(drawing.owner, drawing.erc20Token), totalSellerAmount - commissionAmount);\n//         console.log(\"4\");\n//         // Update balances\n//         earnedCommissions[drawing.erc20Token] += commissionAmount;\n\n//         // Mint NFT receipts and log details\n//         uint256 initialReceiptID;\n//         if (drawing.mintsNFTs) {\n//             initialReceiptID = receiptManager.mintReceipts(\n//                 msg.sender,\n//                 drawingID,\n//                 numParticipants + 1,\n//                 numOrders\n//             );\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n//         console.log(\"5\");\n\n//         for (uint256 i = 0; i < numOrders; ++i) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[initialReceiptID + i];\n//             drawingReceipt.drawingID = drawingID; \n\n//             // Directly push to storage array\n//             promotionIDToReceiptIDs[drawingID].push(initialReceiptID + i);\n\n//             // Handle unminted receipt ownership\n//             if (!drawing.mintsNFTs) {\n//                 unmintedReceiptsToOwners[initialReceiptID + i] = msg.sender;\n//             }\n//         }\n//         console.log(\"6\");\n\n//         // Update the number of participants\n//         emit DrawingReceiptsMinted(msg.sender, drawingID, numParticipants +1, initialReceiptID, numOrders);\n//         console.log(\"7\");\n//     }\n\n//     function drawingEligibility(uint256 drawingID, uint256 cohort) public view returns (bool) {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if(promotionIDToReceiptIDs[drawingID].length < drawing.cohortSize*(1+cohort) || raffleInitiatedBool[drawingID][cohort] == true || promotionIDToReceiptIDs[drawingID].length == 0) {\n//             console.log(drawingID, cohort);\n//             console.log(\"Ineligible\");\n//             return false; \n//         }\n//         else {\n//             console.log(drawingID, cohort);\n//             console.log(\"eligible\");\n//             return true;\n//         } \n//     } \n\n//     function initiateDrawings(uint64[] calldata arrayOfDrawingIDs, uint16[] calldata arrayOfcohorts) public {\n//         // Check array lengths match\n//         require(arrayOfDrawingIDs.length == arrayOfcohorts.length, \"Array length mismatch\");\n//         require(arrayOfDrawingIDs.length <= 5, \"Exceed length\");\n//         require(arrayOfDrawingIDs.length > 0, \"Zero length\");\n\n//         // Pre-check eligibility for all entries\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             require(drawingEligibility(arrayOfDrawingIDs[i], arrayOfcohorts[i]), \"Ineligible entry\");\n//         }\n\n//         // Process each drawingID and cohort\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             raffleInitiatedBool[arrayOfDrawingIDs[i]][arrayOfcohorts[i]] = true;\n//         }\n\n//         // Convert length to uint32 for VRF call\n//         uint32 numWords = uint32(arrayOfDrawingIDs.length);\n\n//         // Request randomness\n//         uint256 requestId = i_vrfCoordinator.requestRandomWords(\n//             i_gasLane,\n//             i_subscriptionId,\n//             REQUEST_CONFIRMATIONS,\n//             i_callbackGasLimit,\n//             numWords // Number of random words to request (adjust if needed)\n//         );\n\n//         // Create storage reference to the context\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n\n//         // Manually copy arrays from calldata to storage\n//         context.drawingIDArray = arrayOfDrawingIDs; // This copies elements\n//         context.cohorts = arrayOfcohorts; // This copies elements\n        \n\n//         //emit event\n//         emit RafflesInitiated(arrayOfDrawingIDs, requestId, msg.sender, arrayOfcohorts);\n//     }\n\n//     function fulfillRandomWords(\n//         uint256 requestId, \n//         uint256[] memory randomWords\n//     ) internal override {\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n//         console.log(\"fulfilling\");\n//         // Ensure we have enough random words\n//         require(\n//             randomWords.length == context.drawingIDArray.length, \n//             \"Random words length mismatch\"\n//         );\n//         console.log(context.drawingIDArray.length); \n        \n//         // Process each drawing/cohort combination\n//         for (uint i = 0; i < context.drawingIDArray.length; i++) {\n//             uint256 drawingID = context.drawingIDArray[i];\n//             uint256 cohort = context.cohorts[i];\n//             uint256 randomWord = randomWords[i];\n//             console.log(\"a\");\n            \n//             uint256 cohortSize = Drawings[drawingID].cohortSize;\n            \n//             // Calculate winner position\n//             uint256 winnerIndex = (cohort * cohortSize) + (randomWord % cohortSize);\n//             uint256 winningReceiptID = promotionIDToReceiptIDs[drawingID][winnerIndex];\n//             uint256 winningAmount = Drawings[drawingID].rebateAmount * cohortSize;\n            \n            \n//             // Update receipt\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[winningReceiptID];\n//             drawingReceipt.redeemableAmount = winningAmount;\n//             console.log(winningReceiptID);\n//             console.log(winningAmount);\n//             console.log(drawingReceipt.redeemableAmount);\n            \n//             // Emit event for this winner\n//             emit RaffleWinner(\n//                 drawingID,\n//                 cohort,\n//                 winningReceiptID,\n//                 winnerIndex + 1,\n//                 winningAmount,\n//                 randomWord\n//             );\n//         }\n//         console.log(\"b\");\n        \n//         // Optional: Clean up storage to save gas\n//         delete vrfRequestIDtoContext[requestId];\n//     }\n\n\n//     function redeemDrawingReceipts(uint256[] calldata receiptIDs) external {\n//         uint256 redeemableAmount; \n//         address erc20Token = Drawings[DrawingReceipts[receiptIDs[0]].drawingID].erc20Token; //erc20 address of the first token\n//         for(uint256 i =0; i < receiptIDs.length; i++) {\n//             DrawingReceipt memory drawingReceipt = DrawingReceipts[receiptIDs[i]];\n//             Drawing storage drawing = Drawings[drawingReceipt.drawingID];\n//             require(erc20Token == drawing.erc20Token, \"Invalid\"); \n//             if(drawing.mintsNFTs) {\n//                 require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \"Not owned\");\n//             }\n//             else {\n//                 require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \"Not owned\");\n//             }            \n//             if(drawingReceipt.redeemableAmount >0) {\n//                 redeemableAmount += drawingReceipt.redeemableAmount;\n//                 DrawingReceipts[receiptIDs[i]].redeemableAmount = 0; \n//                 emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.redeemableAmount); \n//             }\n//         }\n//         if(redeemableAmount !=0) {\n//             IERC20(erc20Token).transfer(\n//                 msg.sender,\n//                 redeemableAmount\n//             );\n//         }\n//     }\n\n\n//     function cancelDrawing(uint256 drawingID) external {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length; \n//         if (drawing.endTime > block.timestamp && numParticipants < drawing.maxSlots) {\n//             uint256 numBuyersToCompensate = numParticipants % drawing.cohortSize;\n//             // Ensure we are compensating the last `numBuyersToCompensate` participants\n//             uint256 startIndex = numParticipants - numBuyersToCompensate; // Start index for the last `numBuyersToCompensate`\n//             uint256 endIndex = numParticipants - 1; // End index for the last participant\n\n//             // Create a new array to hold the slice\n//             uint256[] memory receiptsToCompensate = new uint256[](numBuyersToCompensate);\n\n//             // Copy the elements from the original array to the new array\n//             for (uint256 i = startIndex; i <= endIndex; i++) {\n//                 receiptsToCompensate[i - startIndex] = promotionIDToReceiptIDs[drawingID][i];\n//             }\n\n//             // Pass the array to the rebate function\n//             rebateDrawingReceipts(receiptsToCompensate, drawing.rebateAmount);\n//             emit DrawingCancelled(drawingID, numBuyersToCompensate);\n//             drawing.maxSlots = uint16(numParticipants); \n//             drawing.returnedCustody = true; \n//         }\n//     }\n\n//     function rebateDrawingReceipts(\n//         uint256[] memory tokenIds,\n//         uint256 rebateAmount\n//     ) internal {\n//         for (uint256 i = 0; i < tokenIds.length; i++) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[\n//                 tokenIds[i]\n//             ];\n//             drawingReceipt.redeemableAmount = rebateAmount;\n//         }\n//     }\n\n//     function retrieveExcessDrawingCustody(uint256 drawingID) public {\n//         Drawing memory drawing = Drawings[drawingID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         // Check if the custody has already been returned\n//         require(block.timestamp > drawing.endTime || drawing.maxSlots == numParticipants, \"Ineligible\");\n//         require(!drawing.returnedCustody, \"Already Returned\");\n\n//         // Calculate excess custody based on remaining participants in last cohort\n//         uint256 excessCustody = (numParticipants % drawing.cohortSize) * drawing.rebateAmount;\n\n//         // Pay the contract  owner the remaining amount \n//         IERC20(drawing.erc20Token).transfer(contractOwner, excessCustody); \n        \n//         // Update storage values\n//         Drawing storage drawingStorage = Drawings[drawingID];\n//         drawingStorage.returnedCustody = true;\n\n//         //Emit the event\n//         emit DrawingCustodyRedeemed(drawingID, excessCustody); \n//     }\n\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Drawing storage drawing =Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!drawing.mintsNFTs) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Drawing storage drawing = Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n// }"
    },
    "contracts/DrawingManagerv6.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event DrawingCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 maxSlots, uint256 endTime, uint256 price, uint256 cohortSize, uint256 rebateAmount, bool mintsNFTs);\n// event DrawingCustodyRedeemed(uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingCancelled(uint256 indexed promotionID, uint256 numberOfParticipants);\n// event DrawingReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 redeemedAmount); \n// event DrawingReceiptsMinted(address indexed joiner, uint256 indexed promotionID, uint256 indexed firstParticipantNumber, uint256 firstTokenID, uint256 numTickets, uint256 orderID);\n// event RaffleWinner(uint256 indexed promotionID, uint256 cohort, uint256 tokenID, uint256 participantNumber, uint256 prize,  uint256 randomWord); \n// event RafflesInitiated(uint64[] promotionIDs, uint256 indexed vrfRequestID, address indexed initiator, uint16[] cohorts); //initiators should be reimbursed more in potential air-drops\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv11.sol\";\n\n// contract DrawingManager is VRFConsumerBaseV2, PromotionManager {\n\n//     struct Drawing {\n//         uint256 endTime;  \n//         uint256 price;  \n//         uint256 rebateAmount;    \n//         address owner;          \n//         bool returnedCustody;    \n//         bool mintsNFTs;        \n//         uint16 maxSlots;        \n//         uint16 cohortSize;      \n//         address erc20Token;      \n//     }\n\n//     struct DrawingReceipt {\n//         uint256 drawingID;\n//         uint256 redeemableAmount;\n//     }\n\n//     struct VRFRequestContext {\n//         uint64[] drawingIDArray; \n//         uint16[] cohorts;\n//         uint256[] randomWords; \n//     }\n\n//     uint256 public drawingIDs = 200;// type(uint256).max / 10 * 2 + 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n\n\n//     mapping(uint256 => DrawingReceipt) public DrawingReceipts;\n//     mapping(uint256 => Drawing) public Drawings;\n//     mapping(uint256 => VRFRequestContext) vrfRequestIDtoContext; \n//     mapping(uint256=> mapping(uint256 => bool)) raffleInitiatedBool;\n\n//     /* State Variables */\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n\n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\n//     uint32 private immutable i_callbackGasLimit;\n//     uint64 private immutable i_subscriptionId;\n//     uint256 private s_lastTimeStamp;\n//     bytes32 private immutable i_gasLane;\n\n//     constructor(\n//         address vrfCoordinatorV2,\n//         address _receiptManagerAddress,\n//         address _promotionsManagerAddress, \n//         bytes32 gasLane,\n//         uint64 subscriptionId,\n//         uint32 callbackGasLimit\n//     ) VRFConsumerBaseV2(vrfCoordinatorV2) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManagerAddress = _receiptManagerAddress;  \n//         receiptManager = IReceiptManager(_receiptManagerAddress);\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//         i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n//         i_gasLane = gasLane;\n//         i_subscriptionId = subscriptionId;\n//         i_callbackGasLimit = callbackGasLimit;\n//     }\n\n//     function createDrawing(\n//         uint16 _maxSlots,\n//         uint256 _duration,\n//         uint256 _price,\n//         uint16 _cohortSize,\n//         uint256 _rebateAmount,\n//         address _owner,\n//         address _erc20Token, \n//         bool _mintsNFTs\n//     ) public onlyApprovedOperators(_owner) {\n//         if (_cohortSize<=1 || _maxSlots % _cohortSize != 0  || _duration < MINIMUM_DURATION || _maxSlots <= 1 || _rebateAmount >= _price*_cohortSize) {\n//             revert InvalidConfig();\n//         }\n\n//         // Initialize a new drawing contract and store it in storage\n//         Drawing storage drawing = Drawings[drawingIDs];\n//         drawing.maxSlots = _maxSlots;\n//         drawing.owner = payable(_owner);\n//         drawing.endTime = block.timestamp + _duration;\n//         drawing.price = _price;\n//         drawing.cohortSize = _cohortSize;\n//         drawing.rebateAmount = _rebateAmount;\n//         drawing.erc20Token = _erc20Token; \n//         drawing.mintsNFTs = _mintsNFTs;\n\n//         emit DrawingCreated(_owner, drawingIDs, _erc20Token, _maxSlots, _duration + block.timestamp, _price, _cohortSize, _rebateAmount, _mintsNFTs); \n//         addressToPromotions[_owner].push(drawingIDs);\n//         if (_mintsNFTs) {\n//             receiptManager.setPromotionOwner(drawingIDs, _owner); \n//         }\n//         drawingIDs+=1; \n//     }\n\n//     function joinPromotion(uint256 drawingID, uint256 numOrders, uint256 orderID, address buyer) public override {\n//         Drawing memory drawing = Drawings[drawingID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         console.log(\"1\");\n//         // Check if the promotion is expired or slots are full\n//         if (numParticipants >= drawing.maxSlots ||  drawing.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if(numParticipants + numOrders > drawing.maxSlots) {\n//             numOrders = drawing.maxSlots - numParticipants;\n//         }\n//         console.log(\"2\");\n//         // Calculate amounts\n//         uint256 totalRebate = drawing.rebateAmount * numOrders;\n//         uint256 totalSellerAmount = (drawing.price - drawing.rebateAmount) * numOrders;\n//         uint256 commissionAmount = (totalSellerAmount) * commission / 10000;\n//         uint256 totalAmount = totalRebate + totalSellerAmount;\n//         console.log(totalRebate);\n//         console.log(totalSellerAmount);\n//         console.log(commissionAmount);\n//         console.log(totalAmount);\n//         console.log(\"9\");\n//         // Transfer funds\n//         IERC20(drawing.erc20Token).transferFrom(buyer, address(this), totalAmount);\n//         console.log(\"3a\");\n//         IERC20(drawing.erc20Token).transfer(promotionsManager.getReceiverAddress(drawing.owner, drawing.erc20Token), totalSellerAmount - commissionAmount);\n//         console.log(\"4\");\n//         // Update balances\n//         earnedCommissions[drawing.erc20Token] += commissionAmount;\n\n//         // Mint NFT receipts and log details\n//         uint256 initialReceiptID;\n//         if (drawing.mintsNFTs) {\n//             initialReceiptID = receiptManager.mintReceipts(\n//                 buyer,\n//                 drawingID,\n//                 numParticipants + 1,\n//                 numOrders\n//             );\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n//         console.log(\"5\");\n\n//         for (uint256 i = 0; i < numOrders; ++i) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[initialReceiptID + i];\n//             drawingReceipt.drawingID = drawingID; \n\n//             // Directly push to storage array\n//             promotionIDToReceiptIDs[drawingID].push(initialReceiptID + i);\n\n//             // Handle unminted receipt ownership\n//             if (!drawing.mintsNFTs) {\n//                 unmintedReceiptsToOwners[initialReceiptID + i] = buyer;\n//             }\n//         }\n//         console.log(\"6\");\n\n//         // Update the number of participants\n//         emit DrawingReceiptsMinted(buyer, drawingID, numParticipants +1, initialReceiptID, numOrders, orderID);\n//         console.log(\"7\");\n//     }\n\n//     function drawingEligibility(uint256 drawingID, uint256 cohort) public view returns (bool) {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if(promotionIDToReceiptIDs[drawingID].length < drawing.cohortSize*(1+cohort) || raffleInitiatedBool[drawingID][cohort] == true || promotionIDToReceiptIDs[drawingID].length == 0) {\n//             console.log(drawingID, cohort);\n//             console.log(\"Ineligible\");\n//             return false; \n//         }\n//         else {\n//             console.log(drawingID, cohort);\n//             console.log(\"eligible\");\n//             return true;\n//         } \n//     } \n\n//     function initiateDrawings(uint64[] calldata arrayOfDrawingIDs, uint16[] calldata arrayOfcohorts) public {\n//         // Check array lengths match\n//         require(arrayOfDrawingIDs.length == arrayOfcohorts.length, \"Array length mismatch\");\n//         require(arrayOfDrawingIDs.length <= 5, \"Exceed length\");\n//         require(arrayOfDrawingIDs.length > 0, \"Zero length\");\n\n//         // Pre-check eligibility for all entries\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             require(drawingEligibility(arrayOfDrawingIDs[i], arrayOfcohorts[i]), \"Ineligible entry\");\n//         }\n\n//         // Process each drawingID and cohort\n//         for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n//             raffleInitiatedBool[arrayOfDrawingIDs[i]][arrayOfcohorts[i]] = true;\n//         }\n\n//         // Convert length to uint32 for VRF call\n//         uint32 numWords = uint32(arrayOfDrawingIDs.length);\n\n//         // Request randomness\n//         uint256 requestId = i_vrfCoordinator.requestRandomWords(\n//             i_gasLane,\n//             i_subscriptionId,\n//             REQUEST_CONFIRMATIONS,\n//             i_callbackGasLimit,\n//             numWords // Number of random words to request (adjust if needed)\n//         );\n\n//         // Create storage reference to the context\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n\n//         // Manually copy arrays from calldata to storage\n//         context.drawingIDArray = arrayOfDrawingIDs; // This copies elements\n//         context.cohorts = arrayOfcohorts; // This copies elements\n        \n\n//         //emit event\n//         emit RafflesInitiated(arrayOfDrawingIDs, requestId, msg.sender, arrayOfcohorts);\n//     }\n\n//     function fulfillRandomWords(\n//         uint256 requestId, \n//         uint256[] memory randomWords\n//     ) internal override {\n//         VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n//         console.log(\"fulfilling\");\n//         // Ensure we have enough random words\n//         require(\n//             randomWords.length == context.drawingIDArray.length, \n//             \"Random words length mismatch\"\n//         );\n//         console.log(context.drawingIDArray.length); \n        \n//         // Process each drawing/cohort combination\n//         for (uint i = 0; i < context.drawingIDArray.length; i++) {\n//             uint256 drawingID = context.drawingIDArray[i];\n//             uint256 cohort = context.cohorts[i];\n//             uint256 randomWord = randomWords[i];\n//             console.log(\"a\");\n            \n//             uint256 cohortSize = Drawings[drawingID].cohortSize;\n            \n//             // Calculate winner position\n//             uint256 winnerIndex = (cohort * cohortSize) + (randomWord % cohortSize);\n//             uint256 winningReceiptID = promotionIDToReceiptIDs[drawingID][winnerIndex];\n//             uint256 winningAmount = Drawings[drawingID].rebateAmount * cohortSize;\n            \n            \n//             // Update receipt\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[winningReceiptID];\n//             drawingReceipt.redeemableAmount = winningAmount;\n//             console.log(winningReceiptID);\n//             console.log(winningAmount);\n//             console.log(drawingReceipt.redeemableAmount);\n            \n//             // Emit event for this winner\n//             emit RaffleWinner(\n//                 drawingID,\n//                 cohort,\n//                 winningReceiptID,\n//                 winnerIndex + 1,\n//                 winningAmount,\n//                 randomWord\n//             );\n//         }\n//         console.log(\"b\");\n        \n//         // Optional: Clean up storage to save gas\n//         delete vrfRequestIDtoContext[requestId];\n//     }\n\n\n//     function redeemDrawingReceipts(uint256[] calldata receiptIDs) external {\n//         uint256 redeemableAmount; \n//         address erc20Token = Drawings[DrawingReceipts[receiptIDs[0]].drawingID].erc20Token; //erc20 address of the first token\n//         for(uint256 i =0; i < receiptIDs.length; i++) {\n//             DrawingReceipt memory drawingReceipt = DrawingReceipts[receiptIDs[i]];\n//             Drawing storage drawing = Drawings[drawingReceipt.drawingID];\n//             require(erc20Token == drawing.erc20Token, \"Invalid\"); \n//             if(drawing.mintsNFTs) {\n//                 require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \"Not owned\");\n//             }\n//             else {\n//                 require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \"Not owned\");\n//             }            \n//             if(drawingReceipt.redeemableAmount >0) {\n//                 redeemableAmount += drawingReceipt.redeemableAmount;\n//                 DrawingReceipts[receiptIDs[i]].redeemableAmount = 0; \n//                 emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.redeemableAmount); \n//             }\n//         }\n//         if(redeemableAmount !=0) {\n//             IERC20(erc20Token).transfer(\n//                 msg.sender,\n//                 redeemableAmount\n//             );\n//         }\n//     }\n\n\n//     function cancelDrawing(uint256 drawingID) external {\n//         Drawing storage drawing = Drawings[drawingID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length; \n//         if (drawing.endTime > block.timestamp && numParticipants < drawing.maxSlots) {\n//             uint256 numBuyersToCompensate = numParticipants % drawing.cohortSize;\n//             // Ensure we are compensating the last `numBuyersToCompensate` participants\n//             uint256 startIndex = numParticipants - numBuyersToCompensate; // Start index for the last `numBuyersToCompensate`\n//             uint256 endIndex = numParticipants - 1; // End index for the last participant\n\n//             // Create a new array to hold the slice\n//             uint256[] memory receiptsToCompensate = new uint256[](numBuyersToCompensate);\n\n//             // Copy the elements from the original array to the new array\n//             for (uint256 i = startIndex; i <= endIndex; i++) {\n//                 receiptsToCompensate[i - startIndex] = promotionIDToReceiptIDs[drawingID][i];\n//             }\n\n//             // Pass the array to the rebate function\n//             rebateDrawingReceipts(receiptsToCompensate, drawing.rebateAmount);\n//             emit DrawingCancelled(drawingID, numBuyersToCompensate);\n//             drawing.maxSlots = uint16(numParticipants); \n//             drawing.returnedCustody = true; \n//         }\n//     }\n\n//     function rebateDrawingReceipts(\n//         uint256[] memory tokenIds,\n//         uint256 rebateAmount\n//     ) internal {\n//         for (uint256 i = 0; i < tokenIds.length; i++) {\n//             DrawingReceipt storage drawingReceipt = DrawingReceipts[\n//                 tokenIds[i]\n//             ];\n//             drawingReceipt.redeemableAmount = rebateAmount;\n//         }\n//     }\n\n//     function retrieveExcessDrawingCustody(uint256 drawingID) public {\n//         Drawing memory drawing = Drawings[drawingID];\n\n//         uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n//         // Check eligibility and if the custody has already been returned\n//         require(block.timestamp > drawing.endTime || drawing.maxSlots == numParticipants, \"Ineligible\");\n//         require(!drawing.returnedCustody, \"Already Returned\");\n\n//         // Calculate excess custody based on remaining participants in last cohort\n//         uint256 excessCustody = (numParticipants % drawing.cohortSize) * drawing.rebateAmount;\n\n//         // Pay the contract  owner the remaining amount \n//         IERC20(drawing.erc20Token).transfer(contractOwner, excessCustody); \n        \n//         // Update storage values\n//         Drawing storage drawingStorage = Drawings[drawingID];\n//         drawingStorage.returnedCustody = true;\n\n//         earnedCommissions[drawing.erc20Token] += excessCustody;\n\n//         //Emit the event\n//         emit DrawingCustodyRedeemed(drawingID, excessCustody); \n//     }\n\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Drawing storage drawing =Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!drawing.mintsNFTs) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Drawing storage drawing = Drawings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, drawing.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n// }"
    },
    "contracts/ISOManager.sol": {
      "content": "// //SPDX-License-Identifier: UNLICENSED\n// pragma solidity ^0.8.0;\n\n// import \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n// import \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\n// import \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n// import \"@openzeppelin/contracts/utils/Base64.sol\";\n// import \"@openzeppelin/contracts/utils/Strings.sol\";\n// import \"hardhat/console.sol\";\n// import {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"../interfaces/IPromotionManager.sol\";\n// import \"../interfaces/IPromotionsManager.sol\";\n\n// error TokenDoesNotExist();\n// error NotApproved();\n\n// contract ISOManager is ERC721, IERC2981 {\n//     address public contractOwner;\n//     using Strings for uint256;\n//     struct ISO {\n//         uint256 numTokens;\n//         uint256 revShare;\n//         uint256 price;\n//         uint256 minted;\n//         mapping(address => uint256) redeemableAmounts;\n//         //address store;\n//         address erc20Token;\n//     }\n//     struct ShareContext {\n//         address store;\n//         uint256 shareNumber;\n//         mapping(address => uint256) redeemedAmounts;\n//     }\n\n//     mapping(address => ISO) public ISOs;\n//     mapping(address => uint256[]) public addressToTokenIDs;\n//     mapping(uint256 => ShareContext) public ShareContexts;\n//     uint256 tokenIDs;\n//     bool openISOs = false;\n//     IPromotionsManager public promotionsManager;\n//     address public promotionsManagerAddress;\n\n//     //Modifier to restrict usage to the contract owner\n//     modifier onlyOwner() {\n//         require(msg.sender == contractOwner, \"Not Authorized\");\n//         _;\n//     }\n\n//     //Modifier to allow ISOs\n//     modifier allowedISOs() {\n//         require(openISOs == true, \"ISOs not allowed\");\n//         _;\n//     }\n\n//     modifier onlyApprovedOperators(address parentAccount) {\n//         require(\n//             promotionsManager.isApprovedOperator(msg.sender, parentAccount),\n//             \"Not Approved\"\n//         );\n//         _;\n//     }\n\n//     // Constructor to set the name and symbol of the ERC-721 token\n//     constructor() ERC721(\"ISOTokens\", \"ISO\") {\n//         contractOwner = msg.sender;\n//     }\n\n//     function setOwner(address payable newOwner) external onlyOwner {\n//         contractOwner = payable(newOwner);\n//     }\n\n//     function allowISOs() public onlyOwner {\n//         openISOs = true;\n//     }\n\n//     function createISO(\n//         uint256 _numTokens,\n//         uint256 _revShare,\n//         uint256 _price,\n//         address _erc20Token\n//     ) public allowedISOs {\n//         require(ISOs[msg.sender].numTokens == 0, \"already ISO\");\n//         require(_numTokens > 0 && _numTokens * _revShare <= 10000);\n\n//         // Initialize a new drawing contract and store it in storage\n//         ISO storage iso = ISOs[msg.sender];\n//         iso.numTokens = _numTokens;\n//         iso.revShare = _revShare;\n//         iso.price = _price;\n//         iso.erc20Token = _erc20Token;\n//     }\n\n//     function buyISO(address store, uint256 numShares) public allowedISOs {\n//         ISO storage iso = ISOs[store];\n//         require(iso.numTokens > 0, \"ISO doesn't exist\"); // Check ISO exists\n//         require(numShares > 0, \"Cannot buy 0 shares\");\n//         if (iso.minted + numShares > iso.numTokens) {\n//             numShares = iso.numTokens - iso.minted;\n//         }\n\n//         // Calculate total price with overflow check\n//         uint256 totalPrice = numShares * iso.price;\n//         require(totalPrice / iso.price == numShares, \"Overflow detected\");\n\n//         // Transfer payment\n//         IERC20(iso.erc20Token).transferFrom(msg.sender, store, totalPrice);\n\n//         // Mint tokens and set context\n//         uint256 startTokenId = tokenIDs;\n//         for (uint256 i = 0; i < numShares; i++) {\n//             uint256 tokenId = startTokenId + i;\n//             _mint(msg.sender, tokenId);\n//             addressToTokenIDs[store].push(tokenId);\n//             ShareContexts[tokenId].shareNumber = addressToTokenIDs[store]\n//                 .length;\n//             ShareContexts[tokenId].store = store;\n//         }\n\n//         // Update state\n//         tokenIDs += numShares;\n//         iso.minted += numShares; // Track minted tokens\n//     }\n\n//     function payStore(\n//         address store,\n//         uint256 toStore,\n//         uint256 commission,\n//         address erc20Token,\n//         address payor\n//     ) public {\n//         if (ISOs[store].numTokens == 0 || !openISOs) {\n//             //no active ISO liabilities\n//             IERC20(erc20Token).transferFrom(payor, store, toStore);\n//             IERC20(erc20Token).transferFrom(payor, address(this), commission);\n//         } else {\n//             //Separate amounts for storefronts and store shareholders + commissions\n//             uint256 redeemable = (toStore * ISOs[store].revShare) / 10000;\n//             uint256 toOwner = toStore - redeemable * ISOs[store].numTokens;\n//             IERC20(erc20Token).transferFrom(payor, store, toOwner);\n//             IERC20(erc20Token).transferFrom(\n//                 payor,\n//                 address(this),\n//                 redeemable * ISOs[store].numTokens + commission\n//             );\n//             ISOs[store].redeemableAmounts[erc20Token] += redeemable;\n//         }\n//     }\n\n//     function redeemDividends(\n//         uint256[] calldata tokenIDArray, // Array of token IDs\n//         address[] calldata erc20Tokens // Array of ERC20 tokens\n//     ) public {\n//         for (uint256 j = 0; j < tokenIDArray.length; j++) {\n//             uint256 tokenID = tokenIDArray[j];\n\n//             // Validate token ownership\n//             require(ownerOf(tokenID) == msg.sender, \"Not owner of token\");\n\n//             ShareContext storage shareContext = ShareContexts[tokenID];\n//             ISO storage iso = ISOs[shareContext.store];\n\n//             // Process each ERC20 token for dividends\n//             for (uint256 i = 0; i < erc20Tokens.length; i++) {\n//                 address tokenAddress = erc20Tokens[i];\n\n//                 // Calculate redeemable amount\n//                 uint256 redeemable = iso.redeemableAmounts[tokenAddress] -\n//                     shareContext.redeemedAmounts[tokenAddress];\n\n//                 if (redeemable > 0) {\n//                     // Transfer dividends\n//                     IERC20(tokenAddress).transfer(msg.sender, redeemable);\n\n//                     // Update redemption tracking\n//                     shareContext.redeemedAmounts[tokenAddress] = iso\n//                         .redeemableAmounts[tokenAddress];\n//                 }\n//             }\n//         }\n//     }\n\n//     string public defaultURIRoot = \"amazon.com/\";\n//     // Mappings to store receipts by token ID\n//     mapping(address => string) public customURIRoot;\n//     mapping(address => address) public royaltyReceiver;\n//     mapping(address => uint16) public royaltyBasisPoints;\n\n//     function setCustomURIRoot(string calldata newRoot, address store) public {\n//         if (!promotionsManager.isApprovedOperator(msg.sender, store)) {\n//             revert NotApproved();\n//         }\n//         require(bytes(customURIRoot[store]).length == 0, \"Aready Set\");\n//         customURIRoot[store] = newRoot;\n//     }\n\n//     function tokenURI(\n//         uint256 tokenID\n//     ) public view override returns (string memory) {\n//         ShareContext storage shareContext = ShareContexts[tokenID];\n\n//         // Check if the tokenID is valid\n//         if (shareContext.store == address(0)) {\n//             revert TokenDoesNotExist();\n//         }\n\n//         // Retrieve the custom URI root for the promotion\n//         string memory uriRoot = customURIRoot[shareContext.store];\n\n//         // If no custom URI is set, use the default URI\n//         if (bytes(uriRoot).length == 0) {\n//             //return string(abi.encodePacked(defaultURIRoot, \"/\", uint2str(tokenID), \".json\"));\n//             return\n//                 string(\n//                     abi.encodePacked(\n//                         defaultURIRoot,\n//                         \"/\",\n//                         uint2str(shareContext.shareNumber),\n//                         \".json\"\n//                     )\n//                 );\n//         } else {\n//             // Construct the custom URI using participantNumber\n//             return\n//                 string(\n//                     abi.encodePacked(\n//                         uriRoot,\n//                         \"/\",\n//                         uint2str(shareContext.shareNumber),\n//                         \".json\"\n//                     )\n//                 );\n//         }\n//     }\n\n//     function supportsInterface(\n//         bytes4 interfaceId\n//     ) public view override(ERC721, IERC165) returns (bool) {\n//         return super.supportsInterface(interfaceId);\n//     }\n\n//     function setRoyalty(uint16 basisPoints, address store) external {\n//         if (!promotionsManager.isApprovedOperator(msg.sender, store)) {\n//             revert NotApproved();\n//         }\n//         require(basisPoints <= 10000, \"Invalid\"); //royalty over 100%\n//         royaltyBasisPoints[store] = basisPoints;\n//     }\n\n//     function royaltyInfo(\n//         uint256 tokenID,\n//         uint256 salePrice\n//     ) external view override returns (address receiver, uint256 royaltyAmount) {\n//         ShareContext storage shareContext = ShareContexts[tokenID];\n//         royaltyAmount =\n//             (salePrice * royaltyBasisPoints[shareContext.store]) /\n//             10000;\n//         return (shareContext.store, royaltyAmount);\n//     }\n\n//     // Convert uint256 to string\n//     function uint2str(uint256 _i) internal pure returns (string memory) {\n//         if (_i == 0) {\n//             return \"0\";\n//         }\n//         uint256 j = _i;\n//         uint256 len;\n//         while (j != 0) {\n//             len++;\n//             j /= 10;\n//         }\n//         bytes memory bstr = new bytes(len);\n//         while (_i != 0) {\n//             bstr[--len] = bytes1(uint8(48 + (_i % 10)));\n//             _i /= 10;\n//         }\n//         return string(bstr);\n//     }\n\n//     function setPromotionsManager(\n//         address _promotionsManagerAddress\n//     ) external onlyOwner {\n//         promotionsManagerAddress = _promotionsManagerAddress;\n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n// }\n"
    },
    "contracts/PlainSale.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event ListingCreated(address indexed owner, uint256 indexed ID, address indexed erc20Token, uint256 inventory, uint256 endTime, bool mintsNFTS);\n// event SnowballCustodyRedeemed(uint256 indexed snowballID, uint256 redeemedAmount); \n// event ListingCancelled(uint256 indexed promotionID);\n// event PlainSaleReceiptsMinted(address indexed buyer, uint256 indexed promotionID, uint256 firstParticipantNumber, uint256 firstTokenID, uint256 numOrders);\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv11.sol\";\n\n// contract PlainSaleManager is PromotionManager {\n//     struct Listing {\n//         uint256 inventory; \n//         uint256 endTime;\n//         address owner; \n//         uint256 price; \n//         address erc20Token; \n//         bool mintReceipts; \n//     }\n    \n//     uint256 public plainSaleID = 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n//     mapping(uint256 => Listing) public Listings;\n//     mapping(uint256 => uint256) public receiptIDtoListingID; \n    \n    \n\n//     constructor(address _receiptManagerAddress, address _promotionsManagerAddress) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManager = IReceiptManager(_receiptManagerAddress); \n//         receiptManagerAddress = _receiptManagerAddress;\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function createListing(\n//         uint256 _inventory,\n//         uint256 _duration,\n//         address _owner,\n//         address _erc20Token,\n//         uint256 _price, \n//         bool _mintReceipts\n//     ) public {\n//         if (_duration < MINIMUM_DURATION ) {\n//             revert InvalidConfig(); \n//         }\n//         if (!promotionsManager.isApprovedOperator(msg.sender, _owner)) {\n//             revert NotApproved(); \n//         }\n\n//         // Initialize a new snowball contract and store it in storage\n//         Listing storage listing = Listings[plainSaleID];\n//         listing.inventory = _inventory;\n//         listing.price = _price;\n//         listing.owner = payable(_owner);\n//         listing.endTime = block.timestamp +_duration;\n//         listing.erc20Token = _erc20Token;\n//         listing.mintReceipts = _mintReceipts;  \n\n//         emit ListingCreated(_owner, plainSaleID, _erc20Token, _inventory, _duration + block.timestamp, _mintReceipts);\n//         addressToPromotions[_owner].push(plainSaleID);\n//         if (_mintReceipts) {\n//             receiptManager.setPromotionOwner(plainSaleID, _owner); \n//         }\n//         plainSaleID += 1; \n//     }\n\n//     function joinPromotion(uint256 promotionID, uint256 numOrders, uint256 orderID, address buyer) public override {\n//         Listing storage listing = Listings[promotionID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[promotionID].length;\n//         address erc20Token = listing.erc20Token;\n\n//         if (listing.inventory == 0 ||  listing.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if (numOrders > listing.inventory) {\n//             numOrders = listing.inventory; \n//         }\n//         listing.inventory -= numOrders; \n\n//         // Calculate commission\n//         uint256 commissionAmount = (numOrders * listing.price) * commission / 10000;\n\n//         // Update commissions and pay the owner\n//         earnedCommissions[erc20Token] += commissionAmount;\n//         IERC20(erc20Token).transferFrom(buyer, listing.owner, (numOrders * listing.price) - commissionAmount);\n//         IERC20(erc20Token).transferFrom(buyer, address(this), commissionAmount);\n\n//         uint256 initialReceiptID;\n//         bool mintingReceipts = listing.mintReceipts; // Cache to memory for gas efficiency\n\n//         if (mintingReceipts) {\n//             initialReceiptID = receiptManager.mintReceipts(buyer, promotionID, numParticipants + 1, numOrders);\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n\n//         // Process all receipt IDs in a single loop\n//         for (uint256 i = 0; i < numOrders; i++) {\n//             uint256 currentReceiptID = initialReceiptID + i;\n            \n//             // Common operations for both branches\n//             receiptIDtoListingID[currentReceiptID] = promotionID;\n//             promotionIDToReceiptIDs[promotionID].push(currentReceiptID);\n            \n//             // Branch-specific operation\n//             if (!mintingReceipts) {\n//                 unmintedReceiptsToOwners[currentReceiptID] = buyer;\n//             }\n//         }\n//         emit PlainSaleReceiptsMinted(\n//             buyer, \n//             promotionID, \n//             numParticipants + 1, \n//             initialReceiptID, \n//             numOrders\n//         );\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Listing storage listing = Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Listing storage listing = Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!listing.mintReceipts) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     function updateInventory(uint256 promotionID, uint256 newInventory) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0 && newInventory > listing.inventory) {\n//             listing.inventory = newInventory; \n//         }\n//     }\n\n//     function updatePrice(uint256 promotionID, uint256 newPrice) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0) {\n//             listing.price = newPrice; \n//         }\n//     }\n\n//     function updateEndTime(uint256 promotionID, uint256 newEndTime) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0 && newEndTime > block.timestamp) {\n//             listing.endTime = newEndTime; \n//         }\n//     }\n\n//     //set the end time to zero to indiciate the listing is cancelled\n//     function cancelListing(uint256 promotionID) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         listing.endTime = 0; \n//         emit ListingCancelled(promotionID);\n//     }\n// }"
    },
    "contracts/PlainSale(1).sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event ListingCreated(address indexed owner, uint256 indexed ID, address indexed erc20Token, uint256 inventory, uint256 endTime, bool mintsNFTS);\n// event SnowballCustodyRedeemed(uint256 indexed snowballID, uint256 redeemedAmount); \n// event ListingCancelled(uint256 indexed promotionID);\n// event PlainSaleReceiptsMinted(address indexed buyer, uint256 indexed promotionID, uint256 firstParticipantNumber, uint256 firstTokenID, uint256 numOrders);\n\n\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv11.sol\";\n\n// contract PlainSaleManager is PromotionManager {\n//     struct Listing {\n//         uint256 inventory; \n//         uint256 endTime;\n//         address owner; \n//         uint256 price; \n//         address erc20Token; \n//         bool mintReceipts; \n//     }\n    \n//     uint256 public plainSaleID = 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n//     mapping(uint256 => Listing) public Listings;\n//     mapping(uint256 => uint256) public receiptIDtoListingID; \n    \n    \n\n//     constructor(address _receiptManagerAddress, address _promotionsManagerAddress) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManager = IReceiptManager(_receiptManagerAddress); \n//         receiptManagerAddress = _receiptManagerAddress;\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function createListing(\n//         uint256 _inventory,\n//         uint256 _duration,\n//         address _owner,\n//         address _erc20Token,\n//         uint256 _price, \n//         bool _mintReceipts\n//     ) public {\n//         if (_duration < MINIMUM_DURATION ) {\n//             revert InvalidConfig(); \n//         }\n//         if (!promotionsManager.isApprovedOperator(msg.sender, _owner)) {\n//             revert NotApproved(); \n//         }\n\n//         // Initialize a new snowball contract and store it in storage\n//         Listing storage listing = Listings[plainSaleID];\n//         listing.inventory = _inventory;\n//         listing.price = _price;\n//         listing.owner = payable(_owner);\n//         listing.endTime = block.timestamp +_duration;\n//         listing.erc20Token = _erc20Token;\n//         listing.mintReceipts = _mintReceipts;  \n\n//         emit ListingCreated(_owner, plainSaleID, _erc20Token, _inventory, _duration + block.timestamp, _mintReceipts);\n//         addressToPromotions[_owner].push(plainSaleID);\n//         if (_mintReceipts) {\n//             receiptManager.setPromotionOwner(plainSaleID, _owner); \n//         }\n//         plainSaleID += 1; \n//     }\n\n//     function joinPromotion(uint256 promotionID, uint256 numOrders, uint256 orderID, address buyer) public override {\n//         Listing storage listing = Listings[promotionID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[promotionID].length;\n//         address erc20Token = listing.erc20Token;\n\n//         if (listing.inventory == 0 ||  listing.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if (numOrders > listing.inventory) {\n//             numOrders = listing.inventory; \n//         }\n//         listing.inventory -= numOrders; \n\n//         // Calculate commission\n//         uint256 commissionAmount = (numOrders * listing.price) * commission / 10000;\n\n//         // Update commissions and pay the owner\n//         earnedCommissions[erc20Token] += commissionAmount;\n//         IERC20(erc20Token).transferFrom(buyer, listing.owner, (numOrders * listing.price) - commissionAmount);\n//         IERC20(erc20Token).transferFrom(buyer, address(this), commissionAmount);\n\n//         uint256 initialReceiptID;\n//         bool mintingReceipts = listing.mintReceipts; // Cache to memory for gas efficiency\n\n//         if (mintingReceipts) {\n//             initialReceiptID = receiptManager.mintReceipts(buyer, promotionID, numParticipants + 1, numOrders);\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n\n//         // Process all receipt IDs in a single loop\n//         for (uint256 i = 0; i < numOrders; i++) {\n//             uint256 currentReceiptID = initialReceiptID + i;\n            \n//             // Common operations for both branches\n//             receiptIDtoListingID[currentReceiptID] = promotionID;\n//             promotionIDToReceiptIDs[promotionID].push(currentReceiptID);\n            \n//             // Branch-specific operation\n//             if (!mintingReceipts) {\n//                 unmintedReceiptsToOwners[currentReceiptID] = buyer;\n//             }\n//         }\n//         emit PlainSaleReceiptsMinted(\n//             buyer, \n//             promotionID, \n//             numParticipants + 1, \n//             initialReceiptID, \n//             numOrders\n//         );\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Listing storage listing = Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Listing storage listing = Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!listing.mintReceipts) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     function updateInventory(uint256 promotionID, uint256 newInventory) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0 && newInventory > listing.inventory) {\n//             listing.inventory = newInventory; \n//         }\n//     }\n\n//     function updatePrice(uint256 promotionID, uint256 newPrice) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0) {\n//             listing.price = newPrice; \n//         }\n//     }\n\n//     function updateEndTime(uint256 promotionID, uint256 newEndTime) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(listing.endTime != 0 && newEndTime > block.timestamp) {\n//             listing.endTime = newEndTime; \n//         }\n//     }\n\n//     //set the end time to zero to indiciate the listing is cancelled\n//     function cancelListing(uint256 promotionID) public {\n//         Listing storage listing =Listings[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, listing.owner)) {\n//             revert NotApproved(); \n//         }\n//         listing.endTime = 0; \n//         emit ListingCancelled(promotionID);\n//     }\n// }"
    },
    "contracts/PromotionManagerv10.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error NotCustomURI();\n// error URIAlreadSet();\n\n// import \"../interfaces/IReceiptManager.sol\";\n// import \"../interfaces/IPromotionsManager.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// abstract contract PromotionManager {\n//     uint256 public commission = 200; // basis points (divided by 10,000)\n//     address public contractOwner;\n//     address public receiptManagerAddress;\n//     address public promotionsManagerAddress;\n//     mapping(address => uint256) public earnedCommissions;\n//     mapping(address => uint256) public withdrawnCommissions;\n//     mapping(address => mapping(address => bool)) public approvedOperators;\n//     mapping(address => address[]) public arrayOfApprovedOperators;\n//     mapping(address => uint256[]) public addressToPromotions;\n//     mapping(uint256 => address) public unmintedReceiptsToOwners;\n//     mapping(uint256 => uint256[]) public promotionIDToReceiptIDs;\n//     mapping(uint256 => uint256) public receiptIDToPromotionID;\n//     IReceiptManager public receiptManager;\n//     IPromotionsManager public promotionsManager;\n\n//     modifier onlyOwner() {\n//         require(msg.sender == contractOwner, \"NotOwner\");\n//         _;\n//     }\n\n//     modifier onlyReceiptManager() {\n//         require(msg.sender == receiptManagerAddress, \"NotOwner\");\n//         _;\n//     }\n\n//     modifier onlyApprovedOperators(address parentAccount) {\n//         require(\n//             promotionsManager.isApprovedOperator(msg.sender, parentAccount),\n//             \"Not Approved\"\n//         );\n//         _;\n//     }\n\n//     // function getReceiptInfo(uint256 receiptID) public view virtual returns(uint256 promotionID, uint256 participantNumber);\n//     function setPromotionURI(\n//         uint256 promotionID,\n//         string calldata newURIRoot\n//     ) external virtual;\n\n//     function setRoyalty(\n//         uint256 promotionID,\n//         uint256 royaltyBPs\n//     ) external virtual;\n\n//     function getPromotionReceipts(\n//         uint256 promotionID\n//     ) public view returns (uint256[] memory) {\n//         uint256[] memory receipts = promotionIDToReceiptIDs[promotionID];\n//         return (receipts);\n//     }\n\n//     function getNumberOfParticipants(\n//         uint256 promotionID\n//     ) public view returns (uint256) {\n//         return promotionIDToReceiptIDs[promotionID].length;\n//     }\n\n//     function getPromotionsByOwner(\n//         address promotionOwner\n//     ) public view returns (uint256[] memory) {\n//         return addressToPromotions[promotionOwner];\n//     }\n\n//     function setOwner(address payable newOwner) external onlyOwner {\n//         contractOwner = payable(newOwner);\n//     }\n\n//     function setReceiptManager(\n//         address _receiptManagerAddress\n//     ) external onlyOwner {\n//         receiptManagerAddress = _receiptManagerAddress;\n//         receiptManager = IReceiptManager(_receiptManagerAddress);\n//     }\n\n//     function setPromotionsManager(\n//         address _promotionsManagerAddress\n//     ) external onlyOwner {\n//         promotionsManagerAddress = _promotionsManagerAddress;\n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function withdrawCommissions(address erc20Token) external onlyOwner {\n//         IERC20(erc20Token).transfer(\n//             contractOwner,\n//             earnedCommissions[erc20Token] - withdrawnCommissions[erc20Token]\n//         );\n//         withdrawnCommissions[erc20Token] = earnedCommissions[erc20Token];\n//     }\n\n//     function setCommission(uint256 newCommissionBPs) external onlyOwner {\n//         require(newCommissionBPs <= 10000, \"Inv\");\n//         commission = newCommissionBPs;\n//     }\n// }\n"
    },
    "contracts/PromotionManagerv9.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error NotCustomURI();\n// error URIAlreadSet();\n\n// import \"../interfaces/IReceiptManager.sol\";\n// import \"../interfaces/IPromotionsManager.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// abstract contract PromotionManager {\n//     uint256 public commission = 200; // basis points (divided by 10,000)\n//     address public contractOwner;\n//     address public receiptManagerAddress;\n//     address public promotionsManagerAddress;\n//     mapping(address => uint256) public earnedCommissions;\n//     mapping(address => uint256) public withdrawnCommissions;\n//     mapping(address => mapping(address => bool)) public approvedOperators;\n//     mapping(address => address[]) public arrayOfApprovedOperators;\n//     mapping(address => uint256[]) public addressToPromotions;\n//     mapping(uint256 => address) public unmintedReceiptsToOwners;\n//     mapping(uint256 => uint256[]) public promotionIDToReceiptIDs;\n//     mapping(uint256 => uint256) public receiptIDToPromotionID;\n//     IReceiptManager public receiptManager;\n//     IPromotionsManager public promotionsManager;\n\n//     modifier onlyOwner() {\n//         require(msg.sender == contractOwner, \"NotOwner\");\n//         _;\n//     }\n\n//     modifier onlyReceiptManager() {\n//         require(msg.sender == receiptManagerAddress, \"NotOwner\");\n//         _;\n//     }\n\n//     modifier onlyApprovedOperators(address parentAccount) {\n//         require(\n//             promotionsManager.isApprovedOperator(msg.sender, parentAccount),\n//             \"Not Approved\"\n//         );\n//         _;\n//     }\n\n//     // function getReceiptInfo(uint256 receiptID) public view virtual returns(uint256 promotionID, uint256 participantNumber);\n//     function setPromotionURI(\n//         uint256 promotionID,\n//         string calldata newURIRoot\n//     ) external virtual;\n\n//     function setRoyalty(\n//         uint256 promotionID,\n//         uint256 royaltyBPs\n//     ) external virtual;\n\n//     function getPromotionReceipts(\n//         uint256 promotionID\n//     ) public view returns (uint256[] memory) {\n//         uint256[] memory receipts = promotionIDToReceiptIDs[promotionID];\n//         return (receipts);\n//     }\n\n//     function getNumberOfParticipants(\n//         uint256 promotionID\n//     ) public view returns (uint256) {\n//         return promotionIDToReceiptIDs[promotionID].length;\n//     }\n\n//     function getPromotionsByOwner(\n//         address promotionOwner\n//     ) public view returns (uint256[] memory) {\n//         return addressToPromotions[promotionOwner];\n//     }\n\n//     function setOwner(address payable newOwner) external onlyOwner {\n//         contractOwner = payable(newOwner);\n//     }\n\n//     function setReceiptManager(\n//         address _receiptManagerAddress\n//     ) external onlyOwner {\n//         receiptManagerAddress = _receiptManagerAddress;\n//         receiptManager = IReceiptManager(_receiptManagerAddress);\n//     }\n\n//     function setPromotionsManager(\n//         address _promotionsManagerAddress\n//     ) external onlyOwner {\n//         promotionsManagerAddress = _promotionsManagerAddress;\n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function withdrawCommissions(address erc20Token) external onlyOwner {\n//         IERC20(erc20Token).transfer(\n//             contractOwner,\n//             earnedCommissions[erc20Token] - withdrawnCommissions[erc20Token]\n//         );\n//         withdrawnCommissions[erc20Token] = earnedCommissions[erc20Token];\n//     }\n\n//     function setCommission(uint256 newCommissionBPs) external onlyOwner {\n//         require(newCommissionBPs <= 10000, \"Inv\");\n//         commission = newCommissionBPs;\n//     }\n// }\n"
    },
    "contracts/PromotionsManager.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// event OperatorApproved(address indexed parentAccount, address indexed approvedOperator);\n// event OperatorRemoved(address indexed parentAccount, address indexed removedOperator);\n// event AdministratorApproved(address indexed parentAccount, address indexed approvedAdministrator);\n// event AdministratorRemoved(address indexed parentAccount, address indexed removedAdministrator);\n// error NotCustomURI();\n// error URIAlreadSet();\n\n\n// contract PromotionsManager {\n//     mapping(address => mapping(address => bool)) public  approvedOperators;\n//     mapping(address => address[]) public  arrayOfApprovedOperators;\n//     mapping(address => mapping(address => bool)) public  approvedAdministrators;\n//     mapping(address => address[]) public  arrayOfApprovedAdministrators;\n//     mapping(address => mapping(address => address)) public receiverAccounts;   \n\n//     function approveOperator(address approvedOperator, address parentAccount) public {\n//         require(approvedOperator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedOperators[parentAccount][approvedOperator],\n//             \"Operator already approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][approvedOperator] = true;\n//         arrayOfApprovedOperators[parentAccount].push(approvedOperator);\n\n//         emit OperatorApproved(parentAccount, approvedOperator);\n//     }\n\n//     function removeOperator(address toRemove, address parentAccount) public {\n//         require(\n//             approvedOperators[parentAccount][toRemove],\n//             \"Operator not approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedOperators[parentAccount];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit OperatorRemoved(parentAccount, toRemove);\n//     }\n\n//     function approveAdministrator(address approvedAdministrator, bool addOperator) public {\n//         require(approvedAdministrator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedAdministrators[msg.sender][approvedAdministrator],\n//             \"Admin already approved.\"\n//         );\n\n//         approvedAdministrators[msg.sender][approvedAdministrator] = true;\n//         arrayOfApprovedAdministrators[msg.sender].push(approvedAdministrator);\n\n//         emit AdministratorApproved(msg.sender, approvedAdministrator);\n//         if (addOperator) {\n//             approveOperator(approvedAdministrator, msg.sender);\n//         }\n//     }\n\n//     function removeAdministrator(address toRemove, bool removeAsOperator) public {\n//         require(\n//             approvedAdministrators[msg.sender][toRemove],\n//             \"Administrator not approved.\"\n//         );\n//         approvedAdministrators[msg.sender][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedAdministrators[msg.sender];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit AdministratorRemoved(msg.sender, toRemove);\n//         if (removeAsOperator && approvedOperators[msg.sender][toRemove]) {\n//             removeOperator(toRemove, msg.sender);\n//         }\n//     }\n\n//     function isApprovedOperator(address operator, address parentAccount) public view returns(bool) {\n//         return (approvedOperators[parentAccount][operator] || operator == parentAccount); \n//     }\n\n//     function getApprovedOperators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedOperators[masterAccount];\n//     }\n\n//     function getApprovedAdministrators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedAdministrators[masterAccount];\n//     }\n\n//     function updateReceiverAddress(address tokenAddress, address receiverAddress) public {\n//         receiverAccounts[msg.sender][tokenAddress] = receiverAddress; \n//     }\n\n//     function getReceiverAddress(address userAddress, address tokenAddress) public view returns (address) {\n//         address receiver = receiverAccounts[userAddress][tokenAddress];\n//         if (receiver == address(0)) {\n//             return userAddress;\n//         } else {\n//             return receiver;\n//         }\n//     }\n// }"
    },
    "contracts/PromotionsManagerv3.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// event OperatorApproved(address indexed parentAccount, address indexed approvedOperator);\n// event OperatorRemoved(address indexed parentAccount, address indexed removedOperator);\n// event AdministratorApproved(address indexed parentAccount, address indexed approvedAdministrator);\n// event AdministratorRemoved(address indexed parentAccount, address indexed removedAdministrator);\n// error NotCustomURI();\n// error URIAlreadSet();\n\n// // Interface for Promotion Contracts\n// interface IPromotion {\n//     function joinPromotion(uint256 promotionID, uint256 quantity, uint256 orderID, address buyer) external;\n// }\n\n// contract PromotionsManager {\n//     address public contractOwner;\n//     mapping(address => mapping(address => bool)) public  approvedOperators;\n//     mapping(address => address[]) public  arrayOfApprovedOperators;\n//     mapping(address => mapping(address => bool)) public  approvedAdministrators;\n//     mapping(address => address[]) public  arrayOfApprovedAdministrators;\n//     mapping(address => mapping(address => address)) public receiverAccounts;   \n//     uint256[] public initialPromotionIDs; //sorted list\n//     address[] public approvedPromotions; \n    \n\n//     modifier onlyOwner() {\n//         require(msg.sender == contractOwner, \"Not Owner\");\n//         _;\n//     }\n\n//     constructor() { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//     }\n\n//     function setOwner(address newOwner) public onlyOwner {\n//         contractOwner = newOwner; \n//     }\n\n//     function approvePromotions(uint256 _initialID, address _promotionAddress) public onlyOwner {\n//         uint256[] storage initialIDs = initialPromotionIDs;\n//         address[] storage promotions = approvedPromotions;\n//         uint256 length = initialIDs.length;\n        \n//         // Check for duplicate ID\n//         for (uint256 i = 0; i < length; ) {\n//             if (initialIDs[i] == _initialID) {\n//                 revert(\"Duplicate promotion ID\");\n//             }\n//             unchecked { ++i; }\n//         }\n        \n//         // Find insertion position (maintain ascending order)\n//         uint256 insertIndex = length;\n//         for (uint256 i = 0; i < length; ) {\n//             if (initialIDs[i] > _initialID) {\n//                 insertIndex = i;\n//                 break;\n//             }\n//             unchecked { ++i; }\n//         }\n\n//         // Expand arrays with dummy values\n//         initialIDs.push(0);\n//         promotions.push(address(0));\n\n//         // Shift elements after insertion point\n//         for (uint256 i = length; i > insertIndex; ) {\n//             unchecked {\n//                 initialIDs[i] = initialIDs[i - 1];\n//                 promotions[i] = promotions[i - 1];\n//                 --i;\n//             }\n//         }\n\n//         // Insert new values\n//         initialIDs[insertIndex] = _initialID;\n//         promotions[insertIndex] = _promotionAddress;\n//     }\n\n//     function joinPromotions(uint256[] calldata promotionIDs, uint256[] calldata numOrders, uint256 orderID) public {\n//         require(promotionIDs.length == numOrders.length, \"Array length mismatch\");\n//         require(initialPromotionIDs.length > 0, \"No promotions available\");\n        \n//         // Cache arrays in memory for gas efficiency\n//         uint256[] memory initialIDs = initialPromotionIDs;\n//         address[] memory promotions = approvedPromotions;\n//         uint256 promotionsLength = initialIDs.length;\n\n//         for (uint256 i = 0; i < promotionIDs.length; ) {\n//             uint256 promotionID = promotionIDs[i];\n//             uint256 quantity = numOrders[i];\n            \n//             // Revert if ID is smaller than the first initial promotion ID\n//             if (promotionID < initialIDs[0]) {\n//                 revert(\"Invalid promotion ID\");\n//             }\n\n//             // Start from the last promotion and work backwards\n//             uint256 index = promotionsLength - 1;\n            \n//             // Find the largest initial ID <= promotionID\n//             while (index > 0 && initialIDs[index] > promotionID) {\n//                 unchecked { index--; }\n//             }\n\n//             address promotionContract = promotions[index];\n//             IPromotion(promotionContract).joinPromotion(promotionID, quantity, orderID, msg.sender);\n            \n//             unchecked { i++; }\n//         }\n//     }\n\n//     function approveOperator(address approvedOperator, address parentAccount) public {\n//         require(approvedOperator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedOperators[parentAccount][approvedOperator],\n//             \"Operator already approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][approvedOperator] = true;\n//         arrayOfApprovedOperators[parentAccount].push(approvedOperator);\n\n//         emit OperatorApproved(parentAccount, approvedOperator);\n//     }\n\n//     function removeOperator(address toRemove, address parentAccount) public {\n//         require(\n//             approvedOperators[parentAccount][toRemove],\n//             \"Operator not approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedOperators[parentAccount];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit OperatorRemoved(parentAccount, toRemove);\n//     }\n\n//     function approveAdministrator(address approvedAdministrator, bool addOperator) public {\n//         require(approvedAdministrator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedAdministrators[msg.sender][approvedAdministrator],\n//             \"Admin already approved.\"\n//         );\n\n//         approvedAdministrators[msg.sender][approvedAdministrator] = true;\n//         arrayOfApprovedAdministrators[msg.sender].push(approvedAdministrator);\n\n//         emit AdministratorApproved(msg.sender, approvedAdministrator);\n//         if (addOperator) {\n//             approveOperator(approvedAdministrator, msg.sender);\n//         }\n//     }\n\n//     function removeAdministrator(address toRemove, bool removeAsOperator) public {\n//         require(\n//             approvedAdministrators[msg.sender][toRemove],\n//             \"Administrator not approved.\"\n//         );\n//         approvedAdministrators[msg.sender][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedAdministrators[msg.sender];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit AdministratorRemoved(msg.sender, toRemove);\n//         if (removeAsOperator && approvedOperators[msg.sender][toRemove]) {\n//             removeOperator(toRemove, msg.sender);\n//         }\n//     }\n\n//     function isApprovedOperator(address operator, address parentAccount) public view returns(bool) {\n//         return (approvedOperators[parentAccount][operator] || operator == parentAccount); \n//     }\n\n//     function getApprovedOperators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedOperators[masterAccount];\n//     }\n\n//     function getApprovedAdministrators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedAdministrators[masterAccount];\n//     }\n\n//     function updateReceiverAddress(address tokenAddress, address receiverAddress) public {\n//         receiverAccounts[msg.sender][tokenAddress] = receiverAddress; \n//     }\n\n//     function getReceiverAddress(address userAddress, address tokenAddress) public view returns (address) {\n//         address receiver = receiverAccounts[userAddress][tokenAddress];\n//         if (receiver == address(0)) {\n//             return userAddress;\n//         } else {\n//             return receiver;\n//         }\n//     }\n// }"
    },
    "contracts/PromotionsManagerv4.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// import \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\n// import \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n// import \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// event OperatorApproved(address indexed parentAccount, address indexed approvedOperator);\n// event OperatorRemoved(address indexed parentAccount, address indexed removedOperator);\n// event AdministratorApproved(address indexed parentAccount, address indexed approvedAdministrator);\n// event AdministratorRemoved(address indexed parentAccount, address indexed removedAdministrator);\n// error NotCustomURI();\n// error URIAlreadSet();\n\n\n// // Interface for Promotion Contracts\n// interface IPromotion {\n//     function joinPromotion(uint256 promotionID, uint256 quantity, uint256 orderID, address buyer) external;\n// }\n\n// contract PromotionsManager is ReentrancyGuard, EIP712 {\n//     using ECDSA for bytes32;\n//     using SafeERC20 for IERC20;\n\n//     address public contractOwner;\n//     mapping(address => mapping(address => bool)) public  approvedOperators;\n//     mapping(address => address[]) public  arrayOfApprovedOperators;\n//     mapping(address => mapping(address => bool)) public  approvedAdministrators;\n//     mapping(address => address[]) public  arrayOfApprovedAdministrators;\n//     mapping(address => mapping(address => address)) public receiverAccounts;   \n//     uint256[] public initialPromotionIDs; //sorted list\n//     address[] public approvedPromotions; \n    \n//     /// @notice SKU state struct\n//     struct SkuState {\n//         uint256 price; // Unit price\n//         uint256 priceVersion; // Price version\n//         uint256 inventory; // Available stock\n//         uint256 inventoryVersion; // Inventory version\n//     }\n\n//     /// @notice Struct for a purchase item\n//     struct PurchaseItem {\n//         uint256 skuId; // SKU ID\n//         uint256 quantity; // Quantity to buy\n//         uint256 unitPrice; // Price per unit\n//         address priceToken; // Payment token address (ETH = address(0))\n//         uint256 priceVersion; // Price version\n//         uint256 inventory; // current version of inventory\n//         uint256 inventoryVersion; // Inventory version\n//         uint256 promotionID; // Receiver of the payment\n//     }\n\n//     bytes32 private constant PURCHASE_ITEM_TYPEHASH = keccak256(\n//         \"PurchaseItem(uint256 skuId,uint256 quantity,uint256 unitPrice,address priceToken,uint256 priceVersion,uint256 inventory,uint256 inventoryVersion,uint256 promotionID)\"\n//     );\n\n//     /// @notice SKU mapping\n//     mapping(uint256 => SkuState) public skus;\n\n//     /// @notice Used order numbers to prevent replay attacks\n//     mapping(uint256 => bool) public usedOrderNo;\n\n//     /// @notice Used struct hashes to prevent signature replay\n//     mapping(bytes32 => bool) public usedHashes;\n\n//     /// @notice System signer address for EIP-712 signatures\n//     address public systemSigner;\n\n//     /// @notice Event emitted on a purchase\n//     event Purchased(address indexed buyer, uint256 indexed orderNo, PurchaseItem[] items);\n\n//     /// @notice Event emitted when a SKU is updated\n//     event SkuUpdated(\n//         uint256 indexed skuId, uint256 newPrice, uint256 priceVersion, uint256 newInventory, uint256 inventoryVersion\n//     );\n\n//     modifier onlyOwner() {\n//         require(msg.sender == contractOwner, \"Not Owner\");\n//         _;\n//     }\n\n//     /// @param _signer The authorized system signer\n//     /// @param _initialOwner Initial owner of the contract\n//     constructor(address _signer, address _initialOwner) EIP712(\"Shop\", \"1\") {\n//         require(_signer != address(0), \"invalid signer\");\n//         systemSigner = _signer;\n//         contractOwner = msg.sender;\n//     }\n\n//     function setOwner(address newOwner) public onlyOwner {\n//         contractOwner = newOwner; \n//     }\n\n//     function setSystemSigner(address _signer) external onlyOwner {\n//         require(_signer != address(0), \"invalid signer\");\n//         systemSigner = _signer;\n//     }\n\n//     function getAllApprovedPromotions() external view returns (address[] memory) {\n//         return approvedPromotions;\n//     }\n\n\n//     /// @notice Batch purchase using a single EIP-712 signature\n//     /// @param items Array of purchase items\n//     /// @param payExpire Expiration timestamp for payment\n//     /// @param orderNo Unique order number to prevent replay\n//     /// @param signature EIP-712 signature from system signer\n//     function buyWithBatchHash(\n//         PurchaseItem[] calldata items,\n//         uint256 payExpire,\n//         uint256 orderNo,\n//         // address[] calldata tokenAddresses, \n//         // uint256[] calldata permittedAmounts,\n//         // //permitted  signatures\n//         bytes calldata signature\n//     ) external payable nonReentrant {\n//         require(block.timestamp <= payExpire, \"expired\"); \n//         require(items.length > 0, \"empty batch\");\n//         require(!usedOrderNo[orderNo], \"orderNo used\");\n\n//         // 1. Hash the entire PurchaseItem array\n//         bytes32 itemsHash = hashPurchaseItems(items);\n\n//         // 2. Construct the EIP-712 struct hash and verify signature\n//         //这里需要添加 promotionIDs + numOrders 吗\n//         bytes32 structHash = keccak256(\n//             abi.encode(\n//                 keccak256(\"BatchPurchase(uint256 payExpire,uint256 orderNo,address buyer,bytes32 itemsHash)\"),\n//                 payExpire,\n//                 orderNo,\n//                 msg.sender,\n//                 itemsHash\n//             )\n//         );\n//         bytes32 digest = _hashTypedDataV4(structHash);\n//         require(ECDSA.recover(digest, signature) == systemSigner, \"invalid signature\");\n\n//         // 3. Process each purchase item\n//         for (uint256 i = 0; i < items.length; i++) {\n//             PurchaseItem calldata item = items[i];\n\n//             SkuState storage s = skus[item.skuId];\n\n//             // Update price if submitted version is newer\n//             require(item.priceVersion >= s.priceVersion, \"stale price\");\n//             if (item.priceVersion > s.priceVersion) {\n//                 s.price = item.unitPrice;\n//                 s.priceVersion = item.priceVersion;\n//             } else {\n//                 require(s.price == item.unitPrice, \"price mismatch\");\n//             }\n\n//             // Update inventory if submitted version is newer\n//             require(item.inventoryVersion >= s.inventoryVersion, \"stale inventory\");\n//             require(s.inventory >= item.quantity, \"insufficient stock\");\n//             if (item.inventoryVersion > s.inventoryVersion) {\n//                 s.inventory = item.inventory - item.quantity;\n//                 s.inventoryVersion = item.inventoryVersion;\n//             }\n\n//             if (item.promotionID < initialPromotionIDs[0]) {\n//                 revert(\"Invalid promotion ID\");\n//             }\n\n//             // Start from the last promotion and work backwards\n//             uint256 index = initialPromotionIDs.length - 1;\n            \n//             // Find the largest initial ID <= promotionID\n//             while (index > 0 && initialPromotionIDs[index] > item.promotionID) {\n//                 unchecked { index--; }\n//             }\n\n//             address promotionContract = approvedPromotions[index];\n//             IPromotion(promotionContract).joinPromotion(item.promotionID, item.quantity, orderNo, msg.sender);\n//         }\n\n//         // 5. Mark order number as used to prevent replay\n//         usedOrderNo[orderNo] = true;\n//         // Emit Purchased event\n//         emit Purchased(msg.sender, orderNo, items);\n//     }\n\n//     /// @notice Constructs a hash for an array of PurchaseItem structs\n//     /// @param items Array of PurchaseItem structs\n//     /// @return bytes32 The cumulative hash of all items\n//     function hashPurchaseItems(PurchaseItem[] calldata items) public pure returns (bytes32) {\n//         bytes32[] memory hashes = new bytes32[](items.length);\n//         for (uint256 i = 0; i < items.length; i++) {\n//             hashes[i] = _hashPurchaseItem(items[i]);\n//         }\n//         //EIP-712\n//         return keccak256(abi.encodePacked(hashes));\n//     }\n\n//     function _hashPurchaseItem(PurchaseItem calldata item) private pure returns (bytes32) {\n//         return keccak256(\n//             abi.encode(\n//                 PURCHASE_ITEM_TYPEHASH,\n//                 item.skuId,\n//                 item.quantity,\n//                 item.unitPrice,\n//                 item.priceToken,\n//                 item.priceVersion,\n//                 item.inventory,\n//                 item.inventoryVersion,\n//                 item.promotionID\n//             )\n//         );\n//     }\n\n//     /// @notice Update SKU using a system signature\n//     /// @param skuId SKU ID\n//     /// @param newPrice New unit price\n//     /// @param priceVersion Price version\n//     /// @param newInventory New inventory amount\n//     /// @param inventoryVersion Inventory version\n//     /// @param expireTime Signature expiration timestamp\n//     /// @param updater Address authorized to perform the update\n//     /// @param signature EIP-712 signature from system signer\n//     function updateSkuWithSig(\n//         uint256 skuId,\n//         uint256 newPrice,\n//         uint256 priceVersion,\n//         uint256 newInventory,\n//         uint256 inventoryVersion,\n//         uint256 expireTime,\n//         address updater,\n//         bytes calldata signature\n//     ) external {\n//         require(msg.sender == updater, \"caller not authorized\");\n//         require(block.timestamp <= expireTime, \"signature expired\");\n\n//         // Construct EIP-712 struct hash\n//         bytes32 structHash = keccak256(\n//             abi.encode(\n//                 keccak256(\n//                     \"UpdateSku(uint256 skuId,uint256 newPrice,uint256 priceVersion,uint256 newInventory,uint256 inventoryVersion,uint256 expireTime,address updater)\"\n//                 ),\n//                 skuId,\n//                 newPrice,\n//                 priceVersion,\n//                 newInventory,\n//                 inventoryVersion,\n//                 expireTime,\n//                 updater\n//             )\n//         );\n//         bytes32 digest = _hashTypedDataV4(structHash);\n\n//         // Verify signature and prevent replay\n//         require(ECDSA.recover(digest, signature) == systemSigner, \"invalid signature\");\n//         require(!usedHashes[digest], \"signature replayed\");\n//         usedHashes[digest] = true;\n\n//         SkuState storage s = skus[skuId];\n//         require(priceVersion >= s.priceVersion, \"stale price version\");\n//         require(inventoryVersion >= s.inventoryVersion, \"stale inventory version\");\n\n//         // Update SKU\n//         if (priceVersion > s.priceVersion) {\n//             s.price = newPrice;\n//             s.priceVersion = priceVersion;\n//         }\n\n//         if (inventoryVersion > s.inventoryVersion) {\n//             s.inventory = newInventory;\n//             s.inventoryVersion = inventoryVersion;\n//         }\n\n//         // Emit SKU update event\n//         emit SkuUpdated(skuId, s.price, s.priceVersion, s.inventory, s.inventoryVersion);\n//     }\n\n//     /// @notice Get SKU state\n//     /// @param skuId SKU ID\n//     /// @return SkuState struct containing price, inventory, and version info\n//     function getSku(uint256 skuId) external view returns (SkuState memory) {\n//         return skus[skuId];\n//     }\n\n\n\n\n\n\n\n\n\n\n//     function approvePromotions(uint256 _initialID, address _promotionAddress) public onlyOwner {\n//         uint256[] storage initialIDs = initialPromotionIDs;\n//         address[] storage promotions = approvedPromotions;\n//         uint256 length = initialIDs.length;\n        \n//         // Check for duplicate ID\n//         for (uint256 i = 0; i < length; ) {\n//             if (initialIDs[i] == _initialID) {\n//                 revert(\"Duplicate promotion ID\");\n//             }\n//             unchecked { ++i; }\n//         }\n        \n//         // Find insertion position (maintain ascending order)\n//         uint256 insertIndex = length;\n//         for (uint256 i = 0; i < length; ) {\n//             if (initialIDs[i] > _initialID) {\n//                 insertIndex = i;\n//                 break;\n//             }\n//             unchecked { ++i; }\n//         }\n\n//         // Expand arrays with dummy values\n//         initialIDs.push(0);\n//         promotions.push(address(0));\n\n//         // Shift elements after insertion point\n//         for (uint256 i = length; i > insertIndex; ) {\n//             unchecked {\n//                 initialIDs[i] = initialIDs[i - 1];\n//                 promotions[i] = promotions[i - 1];\n//                 --i;\n//             }\n//         }\n\n//         // Insert new values\n//         initialIDs[insertIndex] = _initialID;\n//         promotions[insertIndex] = _promotionAddress;\n//     }\n\n//     // function joinPromotions(uint256[] calldata promotionIDs, uint256[] calldata numOrders, uint256 orderID) public {\n//     //     require(promotionIDs.length == numOrders.length, \"Array length mismatch\");\n//     //     require(initialPromotionIDs.length > 0, \"No promotions available\");\n        \n//     //     // Cache arrays in memory for gas efficiency\n//     //     uint256[] memory initialIDs = initialPromotionIDs;\n//     //     address[] memory promotions = approvedPromotions;\n//     //     uint256 promotionsLength = initialIDs.length;\n\n//     //     for (uint256 i = 0; i < promotionIDs.length; ) {\n//     //         uint256 promotionID = promotionIDs[i];\n//     //         uint256 quantity = numOrders[i];\n            \n//     //         // Revert if ID is smaller than the first initial promotion ID\n//     //         if (promotionID < initialIDs[0]) {\n//     //             revert(\"Invalid promotion ID\");\n//     //         }\n\n//     //         // Start from the last promotion and work backwards\n//     //         uint256 index = promotionsLength - 1;\n            \n//     //         // Find the largest initial ID <= promotionID\n//     //         while (index > 0 && initialIDs[index] > promotionID) {\n//     //             unchecked { index--; }\n//     //         }\n\n//     //         address promotionContract = promotions[index];\n//     //         IPromotion(promotionContract).joinPromotion(promotionID, quantity, orderID, msg.sender);\n            \n//     //         unchecked { i++; }\n//     //     }\n//     // }\n\n//     function approveOperator(address approvedOperator, address parentAccount) public {\n//         require(approvedOperator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedOperators[parentAccount][approvedOperator],\n//             \"Operator already approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][approvedOperator] = true;\n//         arrayOfApprovedOperators[parentAccount].push(approvedOperator);\n\n//         emit OperatorApproved(parentAccount, approvedOperator);\n//     }\n\n//     function removeOperator(address toRemove, address parentAccount) public {\n//         require(\n//             approvedOperators[parentAccount][toRemove],\n//             \"Operator not approved.\"\n//         );\n//         require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n//         approvedOperators[parentAccount][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedOperators[parentAccount];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit OperatorRemoved(parentAccount, toRemove);\n//     }\n\n//     function approveAdministrator(address approvedAdministrator, bool addOperator) public {\n//         require(approvedAdministrator != address(0), \"Cannot approve zero address.\");\n//         require(\n//             !approvedAdministrators[msg.sender][approvedAdministrator],\n//             \"Admin already approved.\"\n//         );\n\n//         approvedAdministrators[msg.sender][approvedAdministrator] = true;\n//         arrayOfApprovedAdministrators[msg.sender].push(approvedAdministrator);\n\n//         emit AdministratorApproved(msg.sender, approvedAdministrator);\n//         if (addOperator) {\n//             approveOperator(approvedAdministrator, msg.sender);\n//         }\n//     }\n\n//     function removeAdministrator(address toRemove, bool removeAsOperator) public {\n//         require(\n//             approvedAdministrators[msg.sender][toRemove],\n//             \"Administrator not approved.\"\n//         );\n//         approvedAdministrators[msg.sender][toRemove] = false;\n\n//         // Remove the address from the array\n//         address[] storage operators = arrayOfApprovedAdministrators[msg.sender];\n//         for (uint256 i = 0; i < operators.length; i++) {\n//             if (operators[i] == toRemove) {\n//                 operators[i] = operators[operators.length - 1]; // Replace with the last element\n//                 operators.pop(); // Remove the last element\n//                 break;\n//             }\n//         }\n\n//         emit AdministratorRemoved(msg.sender, toRemove);\n//         if (removeAsOperator && approvedOperators[msg.sender][toRemove]) {\n//             removeOperator(toRemove, msg.sender);\n//         }\n//     }\n\n//     function isApprovedOperator(address operator, address parentAccount) public view returns(bool) {\n//         return (approvedOperators[parentAccount][operator] || operator == parentAccount); \n//     }\n\n//     function getApprovedOperators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedOperators[masterAccount];\n//     }\n\n//     function getApprovedAdministrators(\n//         address masterAccount\n//     ) external view returns (address[] memory) {\n//         return arrayOfApprovedAdministrators[masterAccount];\n//     }\n\n//     function updateReceiverAddress(address tokenAddress, address receiverAddress) public {\n//         receiverAccounts[msg.sender][tokenAddress] = receiverAddress; \n//     }\n\n//     function getReceiverAddress(address userAddress, address tokenAddress) public view returns (address) {\n//         address receiver = receiverAccounts[userAddress][tokenAddress];\n//         if (receiver == address(0)) {\n//             return userAddress;\n//         } else {\n//             return receiver;\n//         }\n//     }\n// }"
    },
    "contracts/Protocol Contracts/drawingManagerv7.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nerror Promotion_Expired();\nerror InvalidConfig(); \nerror NotApproved();\n\nevent DrawingCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 thresholdAmount, uint256 endTime, uint256 rafflePrizeBPs, uint256 minimumOrderSize, bool mintsNFTs);\nevent DrawingCustodyRedeemed(uint256 indexed promotionID, uint256 redeemedAmount); \nevent DrawingCancelled(uint256 indexed promotionID, uint256 numberOfParticipants);\nevent DrawingReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 cohortNumber, uint256 redeemedAmount); \nevent DrawingReceiptMinted(address indexed buyer, uint256 indexed promotionID, uint256 indexed participantNumber, uint256 cohort, uint256 receiptID, uint256 purchaseAmount, uint256 orderID);\nevent RaffleWinner(uint256 indexed promotionID, uint256 cohort, uint256 tokenID, uint256 prize,  uint256 randomWord); \nevent RafflesInitiated(uint64[] promotionIDs, uint256 indexed vrfRequestID, address indexed initiator, uint16[] cohorts); //initiators should be reimbursed more in potential air-drops\n\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./SatsumePromotion.sol\";\nimport \"../../interfaces/IISOManager.sol\"; \n\ncontract DrawingManager is VRFConsumerBaseV2, SatsumePromotion {\n\n    struct Drawing {\n        uint256 endTime;  \n        uint256 thresholdAmount;\n        uint256 rafflePrizeBPs;    \n        address owner;          \n        bool returnedCustody;    \n        bool mintsNFTs;    \n        bool soldOut;     \n        bool cancelledDrawing; \n        uint256[] raffleAmounts;        \n        uint256 minimumOrderSize;\n        uint256 activeCohort;       \n        address erc20Token;      \n    }\n\n    struct DrawingReceipt {\n        uint256 drawingID;\n        uint256 cohortNumber;\n        uint256 raffleContribution;\n        uint256 redeemableAmount; \n    }\n\n    struct VRFRequestContext {\n        uint64[] drawingIDArray; \n        uint16[] cohorts;\n        uint256[] randomWords; \n    }\n\n    uint256 public drawingIDs = 1;// type(uint256).max / 10 * 2 + 1;\n    uint256 public constant MINIMUM_DURATION = 900; \n    address public URISetter;\n    bool allowCustomReceipts; \n\n\n    mapping(uint256 => DrawingReceipt) public DrawingReceipts;\n    mapping(uint256 => Drawing) public Drawings;\n    mapping(uint256 => VRFRequestContext) private vrfRequestIDtoContext; //must this be private? \n    mapping(uint256=> mapping(uint256 => bool)) public raffleInitiatedBool;\n    mapping(uint256 => mapping(uint256 => uint256[])) public drawingIDCohortToReceipts; \n\n    /* State Variables */\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    \n    IISOManager public isoManager;\n    address public isoManagerAddress; \n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n    uint32 private immutable i_callbackGasLimit;\n    uint64 private immutable i_subscriptionId;\n    uint256 private s_lastTimeStamp;\n    bytes32 private immutable i_gasLane;\n\n    constructor(\n        address vrfCoordinatorV2,\n        address _receiptManagerAddress,\n        address _merchantManagerAddress, \n        address _isoManagerAddress, \n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) { \n        contractOwner = msg.sender; // Set the owner to the contract deployer\n        receiptManagerAddress = _receiptManagerAddress;  \n        receiptManager = IReceiptManager(_receiptManagerAddress);\n        merchantManagerAddress = _merchantManagerAddress;  \n        merchantManager = IMerchantManager(_merchantManagerAddress);\n        isoManagerAddress = _isoManagerAddress;\n        isoManager = IISOManager(_isoManagerAddress);\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_callbackGasLimit = callbackGasLimit;\n    }\n\n    function createDrawing(\n        uint256 _duration,\n        uint256 _thresholdAmount,\n        uint256 _rafflePrizeBPs, \n        uint256 _minimumOrderSize,\n        uint16 _numberOfRaffles, \n        address _owner,\n        address _erc20Token, \n        bool _mintsNFTs\n    ) public onlyApprovedOperators(_owner) {\n        if ( _duration < MINIMUM_DURATION || _minimumOrderSize < _thresholdAmount || _rafflePrizeBPs >= 10000) {\n            revert InvalidConfig();\n        }\n\n        // Initialize a new drawing contract and store it in storage\n        Drawing storage drawing = Drawings[drawingIDs];\n        drawing.owner = payable(_owner);\n        drawing.endTime = block.timestamp + _duration;\n        drawing.thresholdAmount = _thresholdAmount; \n        drawing.rafflePrizeBPs = _rafflePrizeBPs; \n        drawing.minimumOrderSize = _minimumOrderSize; \n        drawing.erc20Token = _erc20Token; \n        drawing.mintsNFTs = _mintsNFTs;\n        drawing.raffleAmounts = new uint256[](_numberOfRaffles);\n\n        emit DrawingCreated(_owner, drawingIDs, _erc20Token, _thresholdAmount, _duration + block.timestamp, _rafflePrizeBPs, _minimumOrderSize, _mintsNFTs); \n        addressToPromotions[_owner].push(drawingIDs);\n        if (_mintsNFTs) {\n            receiptManager.setPromotionOwner(drawingIDs, _owner); \n        }\n        drawingIDs+=1; \n    }\n    //OrderID is an optional parameter. Can put anything there\n    function joinPromotion(uint256 drawingID, uint256 purchaseAmount, uint256 orderID, address buyer) public override {\n        Drawing memory drawing = Drawings[drawingID];\n        uint256 numParticipants = promotionIDToReceiptIDs[drawingID].length;\n\n        // Check if the promotion is expired or slots are full\n        if (drawing.soldOut ||  drawing.endTime < block.timestamp) {\n            revert Promotion_Expired();\n        } \n        \n        //Potential overflow here *********************************************************\n        uint256 sharedTotal = purchaseAmount * drawing.rafflePrizeBPs / 10000; \n        uint256 commissionAmount = (purchaseAmount - sharedTotal) * commission / 10000;\n\n        // Transfer funds\n        isoManager.payStore(drawing.owner, (purchaseAmount - commissionAmount - sharedTotal), commissionAmount, sharedTotal, drawing.erc20Token, buyer); \n\n        // Update commission balances\n        earnedCommissions[drawing.erc20Token] += commissionAmount;\n\n        // Mint NFT receipts and log details\n        uint256 receiptID;\n        if (drawing.mintsNFTs) {\n            receiptID = receiptManager.mintReceipts(\n                buyer,\n                drawingID,\n                numParticipants + 1,\n                1\n            );\n        } else {\n            receiptID = receiptManager.incrementReceiptIDs(1);\n        }\n\n        DrawingReceipt storage drawingReceipt = DrawingReceipts[receiptID];\n        drawingReceipt.drawingID = drawingID; \n        drawingReceipt.raffleContribution = sharedTotal; \n\n        // Directly push to storage array\n        promotionIDToReceiptIDs[drawingID].push(receiptID);\n        drawingIDCohortToReceipts[drawingID][drawing.activeCohort].push(receiptID); \n\n        if(drawing.raffleAmounts[drawing.activeCohort] >= drawing.thresholdAmount) {\n            if(drawing.activeCohort == drawing.raffleAmounts.length-1) {\n                drawing.soldOut = true;\n            }\n            else {\n                drawing.activeCohort += 1; \n            }\n        }\n\n        // Handle unminted receipt ownership\n        if (!drawing.mintsNFTs) {\n            unmintedReceiptsToOwners[receiptID] = buyer;\n        }\n        \n        // Update the number of participants\n        emit DrawingReceiptMinted(buyer, drawingID, numParticipants +1, drawing.activeCohort, receiptID, purchaseAmount, orderID);\n    }\n\n    function drawingEligibility(uint256 drawingID, uint256 cohort) public view returns (bool) {\n        Drawing storage drawing = Drawings[drawingID];\n        if(drawing.raffleAmounts[cohort] < drawing.thresholdAmount || raffleInitiatedBool[drawingID][cohort] == true) {\n            return false;\n        }\n        else {\n            return true;\n        } \n    } \n\n    function initiateDrawings(uint64[] calldata arrayOfDrawingIDs, uint16[] calldata arrayOfcohorts) public {\n        // Check array lengths match\n        require(arrayOfDrawingIDs.length == arrayOfcohorts.length, \"Array length mismatch\");\n        require(arrayOfDrawingIDs.length <= 5, \"Exceed length\");\n        require(arrayOfDrawingIDs.length > 0, \"Zero length\");\n\n        // Pre-check eligibility for all entries\n        for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n            require(drawingEligibility(arrayOfDrawingIDs[i], arrayOfcohorts[i]), \"Ineligible entry\");\n        }\n\n        // Process each drawingID and cohort\n        for (uint256 i = 0; i < arrayOfDrawingIDs.length; i++) {\n            raffleInitiatedBool[arrayOfDrawingIDs[i]][arrayOfcohorts[i]] = true;\n        }\n\n        // Convert length to uint32 for VRF call\n        uint32 numWords = uint32(arrayOfDrawingIDs.length);\n\n        // Request randomness\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            numWords // Number of random words to request (adjust if needed)\n        );\n\n        // Create storage reference to the context\n        VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n\n        // Manually copy arrays from calldata to storage\n        context.drawingIDArray = arrayOfDrawingIDs; // This copies elements\n        context.cohorts = arrayOfcohorts; // This copies elements\n        \n        //emit event\n        emit RafflesInitiated(arrayOfDrawingIDs, requestId, msg.sender, arrayOfcohorts);\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId, \n        uint256[] memory randomWords\n    ) internal override {\n        VRFRequestContext storage context = vrfRequestIDtoContext[requestId];\n        // Ensure we have enough random words\n        require(\n            randomWords.length == context.drawingIDArray.length, \n            \"Random words length mismatch\"\n        );\n        \n        // Process each drawing/cohort combination\n        for (uint i = 0; i < context.drawingIDArray.length; i++) {\n            uint256 drawingID = context.drawingIDArray[i];\n            uint256 cohort = context.cohorts[i];\n            uint256 randomWord = randomWords[i];\n            uint256[] memory cohortReceipts = drawingIDCohortToReceipts[drawingID][cohort]; \n            \n            // Calculate winner position\n            uint256 x = randomWord % Drawings[drawingID].raffleAmounts[cohort];\n            uint256 sum; \n            uint256 winningIndex;\n            for (uint256 j = 0; j < cohortReceipts.length; j ++) {\n                sum += DrawingReceipts[cohortReceipts[j]].raffleContribution;\n                if ( sum > x) {\n                    winningIndex = j;\n                    break;\n                } \n           }\n            uint256 winningReceiptID = cohortReceipts[winningIndex];            \n            \n            // Update receipt\n            DrawingReceipt storage drawingReceipt = DrawingReceipts[winningReceiptID];\n            drawingReceipt.redeemableAmount = Drawings[drawingID].raffleAmounts[cohort];\n            \n            // Emit event for this winner\n            emit RaffleWinner(\n                drawingID,\n                cohort,\n                winningReceiptID,\n                Drawings[drawingID].raffleAmounts[cohort],\n                randomWord\n            );\n        }\n        // Optional: Clean up storage to save gas\n        delete vrfRequestIDtoContext[requestId];\n    }\n\n\n    function redeemDrawingReceipts(uint256[] calldata receiptIDs) external {\n        uint256 redeemableAmount; \n        address erc20Token = Drawings[DrawingReceipts[receiptIDs[0]].drawingID].erc20Token; //erc20 address of the first token\n        for(uint256 i =0; i < receiptIDs.length; i++) {\n            DrawingReceipt memory drawingReceipt = DrawingReceipts[receiptIDs[i]];\n            Drawing storage drawing = Drawings[drawingReceipt.drawingID];\n            require(erc20Token == drawing.erc20Token, \"Invalid\"); \n            if(drawing.mintsNFTs) {\n                require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \"Not owned\");\n            }\n            else {\n                require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \"Not owned\");\n            }            \n            if(drawingReceipt.redeemableAmount >0) {\n                redeemableAmount += drawingReceipt.redeemableAmount;\n                DrawingReceipts[receiptIDs[i]].redeemableAmount = 0; \n                emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.cohortNumber, drawingReceipt.redeemableAmount); \n            }\n            //For cancelled drawings, the last cohort gets to receive their raffle contributions back\n            else if(drawing.cancelledDrawing && drawing.raffleAmounts[drawingReceipt.cohortNumber] < drawing.thresholdAmount) {\n                redeemableAmount += drawingReceipt.raffleContribution;\n                DrawingReceipts[receiptIDs[i]].raffleContribution = 0;\n                emit DrawingReceiptRedeemed(receiptIDs[i], drawingReceipt.drawingID, drawingReceipt.cohortNumber, drawingReceipt.raffleContribution); \n            }\n        }\n        if(redeemableAmount !=0) {\n            IERC20(erc20Token).transfer(\n                msg.sender,\n                redeemableAmount\n            );\n        }\n    }\n\n\n    function cancelDrawing(uint256 drawingID) external {\n        Drawing storage drawing = Drawings[drawingID];\n        if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) {\n            revert NotApproved(); \n        }\n        if (drawing.endTime > block.timestamp) {\n            drawing.endTime = 0; \n            drawing.cancelledDrawing = true; \n            drawing.returnedCustody = true; \n        }\n    }\n\n    function retrieveExcessDrawingCustody(uint256 drawingID) public {\n        Drawing storage drawing = Drawings[drawingID];\n\n        require(block.timestamp > drawing.endTime && drawing.endTime != 0, \"Ineligible\");\n        require(!drawing.returnedCustody, \"Already Returned\");\n\n        if(drawing.raffleAmounts[drawing.activeCohort] < drawing.thresholdAmount && !drawing.returnedCustody) {\n            drawing.returnedCustody = true;\n            // Pay the contract  owner the remaining amount \n            IERC20(drawing.erc20Token).transfer(contractOwner, drawing.raffleAmounts[drawing.activeCohort]); \n            earnedCommissions[drawing.erc20Token] += drawing.raffleAmounts[drawing.activeCohort];\n            emit DrawingCustodyRedeemed(drawingID, drawing.raffleAmounts[drawing.activeCohort]); \n        }\n    }\n\n\n    function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n        Drawing storage drawing = Drawings[promotionID];\n        \n        // Common validation checks\n        if (!drawing.mintsNFTs) revert NotCustomURI();\n        if (bytes(receiptManager.customURIRoot(promotionID)).length != 0) revert URIAlreadSet();\n        \n        // Permission checks based on allowCustomReceipts flag\n        if (allowCustomReceipts) {\n            if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) revert NotApproved();\n        } else {\n            if (msg.sender != URISetter) revert NotApproved();\n        }\n        \n        // Update URI\n        receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n    }\n\n    function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n        Drawing storage drawing = Drawings[promotionID]; \n        if (!merchantManager.isApprovedOperator(msg.sender, drawing.owner)) {\n            revert NotApproved(); \n        }\n        receiptManager.setRoyalty(promotionID, basisPoints);\n    }\n\n    function setURISetter(address newURISetter) onlyOwner public{\n        URISetter = newURISetter; \n    }\n}"
    },
    "contracts/Protocol Contracts/ISOManagerv2.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IMerchantManager.sol\";\n\nerror TokenDoesNotExist();\nerror NotApproved();\n\ncontract ISOManager is ERC721, IERC2981 {\n    address public contractOwner;\n    using Strings for uint256;\n    struct ISO {\n        uint256 numTokens;\n        uint256 revShare;\n        uint256 price;\n        uint256 minted;\n        mapping(address => uint256) redeemableAmounts;\n        //address store;\n        address erc20Token;\n    }\n    struct ShareContext {\n        address store;\n        uint256 shareNumber;\n        mapping(address => uint256) redeemedAmounts;\n    }\n\n    mapping(address => ISO) public ISOs;\n    mapping(address => uint256[]) public addressToTokenIDs;\n    mapping(uint256 => ShareContext) public ShareContexts;\n    uint256 tokenIDs;\n    bool openISOs = false;\n    IMerchantManager public merchantManager;\n    address public merchantManagerAddress;\n\n    string public defaultURIRoot = \"amazon.com/\";\n    // Mappings to store receipts by token ID\n    mapping(address => string) public customURIRoot;\n    mapping(address => address) public royaltyReceiver;\n    mapping(address => uint16) public royaltyBasisPoints;\n    address[] public approvedCallers;\n\n    //Modifier to restrict usage to the contract owner\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not Authorized\");\n        _;\n    }\n\n    //Modifier to allow ISOs\n    modifier allowedISOs() {\n        require(openISOs == true, \"ISOs not allowed\");\n        _;\n    }\n\n    //Modifier to restrict usage to the approved calling contracts\n    modifier onlyApprovedCallers() {\n        bool isApproved = false;\n        for (uint256 i = 0; i < approvedCallers.length; i++) {\n            if (approvedCallers[i] == msg.sender) {\n                isApproved = true;\n                break;\n            }\n        }\n        require(isApproved, \"Not an approved caller\");\n        _;\n    }\n\n    modifier onlyApprovedOperators(address parentAccount) {\n        require(\n            merchantManager.isApprovedOperator(msg.sender, parentAccount),\n            \"Not Approved\"\n        );\n        _;\n    }\n\n    // Constructor to set the name and symbol of the ERC-721 token\n    constructor() ERC721(\"ISOTokens\", \"ISO\") {\n        contractOwner = msg.sender;\n    }\n\n    function setOwner(address payable newOwner) external onlyOwner {\n        contractOwner = payable(newOwner);\n    }\n\n    function allowISOs() public onlyOwner {\n        openISOs = true;\n    }\n\n    function createISO(\n        uint256 _numTokens,\n        uint256 _revShare,\n        uint256 _price,\n        address _erc20Token\n    ) public allowedISOs {\n        require(ISOs[msg.sender].numTokens == 0, \"already ISO\");\n        require(_numTokens > 0 && _numTokens * _revShare <= 10000);\n\n        // Initialize a new drawing contract and store it in storage\n        ISO storage iso = ISOs[msg.sender];\n        iso.numTokens = _numTokens;\n        iso.revShare = _revShare;\n        iso.price = _price;\n        iso.erc20Token = _erc20Token;\n    }\n\n    function buyISO(address store, uint256 numShares) public allowedISOs {\n        ISO storage iso = ISOs[store];\n        require(iso.numTokens > 0, \"ISO doesn't exist\"); // Check ISO exists\n        require(numShares > 0, \"Cannot buy 0 shares\");\n        if (iso.minted + numShares > iso.numTokens) {\n            numShares = iso.numTokens - iso.minted;\n        }\n\n        // Calculate total price with overflow check\n        uint256 totalPrice = numShares * iso.price;\n        require(totalPrice / iso.price == numShares, \"Overflow detected\");\n\n        // Transfer payment\n        IERC20(iso.erc20Token).transferFrom(msg.sender, store, totalPrice);\n\n        // Mint tokens and set context\n        uint256 startTokenId = tokenIDs;\n        for (uint256 i = 0; i < numShares; i++) {\n            uint256 tokenId = startTokenId + i;\n            _mint(msg.sender, tokenId);\n            addressToTokenIDs[store].push(tokenId);\n            ShareContexts[tokenId].shareNumber = addressToTokenIDs[store]\n                .length;\n            ShareContexts[tokenId].store = store;\n        }\n\n        // Update state\n        tokenIDs += numShares;\n        iso.minted += numShares; // Track minted tokens\n    }\n\n    function payStore(\n        address store,\n        uint256 toStore,\n        uint256 commission,\n        uint256 custodyAmount,\n        address erc20Token,\n        address payor\n    ) public onlyApprovedCallers {\n        if (ISOs[store].numTokens == 0 || !openISOs) {\n            //no active ISO liabilities\n            IERC20(erc20Token).transferFrom(payor, store, toStore);\n            IERC20(erc20Token).transferFrom(\n                payor,\n                msg.sender,\n                commission + custodyAmount\n            );\n        } else {\n            //Separate amounts for storefronts and store shareholders + commissions\n            uint256 redeemable = (toStore * ISOs[store].revShare) / 10000;\n            uint256 toOwner = toStore - redeemable * ISOs[store].numTokens;\n\n            IERC20(erc20Token).transferFrom(payor, store, toOwner);\n            IERC20(erc20Token).transferFrom(\n                payor,\n                address(this),\n                redeemable * ISOs[store].numTokens\n            );\n            IERC20(erc20Token).transferFrom(\n                payor,\n                msg.sender,\n                custodyAmount + commission\n            );\n            ISOs[store].redeemableAmounts[erc20Token] += redeemable;\n        }\n    }\n\n    function redeemDividends(\n        uint256[] calldata tokenIDArray, // Array of token IDs\n        address[] calldata erc20Tokens // Array of ERC20 tokens\n    ) public {\n        for (uint256 j = 0; j < tokenIDArray.length; j++) {\n            uint256 tokenID = tokenIDArray[j];\n\n            // Validate token ownership\n            require(ownerOf(tokenID) == msg.sender, \"Not owner of token\");\n\n            ShareContext storage shareContext = ShareContexts[tokenID];\n            ISO storage iso = ISOs[shareContext.store];\n\n            // Process each ERC20 token for dividends\n            for (uint256 i = 0; i < erc20Tokens.length; i++) {\n                address tokenAddress = erc20Tokens[i];\n\n                // Calculate redeemable amount\n                uint256 redeemable = iso.redeemableAmounts[tokenAddress] -\n                    shareContext.redeemedAmounts[tokenAddress];\n\n                if (redeemable > 0) {\n                    // Transfer dividends\n                    IERC20(tokenAddress).transfer(msg.sender, redeemable);\n\n                    // Update redemption tracking\n                    shareContext.redeemedAmounts[tokenAddress] = iso\n                        .redeemableAmounts[tokenAddress];\n                }\n            }\n        }\n    }\n\n    function setCustomURIRoot(string calldata newRoot, address store) public {\n        if (!merchantManager.isApprovedOperator(msg.sender, store)) {\n            revert NotApproved();\n        }\n        require(bytes(customURIRoot[store]).length == 0, \"Aready Set\");\n        customURIRoot[store] = newRoot;\n    }\n\n    function tokenURI(\n        uint256 tokenID\n    ) public view override returns (string memory) {\n        ShareContext storage shareContext = ShareContexts[tokenID];\n\n        // Check if the tokenID is valid\n        if (shareContext.store == address(0)) {\n            revert TokenDoesNotExist();\n        }\n\n        // Retrieve the custom URI root for the promotion\n        string memory uriRoot = customURIRoot[shareContext.store];\n\n        // If no custom URI is set, use the default URI\n        if (bytes(uriRoot).length == 0) {\n            //return string(abi.encodePacked(defaultURIRoot, \"/\", uint2str(tokenID), \".json\"));\n            return\n                string(\n                    abi.encodePacked(\n                        defaultURIRoot,\n                        \"/\",\n                        uint2str(shareContext.shareNumber),\n                        \".json\"\n                    )\n                );\n        } else {\n            // Construct the custom URI using participantNumber\n            return\n                string(\n                    abi.encodePacked(\n                        uriRoot,\n                        \"/\",\n                        uint2str(shareContext.shareNumber),\n                        \".json\"\n                    )\n                );\n        }\n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, IERC165) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setRoyalty(uint16 basisPoints, address store) external {\n        if (!merchantManager.isApprovedOperator(msg.sender, store)) {\n            revert NotApproved();\n        }\n        require(basisPoints <= 10000, \"Invalid\"); //royalty over 100%\n        royaltyBasisPoints[store] = basisPoints;\n    }\n\n    function royaltyInfo(\n        uint256 tokenID,\n        uint256 salePrice\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        ShareContext storage shareContext = ShareContexts[tokenID];\n        royaltyAmount =\n            (salePrice * royaltyBasisPoints[shareContext.store]) /\n            10000;\n        return (shareContext.store, royaltyAmount);\n    }\n\n    // Convert uint256 to string\n    function uint2str(uint256 _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        while (_i != 0) {\n            bstr[--len] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n\n    function setPromotionsManager(\n        address _merchantManagerAddress\n    ) external onlyOwner {\n        merchantManagerAddress = _merchantManagerAddress;\n        merchantManager = IMerchantManager(_merchantManagerAddress);\n    }\n\n    function addApprovedCaller(address _toApprove) external onlyOwner {\n        require(_toApprove != address(0), \"Cannot approve the zero address\");\n\n        uint256 length = approvedCallers.length; // Cache the length in memory\n        for (uint256 i = 0; i < length; i++) {\n            require(\n                approvedCallers[i] != _toApprove,\n                \"Address is already approved\"\n            );\n        }\n\n        approvedCallers.push(_toApprove);\n    }\n\n    function removeApprovedCaller(address _toRemove) external onlyOwner {\n        for (uint256 i = 0; i < approvedCallers.length; i++) {\n            if (approvedCallers[i] == _toRemove) {\n                // Swap the element to be removed with the last element\n                approvedCallers[i] = approvedCallers[\n                    approvedCallers.length - 1\n                ];\n                // Remove the last element from the array\n                approvedCallers.pop();\n                return;\n            }\n        }\n        revert(\"Address not found in approved callers.\");\n    }\n\n    function getApprovedCallers() public view returns (address[] memory) {\n        return approvedCallers;\n    }\n}\n"
    },
    "contracts/Protocol Contracts/MerchantManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nevent OperatorApproved(address indexed parentAccount, address indexed approvedOperator);\nevent OperatorRemoved(address indexed parentAccount, address indexed removedOperator);\nevent AdministratorApproved(address indexed parentAccount, address indexed approvedAdministrator);\nevent AdministratorRemoved(address indexed parentAccount, address indexed removedAdministrator);\nevent ReceiverAccountUpdated(address indexed parentAccount, address indexed erc20Token, address newReceiverAccount);\n\n\ncontract MerchantManager {\n    address public contractOwner;\n    mapping(address => mapping(address => bool)) public  approvedOperators;\n    mapping(address => address[]) public  arrayOfApprovedOperators;\n    mapping(address => mapping(address => bool)) public  approvedAdministrators;\n    mapping(address => address[]) public  arrayOfApprovedAdministrators;\n    mapping(address => mapping(address => address)) public receiverAccounts;   \n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not Owner\");\n        _;\n    }\n\n    constructor() {\n        contractOwner = msg.sender;\n    }\n\n    function setOwner(address newOwner) public onlyOwner {\n        contractOwner = newOwner; \n    }\n\n\n    function approveOperator(address approvedOperator, address parentAccount) public {\n        require(approvedOperator != address(0), \"Cannot approve zero address.\");\n        require(\n            !approvedOperators[parentAccount][approvedOperator],\n            \"Operator already approved.\"\n        );\n        require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n        approvedOperators[parentAccount][approvedOperator] = true;\n        arrayOfApprovedOperators[parentAccount].push(approvedOperator);\n\n        emit OperatorApproved(parentAccount, approvedOperator);\n    }\n\n    function removeOperator(address toRemove, address parentAccount) public {\n        require(\n            approvedOperators[parentAccount][toRemove],\n            \"Operator not approved.\"\n        );\n        require(parentAccount ==  msg.sender || approvedAdministrators[parentAccount][msg.sender], \"Not approved administrator\");\n\n        approvedOperators[parentAccount][toRemove] = false;\n\n        // Remove the address from the array\n        address[] storage operators = arrayOfApprovedOperators[parentAccount];\n        for (uint256 i = 0; i < operators.length; i++) {\n            if (operators[i] == toRemove) {\n                operators[i] = operators[operators.length - 1]; // Replace with the last element\n                operators.pop(); // Remove the last element\n                break;\n            }\n        }\n\n        emit OperatorRemoved(parentAccount, toRemove);\n    }\n\n    function approveAdministrator(address approvedAdministrator, bool addOperator) public {\n        require(approvedAdministrator != address(0), \"Cannot approve zero address.\");\n        require(\n            !approvedAdministrators[msg.sender][approvedAdministrator],\n            \"Admin already approved.\"\n        );\n\n        approvedAdministrators[msg.sender][approvedAdministrator] = true;\n        arrayOfApprovedAdministrators[msg.sender].push(approvedAdministrator);\n\n        emit AdministratorApproved(msg.sender, approvedAdministrator);\n        if (addOperator) {\n            approveOperator(approvedAdministrator, msg.sender);\n        }\n    }\n\n    function removeAdministrator(address toRemove, bool removeAsOperator) public {\n        require(\n            approvedAdministrators[msg.sender][toRemove],\n            \"Administrator not approved.\"\n        );\n        approvedAdministrators[msg.sender][toRemove] = false;\n\n        // Remove the address from the array\n        address[] storage operators = arrayOfApprovedAdministrators[msg.sender];\n        for (uint256 i = 0; i < operators.length; i++) {\n            if (operators[i] == toRemove) {\n                operators[i] = operators[operators.length - 1]; // Replace with the last element\n                operators.pop(); // Remove the last element\n                break;\n            }\n        }\n\n        emit AdministratorRemoved(msg.sender, toRemove);\n        if (removeAsOperator && approvedOperators[msg.sender][toRemove]) {\n            removeOperator(toRemove, msg.sender);\n        }\n    }\n\n    function isApprovedOperator(address operator, address parentAccount) public view returns(bool) {\n        return (approvedOperators[parentAccount][operator] || operator == parentAccount); \n    }\n\n    function isApprovedAdministrator(address administrator, address parentAccount) public view returns(bool) {\n        return (approvedAdministrators[parentAccount][administrator] || administrator == parentAccount); \n    }\n\n    function getApprovedOperators(\n        address masterAccount\n    ) external view returns (address[] memory) {\n        return arrayOfApprovedOperators[masterAccount];\n    }\n\n    function getApprovedAdministrators(\n        address masterAccount\n    ) external view returns (address[] memory) {\n        return arrayOfApprovedAdministrators[masterAccount];\n    }\n\n    function updateReceiverAddress(address tokenAddress, address receiverAddress) public {\n        receiverAccounts[msg.sender][tokenAddress] = receiverAddress; \n        emit ReceiverAccountUpdated(msg.sender, tokenAddress, receiverAddress);\n    }\n\n    function getReceiverAddress(address userAddress, address tokenAddress) public view returns (address) {\n        address receiver = receiverAccounts[userAddress][tokenAddress];\n        if (receiver == address(0)) {\n            return userAddress;\n        } else {\n            return receiver;\n        }\n    }\n}"
    },
    "contracts/Protocol Contracts/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n// Interface for Promotion Contracts\ninterface IPromotion {\n    function joinPromotion(\n        uint256 promotionID,\n        uint256 purchaseAmount,\n        uint256 orderID,\n        address buyer\n    ) external;\n}\n\ncontract PromotionsManager is ReentrancyGuard, EIP712 {\n    using ECDSA for bytes32;\n    using SafeERC20 for IERC20;\n\n    address public contractOwner;\n    mapping(address => mapping(address => bool)) public approvedOperators;\n    mapping(address => address[]) public arrayOfApprovedOperators;\n    mapping(address => mapping(address => bool)) public approvedAdministrators;\n    mapping(address => address[]) public arrayOfApprovedAdministrators;\n    mapping(address => mapping(address => address)) public receiverAccounts;\n    uint256[] public initialPromotionIDs; //sorted list\n    address[] public approvedPromotions;\n\n    /// @notice SKU state struct\n    struct SkuState {\n        uint256 price; // Unit price\n        uint256 priceVersion; // Price version\n        uint256 inventory; // Available stock\n        uint256 inventoryVersion; // Inventory version\n    }\n\n    /// @notice Struct for a purchase item\n    struct PurchaseItem {\n        uint256 skuId; // SKU ID\n        uint256 quantity; // Quantity to buy\n        uint256 unitPrice; // Price per unit\n        address priceToken; // Payment token address (ETH = address(0))\n        uint256 priceVersion; // Price version\n        uint256 inventory; // current version of inventory\n        uint256 inventoryVersion; // Inventory version\n        uint256 promotionID; // Receiver of the payment\n    }\n\n    bytes32 private constant PURCHASE_ITEM_TYPEHASH =\n        keccak256(\n            \"PurchaseItem(uint256 skuId,uint256 quantity,uint256 unitPrice,address priceToken,uint256 priceVersion,uint256 inventory,uint256 inventoryVersion,uint256 promotionID)\"\n        );\n\n    /// @notice SKU mapping\n    mapping(uint256 => SkuState) public skus;\n\n    /// @notice Used order numbers to prevent replay attacks\n    mapping(uint256 => bool) public usedOrderNo;\n\n    /// @notice Used struct hashes to prevent signature replay\n    mapping(bytes32 => bool) public usedHashes;\n\n    /// @notice System signer address for EIP-712 signatures\n    address public systemSigner;\n\n    /// @notice Event emitted on a purchase\n    event Purchased(\n        address indexed buyer,\n        uint256 indexed orderNo,\n        PurchaseItem[] items\n    );\n\n    /// @notice Event emitted when a SKU is updated\n    event SkuUpdated(\n        uint256 indexed skuId,\n        uint256 newPrice,\n        uint256 priceVersion,\n        uint256 newInventory,\n        uint256 inventoryVersion\n    );\n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not Owner\");\n        _;\n    }\n\n    /// @param _signer The authorized system signer\n    constructor(address _signer) EIP712(\"Shop\", \"1\") {\n        require(_signer != address(0), \"invalid signer\");\n        systemSigner = _signer;\n        contractOwner = msg.sender;\n    }\n\n    function setOwner(address newOwner) public onlyOwner {\n        contractOwner = newOwner;\n    }\n\n    function setSystemSigner(address _signer) external onlyOwner {\n        require(_signer != address(0), \"invalid signer\");\n        systemSigner = _signer;\n    }\n\n    function getAllApprovedPromotions()\n        external\n        view\n        returns (address[] memory)\n    {\n        return approvedPromotions;\n    }\n\n    /// @notice Batch purchase using a single EIP-712 signature\n    /// @param items Array of purchase items\n    /// @param payExpire Expiration timestamp for payment\n    /// @param orderNo Unique order number to prevent replay\n    /// @param signature EIP-712 signature from system signer\n    function buyWithBatchHash(\n        PurchaseItem[] calldata items,\n        uint256 payExpire,\n        uint256 orderNo,\n        // address[] calldata tokenAddresses,\n        // uint256[] calldata permittedAmounts,\n        // //permitted  signatures\n        bytes calldata signature\n    ) external payable nonReentrant {\n        require(block.timestamp <= payExpire, \"expired\");\n        require(items.length > 0, \"empty batch\");\n        require(!usedOrderNo[orderNo], \"orderNo used\");\n\n        // 1. Hash the entire PurchaseItem array\n        bytes32 itemsHash = hashPurchaseItems(items);\n\n        // 2. Construct the EIP-712 struct hash and verify signature\n        //这里需要添加 promotionIDs + numOrders 吗\n        bytes32 structHash = keccak256(\n            abi.encode(\n                keccak256(\n                    \"BatchPurchase(uint256 payExpire,uint256 orderNo,address buyer,bytes32 itemsHash)\"\n                ),\n                payExpire,\n                orderNo,\n                msg.sender,\n                itemsHash\n            )\n        );\n        bytes32 digest = _hashTypedDataV4(structHash);\n        require(\n            ECDSA.recover(digest, signature) == systemSigner,\n            \"invalid signature\"\n        );\n\n        // 3. Process each purchase item\n        for (uint256 i = 0; i < items.length; i++) {\n            PurchaseItem calldata item = items[i];\n\n            SkuState storage s = skus[item.skuId];\n\n            // Update price if submitted version is newer\n            require(item.priceVersion >= s.priceVersion, \"stale price\");\n            if (item.priceVersion > s.priceVersion) {\n                s.price = item.unitPrice;\n                s.priceVersion = item.priceVersion;\n            } else {\n                require(s.price == item.unitPrice, \"price mismatch\");\n            }\n\n            // Update inventory if submitted version is newer\n            require(\n                item.inventoryVersion >= s.inventoryVersion,\n                \"stale inventory\"\n            );\n            require(s.inventory >= item.quantity, \"insufficient stock\");\n            if (item.inventoryVersion > s.inventoryVersion) {\n                s.inventory = item.inventory - item.quantity;\n                s.inventoryVersion = item.inventoryVersion;\n            }\n\n            if (item.promotionID < initialPromotionIDs[0]) {\n                revert(\"Invalid promotion ID\");\n            }\n\n            // Start from the last promotion and work backwards\n            uint256 index = initialPromotionIDs.length - 1;\n\n            // Find the largest initial ID <= promotionID\n            while (index > 0 && initialPromotionIDs[index] > item.promotionID) {\n                unchecked {\n                    index--;\n                }\n            }\n\n            address promotionContract = approvedPromotions[index];\n            IPromotion(promotionContract).joinPromotion(\n                item.promotionID,\n                s.price,\n                orderNo,\n                msg.sender\n            );\n        }\n\n        // 5. Mark order number as used to prevent replay\n        usedOrderNo[orderNo] = true;\n        // Emit Purchased event\n        emit Purchased(msg.sender, orderNo, items);\n    }\n\n    /// @notice Constructs a hash for an array of PurchaseItem structs\n    /// @param items Array of PurchaseItem structs\n    /// @return bytes32 The cumulative hash of all items\n    function hashPurchaseItems(\n        PurchaseItem[] calldata items\n    ) public pure returns (bytes32) {\n        bytes32[] memory hashes = new bytes32[](items.length);\n        for (uint256 i = 0; i < items.length; i++) {\n            hashes[i] = _hashPurchaseItem(items[i]);\n        }\n        //EIP-712\n        return keccak256(abi.encodePacked(hashes));\n    }\n\n    function _hashPurchaseItem(\n        PurchaseItem calldata item\n    ) private pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    PURCHASE_ITEM_TYPEHASH,\n                    item.skuId,\n                    item.quantity,\n                    item.unitPrice,\n                    item.priceToken,\n                    item.priceVersion,\n                    item.inventory,\n                    item.inventoryVersion,\n                    item.promotionID\n                )\n            );\n    }\n\n    /// @notice Update SKU using a system signature\n    /// @param skuId SKU ID\n    /// @param newPrice New unit price\n    /// @param priceVersion Price version\n    /// @param newInventory New inventory amount\n    /// @param inventoryVersion Inventory version\n    /// @param expireTime Signature expiration timestamp\n    /// @param updater Address authorized to perform the update\n    /// @param signature EIP-712 signature from system signer\n    function updateSkuWithSig(\n        uint256 skuId,\n        uint256 newPrice,\n        uint256 priceVersion,\n        uint256 newInventory,\n        uint256 inventoryVersion,\n        uint256 expireTime,\n        address updater,\n        bytes calldata signature\n    ) external {\n        require(msg.sender == updater, \"caller not authorized\");\n        require(block.timestamp <= expireTime, \"signature expired\");\n\n        // Construct EIP-712 struct hash\n        bytes32 structHash = keccak256(\n            abi.encode(\n                keccak256(\n                    \"UpdateSku(uint256 skuId,uint256 newPrice,uint256 priceVersion,uint256 newInventory,uint256 inventoryVersion,uint256 expireTime,address updater)\"\n                ),\n                skuId,\n                newPrice,\n                priceVersion,\n                newInventory,\n                inventoryVersion,\n                expireTime,\n                updater\n            )\n        );\n        bytes32 digest = _hashTypedDataV4(structHash);\n\n        // Verify signature and prevent replay\n        require(\n            ECDSA.recover(digest, signature) == systemSigner,\n            \"invalid signature\"\n        );\n        require(!usedHashes[digest], \"signature replayed\");\n        usedHashes[digest] = true;\n\n        SkuState storage s = skus[skuId];\n        require(priceVersion >= s.priceVersion, \"stale price version\");\n        require(\n            inventoryVersion >= s.inventoryVersion,\n            \"stale inventory version\"\n        );\n\n        // Update SKU\n        if (priceVersion > s.priceVersion) {\n            s.price = newPrice;\n            s.priceVersion = priceVersion;\n        }\n\n        if (inventoryVersion > s.inventoryVersion) {\n            s.inventory = newInventory;\n            s.inventoryVersion = inventoryVersion;\n        }\n\n        // Emit SKU update event\n        emit SkuUpdated(\n            skuId,\n            s.price,\n            s.priceVersion,\n            s.inventory,\n            s.inventoryVersion\n        );\n    }\n\n    /// @notice Get SKU state\n    /// @param skuId SKU ID\n    /// @return SkuState struct containing price, inventory, and version info\n    function getSku(uint256 skuId) external view returns (SkuState memory) {\n        return skus[skuId];\n    }\n\n    function approvePromotions(\n        uint256 _initialID,\n        address _promotionAddress\n    ) public onlyOwner {\n        uint256[] storage initialIDs = initialPromotionIDs;\n        address[] storage promotions = approvedPromotions;\n        uint256 length = initialIDs.length;\n\n        // Check for duplicate ID\n        for (uint256 i = 0; i < length; ) {\n            if (initialIDs[i] == _initialID) {\n                revert(\"Duplicate promotion ID\");\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Find insertion position (maintain ascending order)\n        uint256 insertIndex = length;\n        for (uint256 i = 0; i < length; ) {\n            if (initialIDs[i] > _initialID) {\n                insertIndex = i;\n                break;\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        // Expand arrays with dummy values\n        initialIDs.push(0);\n        promotions.push(address(0));\n\n        // Shift elements after insertion point\n        for (uint256 i = length; i > insertIndex; ) {\n            unchecked {\n                initialIDs[i] = initialIDs[i - 1];\n                promotions[i] = promotions[i - 1];\n                --i;\n            }\n        }\n\n        // Insert new values\n        initialIDs[insertIndex] = _initialID;\n        promotions[insertIndex] = _promotionAddress;\n    }\n}\n"
    },
    "contracts/Protocol Contracts/ReceiptManagerv4.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport \"@openzeppelin/contracts/utils/Base64.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror TokenDoesNotExist(); \n\nevent PromotionURIModified(uint256 promotionID, string nameRoot, string imageRoot, string imageFileType, bool appendParticipantNumber, bool dynamicImage);\nevent PromotionURICustomized(uint256 promotionID, string customURIRoot);\n\n\ncontract ReceiptManager is ERC721, IERC2981 {\n    using Strings for uint256;\n    struct TokenContext {\n        uint256 promotionID;\n        uint256 participantNumber;\n    }\n\n    mapping(uint256 => TokenContext) public tokenContexts;\n\n    address public contractOwner;\n    string public defaultURIRoot = \"amazon.com/\";\n    // Mappings to store receipts by token ID\n    mapping(uint256 => string) public customURIRoot; \n    mapping(uint256 => address) public royaltyReceiver; \n    uint256 public receiptIDs;\n    address[] public approvedCallers; \n    mapping(uint256 => uint16) public royaltyBasisPoints; \n    mapping(uint256  => address) public promotionOwners;\n\n    //Modifier to restrict usage to the approved callers\n    modifier onlyApprovedCallers() {\n        bool isApproved = false;\n        for (uint256 i = 0; i < approvedCallers.length; i++) {\n            if (approvedCallers[i] == msg.sender) {\n                isApproved = true;\n                break;\n            }\n        }\n        require(isApproved, \"Not an approved caller\");\n        _;\n    }\n\n    //Modifier to restrict usage to the contract owner\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"Not Authorized\");\n        _;\n    }\n\n    function setOwner(address payable newOwner) external onlyOwner {\n        contractOwner = payable(newOwner);\n    }\n\n    // Constructor to set the name and symbol of the ERC-721 token\n    constructor() ERC721(\"ReceiptNFT\", \"RPT\") {\n        contractOwner = msg.sender;\n    }\n\n    function setDefaultURIRoot(string calldata _newRoot) public onlyOwner  {\n        defaultURIRoot = _newRoot; \n    }\n\n    function addApprovedCaller(address _toApprove) external onlyOwner {\n        require(_toApprove != address(0), \"Cannot approve the zero address\");\n        \n        uint256 length = approvedCallers.length; // Cache the length in memory\n        for (uint256 i = 0; i < length; i++) {\n            require(approvedCallers[i] != _toApprove, \"Address is already approved\");\n        }\n\n        approvedCallers.push(_toApprove);\n    }\n\n\n    function removeApprovedCaller(address _toRemove) external onlyOwner {\n        for (uint256 i = 0; i < approvedCallers.length; i++) {\n            if (approvedCallers[i] == _toRemove) {\n                // Swap the element to be removed with the last element\n                approvedCallers[i] = approvedCallers[approvedCallers.length - 1];\n                // Remove the last element from the array\n                approvedCallers.pop();\n                return;\n            }\n        }\n        revert(\"Address not found in approved callers.\");\n    }\n\n    function getApprovedCallers() public view returns (address[] memory) {\n        return approvedCallers; \n    }\n\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view override(ERC721, IERC165) returns (bool) {\n        return super.supportsInterface(interfaceId);\n    }\n\n    function setRoyalty(uint256 promotionID, uint16 basisPoints) external onlyApprovedCallers {\n        require(basisPoints <=10000, \"Invalid\"); //royalty over 100%\n        royaltyBasisPoints[promotionID] = basisPoints; \n    }\n\n    function royaltyInfo(uint256 tokenId, uint256 salePrice) external view override returns (address receiver, uint256 royaltyAmount) {\n        // Return the royalty receiver and amount (calculated based on sale price)\n        uint256 promotionID = tokenContexts[uint256(tokenId)].promotionID; \n        if(promotionID == 0) {\n            return (address(0), 0);\n        }\n        receiver = promotionOwners[promotionID]; \n        royaltyAmount = (salePrice * royaltyBasisPoints[promotionID]) / 10000;\n        return (receiver, royaltyAmount);\n    }\n    \n    function mintReceipts(address to, uint256 promotionID, uint256 participantNumber, uint256 numTokens) external onlyApprovedCallers returns(uint256 ) {\n        uint256 initialID = receiptIDs +1; \n        for (uint256 i = 0; i < numTokens; i++) {\n            _mint(to, initialID + i);\n            tokenContexts[initialID+i] = TokenContext({\n                promotionID: promotionID,\n                participantNumber: participantNumber+i\n            });\n        }\n        receiptIDs += numTokens;  \n        return initialID;\n    }\n\n    function incrementReceiptIDs(uint256 numOrders) external onlyApprovedCallers returns(uint256) {\n        uint256 initialID = receiptIDs+1;\n        receiptIDs += numOrders;\n        return initialID; \n    }\n\n    function setPromotionOwner(uint256 promotionID, address promotionOwner) external onlyApprovedCallers {\n        promotionOwners[promotionID] = promotionOwner;                                                                                                                     \n    }\n\n    function modifyPromotionURI(uint256 promotionID, string calldata newURIRoot) external onlyApprovedCallers {\n        customURIRoot[promotionID] = newURIRoot; \n    } \n    \n    function tokenURI(uint256 tokenID) public view override returns (string memory) {\n        // Fetch promotionID and participantNumber from the Promotion Manager\n        uint256 promotionID = tokenContexts[uint256(tokenID)].promotionID; \n        uint256 participantNumber = tokenContexts[uint256(tokenID)].participantNumber; \n\n        // Check if the promotionID is valid\n        if (promotionID == 0) {\n            revert TokenDoesNotExist();\n        }\n\n        // Retrieve the custom URI root for the promotion\n        string memory uriRoot = customURIRoot[uint256(promotionID)];\n\n        // If no custom URI is set, use the default URI\n        if (bytes(uriRoot).length == 0) {\n            //return string(abi.encodePacked(defaultURIRoot, \"/\", uint2str(tokenID), \".json\"));\n            return string(abi.encodePacked(defaultURIRoot, \"/\", uint2str(participantNumber), \".json\")); \n        } else {\n            // Construct the custom URI using participantNumber\n            return string(abi.encodePacked(uriRoot, \"/\", uint2str(participantNumber), \".json\"));\n        }\n    }\n\n    // Convert uint256 to string\n    function uint2str(uint256 _i) internal pure returns (string memory) {\n        if (_i == 0) {\n            return \"0\";\n        }\n        uint256 j = _i;\n        uint256 len;\n        while (j != 0) {\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        while (_i != 0) {\n            bstr[--len] = bytes1(uint8(48 + (_i % 10)));\n            _i /= 10;\n        }\n        return string(bstr);\n    }\n}\n"
    },
    "contracts/Protocol Contracts/SatsumePromotion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.24;\n\nerror NotCustomURI();\nerror URIAlreadSet();\n\nimport \"../../interfaces/IReceiptManager.sol\";\nimport \"../../interfaces/IMerchantManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract SatsumePromotion {\n    uint256 public commission = 200; // basis points (divided by 10,000)\n    address public contractOwner;\n    address public receiptManagerAddress;\n    address public merchantManagerAddress;\n    mapping(address => uint256) public earnedCommissions;\n    mapping(address => uint256) public withdrawnCommissions;\n    mapping(address => mapping(address => bool)) public approvedOperators;\n    mapping(address => address[]) public arrayOfApprovedOperators;\n    mapping(address => uint256[]) public addressToPromotions;\n    mapping(uint256 => address) public unmintedReceiptsToOwners;\n    mapping(uint256 => uint256[]) public promotionIDToReceiptIDs;\n    mapping(uint256 => uint256) public receiptIDToPromotionID;\n    IReceiptManager public receiptManager;\n    IMerchantManager public merchantManager;\n\n    modifier onlyOwner() {\n        require(msg.sender == contractOwner, \"NotOwner\");\n        _;\n    }\n\n    modifier onlyReceiptManager() {\n        require(msg.sender == receiptManagerAddress, \"NotOwner\");\n        _;\n    }\n\n    modifier onlyApprovedOperators(address parentAccount) {\n        require(\n            merchantManager.isApprovedOperator(msg.sender, parentAccount),\n            \"Not Approved\"\n        );\n        _;\n    }\n\n    function joinPromotion(\n        uint256 promotionID,\n        uint256 numOrders,\n        uint256 orderID,\n        address buyer\n    ) external virtual;\n\n    function setPromotionURI(\n        uint256 promotionID,\n        string calldata newURIRoot\n    ) external virtual;\n\n    function setRoyalty(\n        uint256 promotionID,\n        uint256 royaltyBPs\n    ) external virtual;\n\n    function getPromotionReceipts(\n        uint256 promotionID\n    ) public view returns (uint256[] memory) {\n        uint256[] memory receipts = promotionIDToReceiptIDs[promotionID];\n        return (receipts);\n    }\n\n    function getNumberOfParticipants(\n        uint256 promotionID\n    ) public view returns (uint256) {\n        return promotionIDToReceiptIDs[promotionID].length;\n    }\n\n    function getPromotionsByOwner(\n        address promotionOwner\n    ) public view returns (uint256[] memory) {\n        return addressToPromotions[promotionOwner];\n    }\n\n    function setOwner(address payable newOwner) external onlyOwner {\n        contractOwner = payable(newOwner);\n    }\n\n    function setReceiptManager(\n        address _receiptManagerAddress\n    ) external onlyOwner {\n        receiptManagerAddress = _receiptManagerAddress;\n        receiptManager = IReceiptManager(_receiptManagerAddress);\n    }\n\n    function setPromotionsManager(\n        address _merchantManagerAddress\n    ) external onlyOwner {\n        merchantManagerAddress = _merchantManagerAddress;\n        merchantManager = IMerchantManager(_merchantManagerAddress);\n    }\n\n    function withdrawCommissions(address erc20Token) external onlyOwner {\n        IERC20(erc20Token).transfer(\n            contractOwner,\n            earnedCommissions[erc20Token] - withdrawnCommissions[erc20Token]\n        );\n        withdrawnCommissions[erc20Token] = earnedCommissions[erc20Token];\n    }\n\n    function setCommission(uint256 newCommissionBPs) external onlyOwner {\n        require(newCommissionBPs <= 10000, \"Inv\");\n        commission = newCommissionBPs;\n    }\n}\n"
    },
    "contracts/SeedManagerv2.sol": {
      "content": "// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n// event SeedCreated(address indexed owner, uint256 indexed promotionID, address indexed erc20Token, uint256 seeds, uint256 maxSlots, uint256 sharedAmount, uint256 endTime, bool mintsNFTs);\n// event SeedCancelled(uint256 indexed promotionID, uint256 numberOfParticipants); \n// event SeedReceiptsMinted(address indexed joiner, uint256 promotionID, uint256 firstParticipantNumber, uint256  firstTokenID, bool seeded, uint256 numTickets);\n// event SeedReceiptRedeemed(uint256 indexed tokenID, uint256 indexed promotionID, uint256 redeemedAmount); \n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv9.sol\";\n\n// contract SeedManager is PromotionManager {\n//     struct Seed {\n//         uint256 numSeeds;\n//         uint256 maxSlots;\n//         uint256 price;\n//         uint256 endTime; \n//         uint256 sharedAmount;\n//         address owner;\n//         uint256 earnedAmount;\n//         address erc20Token;\n//         bool mintsNFTs; \n//     }\n\n//     struct SeedReceipt {\n//         uint256 seedID;\n//         uint256 redeemedAmount;\n//         bool seeded;\n//     }\n\n\n//     uint256 public seedIDs = 100; //type(uint256).max / 10 + 1;\n//     uint256 public constant MINIMUM_DURATION = 900; \n//     mapping(uint256 => Seed) public Seeds;\n//     mapping(uint256 => SeedReceipt) public SeedReceipts;\n\n//     constructor(address _receiptManagerAddress, address _promotionsManagerAddress) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManager = IReceiptManager(_receiptManagerAddress); \n//         receiptManagerAddress = _receiptManagerAddress;\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function createSeed(uint256 _seeds, uint256 _maxSlots, uint256 _price, uint256 _duration, uint256 _sharedAmount, address _owner, address _erc20Token, bool _mintsNFTs) public onlyApprovedOperators(_owner)  {\n//         if (_seeds >= _maxSlots || _sharedAmount >= _price || _duration < MINIMUM_DURATION || _maxSlots <= 1 || _seeds ==0 || _maxSlots <=1)  {\n//             revert InvalidConfig();\n//         }\n\n//         // Initialize a new seed contract and store it in storage\n//         Seed storage seed = Seeds[seedIDs];\n//         seed.numSeeds = _seeds;\n//         seed.maxSlots = _maxSlots;\n//         seed.price = _price;\n//         seed.endTime = block.timestamp + _duration;\n//         seed.sharedAmount = _sharedAmount;\n//         seed.erc20Token = _erc20Token; \n//         seed.owner = _owner; \n//         seed.mintsNFTs = _mintsNFTs; \n\n//         emit SeedCreated(_owner, seedIDs, _erc20Token, _seeds, _maxSlots, _sharedAmount, _duration + block.timestamp, _mintsNFTs);\n//         addressToPromotions[_owner].push(seedIDs);\n//         if (_mintsNFTs) {\n//             receiptManager.setPromotionOwner(seedIDs, _owner); \n//         }\n//         seedIDs += 1; \n//     }\n\n    \n\n//      function joinSeed(uint256 seedID, uint256 numOrders) public {\n//         // Load seed into memory for efficient access\n//         Seed memory seed = Seeds[seedID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[seedID].length;\n\n//         if (numParticipants >= seed.maxSlots ||  seed.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if (numParticipants + numOrders > seed.maxSlots) {\n//             numOrders = seed.maxSlots - numParticipants; \n//         }\n\n//         // Determine seeded and unseeded participants\n//         uint256 availableSeededSlots = seed.numSeeds > numParticipants\n//             ? seed.numSeeds - numParticipants\n//             : 0;\n//         uint256 seededParticipants = numOrders > availableSeededSlots\n//             ? availableSeededSlots\n//             : numOrders;\n//         uint256 unseededParticipants = numOrders - seededParticipants;\n\n//         uint256 initialReceiptID;\n//         if (seed.mintsNFTs) {\n//             // Mint receipts and log details\n//             initialReceiptID = receiptManager.mintReceipts(\n//                 msg.sender,\n//                 seedID, \n//                 numParticipants+1, \n//                 numOrders\n//             );\n//         } else {\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n//         }\n\n//         if (seededParticipants != 0) {\n//             emit SeedReceiptsMinted(\n//                 msg.sender,\n//                 seedID,\n//                 numParticipants + 1,\n//                 initialReceiptID,\n//                 true,\n//                 seededParticipants\n//             );\n//         }\n//         if (unseededParticipants != 0) {\n//             emit SeedReceiptsMinted(\n//                 msg.sender,\n//                 seedID,\n//                 numParticipants + 1 + seededParticipants,\n//                 initialReceiptID + seededParticipants,\n//                 false,\n//                 unseededParticipants\n//             );\n//         }\n\n//         for (uint256 i = 0; i < numOrders; ++i) {\n//             uint256 receiptID = initialReceiptID + i;\n\n//             // Populate SeedReceipts\n//             SeedReceipts[receiptID] = SeedReceipt({\n//                 seedID: seedID,\n//                 redeemedAmount:  0, \n//                 seeded: (i < seededParticipants)\n//             });\n\n//             // Directly push to storage array\n//             promotionIDToReceiptIDs[seedID].push(receiptID);\n\n//             // Handle unminted receipt ownership\n//             if (!seed.mintsNFTs) {\n//                 unmintedReceiptsToOwners[receiptID] = msg.sender;\n//             }\n//         }\n\n//         // Calculate payment amounts\n//         uint256 sharedAmount = seed.sharedAmount * unseededParticipants;\n//         uint256 amountToSeller = (seededParticipants * seed.price) +\n//             (unseededParticipants * (seed.price - seed.sharedAmount));\n\n//         // Calculate total commission and breakdown\n//         uint256 totalCommission = (seed.price * numOrders * commission) / 10000;\n//         uint256 commissionOnSeller = (totalCommission * amountToSeller) /\n//             (sharedAmount + amountToSeller);\n\n//         if (sharedAmount > 0) {\n//             uint256 commissionOnShared = totalCommission - commissionOnSeller;\n\n//             // Update balances for shared participants\n//             Seeds[seedID].earnedAmount += sharedAmount - commissionOnShared;\n//         }\n\n//         // Update earned commissions\n//         earnedCommissions[seed.erc20Token] += totalCommission;\n\n//         // Perform ERC20 transfers (unchanged)\n//         IERC20(seed.erc20Token).transferFrom(\n//             msg.sender,\n//             address(this),\n//             sharedAmount + amountToSeller\n//         );\n//         console.log(sharedAmount + amountToSeller);\n\n//         IERC20(seed.erc20Token).transfer(\n//             promotionsManager.getReceiverAddress(seed.owner, seed.erc20Token),\n//             amountToSeller - commissionOnSeller\n//         );\n//         console.log(amountToSeller - commissionOnSeller);\n//     }\n\n//     // function seedRedeemableAmount(uint256 seedID) public view returns (uint256) {\n//     //     Seed storage seed = Seeds[seedID];\n//     //     return seed.earnedAmount/seed.numSeeds; \n//     // }\n\n//     function redeemSeedReceipts(uint256[] calldata receiptIDs) external {\n//         uint256 redeemableAmount; \n//         address erc20Token = Seeds[SeedReceipts[receiptIDs[0]].seedID].erc20Token; //erc20 address of the first token\n//         for(uint256 i =0; i < receiptIDs.length; i++) {\n//             SeedReceipt memory seedReceipt = SeedReceipts[receiptIDs[i]];\n//             Seed storage seed = Seeds[seedReceipt.seedID];\n//             require(erc20Token == seed.erc20Token, \"Invalid\"); \n//             if(seed.mintsNFTs) {\n//                 require((receiptManager.ownerOf(receiptIDs[i]) == msg.sender), \"Not owned\");\n//             }\n//             else {\n//                 require((unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender), \"Not owned\");\n//             }\n//             if(seedReceipt.seeded == true) {\n//                 uint256 seedRedeemable = seed.earnedAmount/seed.numSeeds;\n//                 if(seedReceipt.redeemedAmount < seedRedeemable) {\n//                     uint256 additionalRedeemable = seedRedeemable - seedReceipt.redeemedAmount;\n//                     SeedReceipts[receiptIDs[i]].redeemedAmount = seedRedeemable;\n//                     redeemableAmount += additionalRedeemable; \n//                     emit SeedReceiptRedeemed(receiptIDs[i], seedReceipt.seedID, additionalRedeemable);\n//                 }\n//             }\n//         }\n//         if(redeemableAmount !=0) {\n//             IERC20(erc20Token).transfer(\n//                 msg.sender,\n//                 redeemableAmount\n//             );\n//         }\n//     }\n\n\n//     function cancelSeed(uint256 seedID) public {\n//         Seed storage seed = Seeds[seedID];\n//         if (!promotionsManager.isApprovedOperator(msg.sender, seed.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (seed.endTime > block.timestamp && promotionIDToReceiptIDs[seedID].length < seed.maxSlots) {\n//             seed.maxSlots = promotionIDToReceiptIDs[seedID].length;\n//             emit SeedCancelled(seedID, promotionIDToReceiptIDs[seedID].length);\n//         }\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Seed storage seed = Seeds[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, seed.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Seed storage seed =Seeds[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, seed.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!seed.mintsNFTs) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n// }"
    },
    "contracts/SnowballManagerv3.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Promotion_Expired();\n// error InvalidConfig(); \n// error NotApproved();\n\n// event SnowballCreated(address indexed owner, uint256 indexed snowballID, address indexed erc20Token, uint256 maxSlots, uint256 endTime, uint256[] thresholds, uint256[] cohortPrices, bool mintsNFTS);\n// event SnowballCustodyRedeemed(uint256 indexed snowballID, uint256 redeemedAmount); \n// event SnowballCancelled(uint256 indexed snowballID, uint256 numberOfParticipants);\n// event SnowballReceiptRedeemed(uint256 indexed tokenID, uint256 indexed snowballID, uint256 redeemedAmount); \n// event SnowballReceiptsMinted(address indexed joiner, uint256 indexed snowballID, uint256 firstParticipantNumber, uint256 firstTokenID, uint256 pricePaid, uint256 numTickets);\n\n// import \"hardhat/console.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import \"./PromotionManagerv11.sol\";\n\n// contract SnowballManager is PromotionManager {\n//     struct Snowball {\n//         uint256 maxSlots; \n//         uint256 endTime;\n//         uint256[] thresholds;\n//         uint256[] cohortPrices; \n//         address owner; \n//         bool returnedCustody; \n//         address erc20Token; \n//         bool mintReceipts; \n//     }\n\n//     struct SnowballReceipt {\n//         uint256 snowballID;\n//         uint256 effectivePricePaid;\n//     }\n\n    \n\n//     uint256 public snowballIDs = 1;\n    \n//     uint256 public constant MINIMUM_DURATION = 900; \n\n//     mapping(uint256 => Snowball) public Snowballs;\n//     mapping(uint256 => SnowballReceipt) public SnowballReceipts;\n    \n    \n\n//     constructor(address _receiptManagerAddress, address _promotionsManagerAddress) { \n//         contractOwner = msg.sender; // Set the owner to the contract deployer\n//         receiptManager = IReceiptManager(_receiptManagerAddress); \n//         receiptManagerAddress = _receiptManagerAddress;\n//         promotionsManagerAddress = _promotionsManagerAddress;  \n//         promotionsManager = IPromotionsManager(_promotionsManagerAddress);\n//     }\n\n//     function createSnowball(\n//         uint256 _maxSlots,\n//         uint256 _duration,\n//         uint256[] calldata _cohortPrices,\n//         uint256[] calldata _thresholds,\n//         address _owner,\n//         address _erc20Token,\n//         bool _mintReceipts\n//     ) public {\n//         if (_cohortPrices.length -1 != _thresholds.length || \n//             _cohortPrices.length < 2 || \n//             _cohortPrices.length > 5 || \n//             _thresholds[0] <=1 || \n//             _thresholds[_thresholds.length - 1]> _maxSlots || \n//             _duration < MINIMUM_DURATION ) {\n//             revert InvalidConfig(); \n//         }\n//         if (!promotionsManager.isApprovedOperator(msg.sender, _owner)) {\n//             revert NotApproved(); \n//         }\n\n//         // Check that _cohortPrices is strictly decreasing, and all values are nonzero\n//         for (uint256 i = 0; i < _cohortPrices.length; i++) {\n//             if (_cohortPrices[i] == 0) {\n//                 revert InvalidConfig(); // Reject zero values in _cohortPrices\n//             }\n//             if (i != 0) {\n//                 if (_cohortPrices[i] >= _cohortPrices[i - 1]) {\n//                     revert InvalidConfig(); // Ensure strictly decreasing order\n//                 }\n//             }\n//         }\n\n//         // Check that _thresholds is strictly increasing\n//         if (_thresholds.length > 1) {\n//             for (uint256 i = 1; i < _thresholds.length; i++) {\n//                 if (_thresholds[i] <= _thresholds[i - 1]) {\n//                     revert InvalidConfig(); // Ensure strictly increasing order\n//                 }\n//             }\n//         }\n\n\n//         // Initialize a new snowball contract and store it in storage\n//         Snowball storage snowball = Snowballs[snowballIDs];\n//         snowball.maxSlots = _maxSlots;\n//         snowball.thresholds = _thresholds;\n//         snowball.owner = payable(_owner);\n//         snowball.endTime = block.timestamp +_duration;\n//         snowball.cohortPrices = _cohortPrices;\n//         snowball.erc20Token = _erc20Token;\n//         snowball.mintReceipts = _mintReceipts;  \n\n//         emit SnowballCreated(_owner, snowballIDs, _erc20Token, _maxSlots, _duration + block.timestamp, _thresholds, _cohortPrices, _mintReceipts);\n//         addressToPromotions[_owner].push(snowballIDs);\n//         if (_mintReceipts) {\n//             receiptManager.setPromotionOwner(snowballIDs, _owner); \n//         }\n//         snowballIDs += 1; \n//     }\n\n//     function joinSnowball(uint256 snowballID, uint256 numOrders) public {\n//         Snowball storage snowball = Snowballs[snowballID];\n//         uint256 numParticipants = promotionIDToReceiptIDs[snowballID].length;\n//         address erc20Token = snowball.erc20Token;\n\n//         if (numParticipants >= snowball.maxSlots ||  snowball.endTime < block.timestamp) {\n//             revert Promotion_Expired();\n//         } \n//         // Adjust order number if exceeding max slots\n//         else if (numParticipants + numOrders > snowball.maxSlots) {\n//             numOrders = snowball.maxSlots - numParticipants; \n//         }\n\n//         uint256 newPrice = snowball.cohortPrices[0]; // Set to price of first cohort\n//         for (uint256 i = 0; i < snowball.thresholds.length; i++) {\n//             if (numParticipants + numOrders >= snowball.thresholds[i]) {\n//                 newPrice = snowball.cohortPrices[i + 1];\n//             } else {\n//                 break;\n//             }\n//         }\n\n//         uint256 minPrice = snowball.cohortPrices[snowball.cohortPrices.length - 1];\n//         // Calculate commission\n//         uint256 commissionAmount = (numOrders * minPrice) * commission / 10000;\n\n//         // Perform a single transfer for efficiency\n//         IERC20(erc20Token).transferFrom(msg.sender, address(this), newPrice * numOrders);\n\n//         // Update commissions and pay the owner\n//         earnedCommissions[erc20Token] += commissionAmount;\n//         uint256 ownerPayment = numOrders * minPrice - commissionAmount;\n//         IERC20(erc20Token).transfer(promotionsManager.getReceiverAddress(snowball.owner, snowball.erc20Token), ownerPayment);\n\n//         uint256 initialReceiptID;\n//         if (snowball.mintReceipts) {\n//             // Mint the receipts if required\n//             initialReceiptID = receiptManager.mintReceipts(msg.sender, snowballID, numParticipants + 1, numOrders);\n            \n//             // Populate the SnowballReceipts and promotionIDToReceiptIDs arrays\n//             for (uint256 i = 0; i < numOrders; i++) {\n//                 uint256 currentReceiptID = initialReceiptID + i;\n//                 SnowballReceipts[currentReceiptID] = SnowballReceipt({\n//                     snowballID: snowballID,\n//                     effectivePricePaid: newPrice\n//                 });\n\n//                 promotionIDToReceiptIDs[snowballID].push(currentReceiptID); \n//             }\n//         } else {\n//             // Handle the case when minting is not required\n//             initialReceiptID = receiptManager.incrementReceiptIDs(numOrders);\n\n//             // Only handle unminted receipts\n//             for (uint256 i = 0; i < numOrders; i++) {\n//                 uint256 currentReceiptID = initialReceiptID + i;\n//                 SnowballReceipts[currentReceiptID] = SnowballReceipt({\n//                     snowballID: snowballID,\n//                     effectivePricePaid: newPrice\n//                 });\n//                 promotionIDToReceiptIDs[snowballID].push(currentReceiptID); // Use push to add elements\n//                 // Only map unminted receipts to owners when minting is disabled\n//                 unmintedReceiptsToOwners[currentReceiptID] = msg.sender;\n//             }\n//         }\n\n//         emit SnowballReceiptsMinted(\n//             msg.sender, \n//             snowballID, \n//             numParticipants + 1, \n//             initialReceiptID,\n//             newPrice, \n//             numOrders\n//         );\n//     }\n\n\n//     function redeemSnowballReceipts(uint256[] calldata receiptIDs) external {\n//         uint256 redeemableAmount; \n//         address erc20Token = Snowballs[SnowballReceipts[receiptIDs[0]].snowballID].erc20Token; //erc20 address of the first token\n//         for(uint256 i =0; i < receiptIDs.length; i++) {\n//             SnowballReceipt memory snowballReceipt = SnowballReceipts[receiptIDs[i]];\n//             Snowball storage snowball = Snowballs[snowballReceipt.snowballID];\n//             require(erc20Token == snowball.erc20Token, \"Invalid\"); \n//             if(snowball.mintReceipts) {\n//                 require(receiptManager.ownerOf(receiptIDs[i]) == msg.sender, \"Not owned\");\n//             }\n//             else {\n//                 require(unmintedReceiptsToOwners[receiptIDs[i]] == msg.sender, \"Not owned\");\n//             }\n//             uint256 snowballPrice = getSnowballPrice(snowballReceipt.snowballID);\n//             if (snowballReceipt.effectivePricePaid > snowballPrice) {\n//                 redeemableAmount += (snowballReceipt.effectivePricePaid - snowballPrice);\n//                 SnowballReceipts[receiptIDs[i]].effectivePricePaid = snowballPrice;\n//                 emit SnowballReceiptRedeemed(receiptIDs[i], snowballReceipt.snowballID, snowballReceipt.effectivePricePaid - snowballPrice);\n//             }\n//         }\n//         if(redeemableAmount !=0) {\n//             IERC20(erc20Token).transfer(\n//                 msg.sender,\n//                 redeemableAmount\n//             );\n//         }\n//     }\n\n//     function getSnowballPrice(uint256 snowballID) public view returns(uint256) {\n//         Snowball storage snowball = Snowballs[snowballID]; \n//         uint256 numParticipants = promotionIDToReceiptIDs[snowballID].length;\n//         console.log(numParticipants);\n//         if(snowball.maxSlots == numParticipants) {\n//             /*\n//             In this case, the price must be that of the last cohort. This specific \n//             check method is needed as cancelling a Snowball early sets maxSlots to numParticipants, \n//             thus looping through thresholds will not produce the intended result of \n//             returning the lowest possible price. \n//             */\n//             return snowball.cohortPrices[snowball.cohortPrices.length-1]; \n//         }\n//         uint256 updatedPrice = snowball.cohortPrices[0]; //Set to price of first cohort\n//         console.log(updatedPrice);\n//         uint256 thresholdsLength = snowball.thresholds.length;\n//         for (uint256 i = 0; i < thresholdsLength; i++) {\n//             if(numParticipants >= snowball.thresholds[i]) {\n//                 updatedPrice = snowball.cohortPrices[i+1];\n//                 console.log(updatedPrice);\n//             }\n//             else{\n//                 console.log(updatedPrice);\n//                 console.log(\"br\");\n//                 break;\n//             } \n//         }\n//         return updatedPrice; \n//     }\n\n//     function retrieveExcessSnowballCustody(uint256 snowballID) public {\n//         Snowball storage snowball = Snowballs[snowballID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, snowball.owner)) {\n//             revert NotApproved(); \n//         }\n//         uint256 numParticipants = promotionIDToReceiptIDs[snowballID].length;\n//         //Check that the snowball has ended\n//         require((block.timestamp > snowball.endTime || snowball.maxSlots == numParticipants) && !snowball.returnedCustody, \"Ineligible\");\n//         // Caculate excess custody\n//         uint256 excessCustody = calculateExcessSnowballCustody(snowballID);        \n//         //Return excess if the snowball has ended\n//         uint256 commissionAmount = excessCustody*commission/10000; //Commission is on all proceeds to sellers. \n//         earnedCommissions[snowball.erc20Token] += commissionAmount;\n//         IERC20(snowball.erc20Token).transfer(promotionsManager.getReceiverAddress(snowball.owner, snowball.erc20Token), excessCustody-commissionAmount); \n//         snowball.returnedCustody = true; \n//         emit SnowballCustodyRedeemed(snowballID, excessCustody);\n//     }\n    \n\n//     function calculateExcessSnowballCustody(uint256 snowballID) public view returns(uint256) {\n//         Snowball storage snowball = Snowballs[snowballID]; \n//         uint256 numParticipants = promotionIDToReceiptIDs[snowballID].length;\n//         console.log(numParticipants);\n//         if ((snowball.endTime > block.timestamp && snowball.maxSlots > numParticipants) || snowball.returnedCustody) {\n//             return 0; \n//         }\n//         uint256 currentPrice = getSnowballPrice(snowballID);\n//         console.log(currentPrice);\n//         console.log(snowball.cohortPrices[snowball.cohortPrices.length-1]);\n//         uint256 excessCustody = (currentPrice-snowball.cohortPrices[snowball.cohortPrices.length-1]) * numParticipants;\n//         return  excessCustody;\n//     }\n\n//     function setRoyalty(uint256 promotionID, uint256 basisPoints) external override {\n//         Snowball storage snowball = Snowballs[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, snowball.owner)) {\n//             revert NotApproved(); \n//         }\n//         receiptManager.setRoyalty(promotionID, basisPoints);\n//     }\n\n//     function setPromotionURI(uint256 promotionID, string calldata newURIRoot) external override {\n//         Snowball storage snowball =Snowballs[promotionID]; \n//         if (!promotionsManager.isApprovedOperator(msg.sender, snowball.owner)) {\n//             revert NotApproved(); \n//         }\n//         if (!snowball.mintReceipts) {\n//             revert NotCustomURI(); \n//         }\n//         if(bytes(receiptManager.customURIRoot(promotionID)).length != 0) {\n//             revert URIAlreadSet();\n//         }\n//         receiptManager.modifyPromotionURI(promotionID, newURIRoot);\n//     }\n\n//     // Function to get all properties of a Snowball struct, including arrays\n//     function getSnowball(uint256 snowballID) \n//         public \n//         view \n//         returns (\n//             uint256 maxSlots,\n//             uint256 endTime,\n//             uint256[] memory thresholds,\n//             uint256[] memory cohortPrices,\n//             address owner,\n//             bool returnedCustody,\n//             address erc20Token,\n//             bool mintReceipts\n//         ) \n//     {\n//         Snowball storage snowball = Snowballs[snowballID];\n//         return (\n//             snowball.maxSlots,\n//             snowball.endTime,\n//             snowball.thresholds,\n//             snowball.cohortPrices,\n//             snowball.owner,\n//             snowball.returnedCustody,\n//             snowball.erc20Token,\n//             snowball.mintReceipts\n//         );\n//     }\n\n//     function cancelSnowball(uint256 snowballID) public {\n//         Snowball storage snowball =Snowballs[snowballID]; \n//         uint256 numParticipants = promotionIDToReceiptIDs[snowballID].length;\n//         if (!promotionsManager.isApprovedOperator(msg.sender, snowball.owner)) {\n//             revert NotApproved(); \n//         }\n//         if(snowball.endTime > block.timestamp && numParticipants < snowball.maxSlots) {\n//             snowball.maxSlots = numParticipants;\n//             emit SnowballCancelled(snowballID, numParticipants);\n//         }\n//     }\n// }"
    },
    "contracts/Snowballv4.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.8.24;\n\n// error Snowball_InsufficientFund();\n// error Snowball_Expired();\n// error NoFundsToDistribute();\n// error InvalidConfig(); \n// error TransferFail();\n// error NotApproved();\n// event SnowballCreated(uint256 snowballId);\n\n// import \"hardhat/console.sol\";\n// import \"@openzeppelin/contracts/utils/math/Math.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\n// import \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n// import \"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\";\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// interface ISnowballWorkingCapital {\n//     function deleteAllSnowballRequests(uint256 snowballID) external;\n// }\n\n// interface ILoanFactory {\n//     function Loans(uint256) external view returns (uint256, uint256, uint256, address);\n//     function burnToken(uint256 tokenID) external;\n//     function UpdateLoanAmount(uint256 loanID, uint256 subtractAmount) external;\n// }\n\n// contract Snowball {\n//     // Type Declarations\n\n//     /* Contract Variables */\n//     struct snowballContract {\n//         uint256 id;\n//         uint256 maxSlots;\n//         uint256 price;\n//         uint256 duration;\n//         uint256 totalDebt;\n//         address payable owner;\n//         uint256 startTime;\n//         uint256 numParticipants;\n//         uint256 balance;\n//         mapping(uint256 => mapping(address => uint256)) cohorts_tickets;\n//         mapping(uint256 => address[]) cohorts;\n//         uint256[] cohortTicketAmounts;\n//         uint256[] cohortPrices;\n//         uint256[] payouts;\n//         uint256[] thresholds;\n//     }\n    \n//     /* Snowball State Variables */\n//     uint256 public ID = 0; \n//     uint256 public constant MINIMUM_PRICE = 5 * 10 ** 6;\n//     uint256 public constant MINIMUM_DURATION = 900; \n//     uint256 public commission = 25; // basis points (divided by 10,000)\n//     uint256 public failedTransferBalance;\n//     address payable public bank;\n//     address public owner; \n//     address public s_forwarderAddress; \n//     address public WCProviderAddress; \n//     uint256[] public activeSnowballContractsByID;\n//     mapping(uint256 => snowballContract) public s_idToSnowball;\n//     mapping (uint256 => uint256[]) public snowballIDToLoanIDPerTranche; //The loan IDs for the i-indexed loan tranche are in i-th index of the array. \n//     mapping (address => uint256[]) public addressToSnowballIDs;\n\n    \n\n\n//     /* State Variables */\n//     VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    \n//     uint16 private constant REQUEST_CONFIRMATIONS = 3;\n//     uint32 private immutable i_callbackGasLimit;\n//     uint32 private constant NUM_WORDS = 1;\n//     uint64 private immutable i_subscriptionId;\n//     uint256 private s_lastTimeStamp;\n//     uint256 private immutable i_interval;\n//     bytes32 private immutable i_gasLane;\n//     ISnowballWorkingCapital public snowballWorkingCapital; \n//     ILoanFactory public loanFactory; \n//     IERC20 public usdcToken; // Declare the USDC token contract\n    \n\n//     constructor(address _usdcToken) {\n//         owner = msg.sender; // Set the owner to the contract deployer\n//         bank = payable(owner);\n//         usdcToken = IERC20(_usdcToken); // Initialize the USDC token contract\n//     }\n\n//     modifier onlyOwner() {\n//         require(msg.sender == owner, \"NotOwner\");\n//         _;\n//     }\n\n//     function setBank(address payable newBank) external onlyOwner {\n//         bank = payable(newBank);\n//     }\n\n//     function createSnowball(\n//         uint256 _maxSlots,\n//         uint256 _price,\n//         uint256 _duration,\n//         uint256[] memory _payouts,\n//         uint256[] memory _thresholds\n//     ) public payable returns (uint256) {\n//         // Ensure the lengths of the pay and thresholds arrays are equal\n\n\n//         if (_payouts.length != _thresholds.length || _payouts.length < 1 || _payouts.length > 5 || _thresholds[0] <=1 || _thresholds[_thresholds.length - 1]> _maxSlots || _duration <= MINIMUM_DURATION) {\n//             revert InvalidConfig(); \n//         }\n\n//         // Ensure the sum of the payouts is less than the price. Cannot be combined with price gap logic due to potential underflow. \n//         // Also check that payouts of zero are prohibited\n//         uint256 sumPayouts = 0;\n//         uint256[] memory pay = new uint256[](_payouts.length);\n//         for (uint256 i = 0; i < _payouts.length; i++) {\n//             sumPayouts += _payouts[i];\n//             pay[i] = _payouts[i];\n//             console.log(\"_payouts[i]:\", _payouts[i]);\n//             console.log(\"pay[i]:\", pay[i]);\n//             if(pay[i] == 0) {\n//                 revert InvalidConfig();\n//             }\n//         }\n\n//         if(sumPayouts > _price) {\n//             revert InvalidConfig(); \n//         }\n\n//         // Ensure the difference between the price and the sum of payouts is greater than the minimum price\n//         if(_price - sumPayouts < MINIMUM_PRICE) {\n//             revert InvalidConfig(); \n//         }\n\n//         // Ensure the values in the thresholds array are unique and increasing\n//         for (uint256 i = 1; i < _thresholds.length; i++) {\n//             if(_thresholds[i] < _thresholds[i - 1]) {\n//                 revert InvalidConfig(); \n//             }\n//         }\n\n//         uint256[] memory _cohortPrices = new uint256[](_payouts.length + 1);\n\n//         // Get the possible prices paid for each cohort\n//         _cohortPrices[0] = _price; \n//         for (uint256 i = 1; i < _cohortPrices.length; i++) {\n//             _cohortPrices[i] = _cohortPrices[i-1] - pay[i-1]; \n//         }\n\n//         // Initialize a new snowball contract and store it in storage\n//         snowballContract storage newSnowball = s_idToSnowball[ID];\n//         newSnowball.id = ID;\n//         newSnowball.maxSlots = _maxSlots;\n//         newSnowball.price = _price;\n//         newSnowball.duration = _duration;\n//         newSnowball.payouts = pay;\n//         newSnowball.thresholds = _thresholds;\n//         newSnowball.owner = payable(msg.sender);\n//         newSnowball.startTime = block.timestamp;\n//         newSnowball.numParticipants = 0;\n//         newSnowball.balance = 0;\n//         newSnowball.cohortPrices = _cohortPrices;\n//         newSnowball.totalDebt = 0; \n\n//         // Initialize cohortTicketAmounts with zeros\n//         uint256[] memory _cohortTicketAmounts = new uint256[](_cohortPrices.length);\n//         for (uint256 i = 0; i < _cohortTicketAmounts.length; i++) {\n//             _cohortTicketAmounts[i] = 0;\n//         }\n//         newSnowball.cohortTicketAmounts = _cohortTicketAmounts;\n\n//         activeSnowballContractsByID.push(ID); \n//         addressToSnowballIDs[msg.sender].push(ID);\n//         emit SnowballCreated(ID);\n//         ID += 1; \n//         return ID;\n//     }\n\n\n//     function getSnowball(\n//         uint256 snowballID\n//     )\n//         public\n//         view\n//         returns (\n//             uint256 maxSlots,\n//             uint256 price,\n//             uint256 duration,\n//             uint256[] memory payouts,\n//             uint256[] memory thresholds,\n//             address snowballOwner, \n//             uint256 startTime,\n//             uint256 balance,\n//             uint256 numParticipants,\n//             uint256[] memory cohortPrices\n//         )\n//     {\n//         snowballContract storage snowball = s_idToSnowball[snowballID];\n//         return (\n//             snowball.maxSlots,\n//             snowball.price,\n//             snowball.duration,\n//             snowball.payouts,\n//             snowball.thresholds,\n//             snowball.owner,\n//             snowball.startTime,\n//             snowball.balance,\n//             snowball.numParticipants,\n//             snowball.cohortPrices\n//         );\n//     }\n\n//     // Additional function to get cohort data if needed\n//     function getCohortData(uint256 snowballID, uint256 key) public view returns (address[] memory) {\n//         return (s_idToSnowball[snowballID].cohorts[key]);\n//     }\n\n//     function joinContract(uint256 snowballID, uint256 tickets) public  {\n//         // Load necessary variables from storage to memory for gas efficiency\n//         uint256 numParticipants = s_idToSnowball[snowballID].numParticipants;\n//         uint256[] memory thresholds = s_idToSnowball[snowballID].thresholds;\n//         uint256 price = s_idToSnowball[snowballID].price;\n//         uint256[] memory cohortPrices = s_idToSnowball[snowballID].cohortPrices;\n\n//         // Check if the contract is still valid\n//         if (block.timestamp - s_idToSnowball[snowballID].duration > s_idToSnowball[snowballID].startTime || numParticipants == s_idToSnowball[snowballID].maxSlots) {\n//             revert Snowball_Expired();\n//         }\n\n//         //Find the updated prices and tickets possible\n//         //uint256 maxTotalTickets = Math.min(s_idToSnowball[snowballID].maxSlots, numParticipants + tickets);\n//         uint256 additionalTickets = (Math.min(s_idToSnowball[snowballID].maxSlots - numParticipants, tickets)); \n//         uint256 cohort;\n//         for (cohort = 0; cohort < thresholds.length; cohort++) {\n//             if (thresholds[cohort] > (numParticipants + additionalTickets)) {\n//                 break;\n//             }\n//         }\n//         price = cohortPrices[cohort];\n\n//         //Update Snowball State\n//         if (s_idToSnowball[snowballID].price != price) {\n//             s_idToSnowball[snowballID].price = price;\n//         }\n//         s_idToSnowball[snowballID].numParticipants += additionalTickets;\n//         s_idToSnowball[snowballID].balance += additionalTickets * (price - cohortPrices[cohortPrices.length - 1]);\n\n\n//         // Add the purchaser to the cohorts mapping\n//         if (s_idToSnowball[snowballID].cohorts_tickets[cohort][msg.sender] == 0) {\n//             s_idToSnowball[snowballID].cohorts_tickets[cohort][msg.sender] += additionalTickets;\n//             s_idToSnowball[snowballID].cohorts[cohort].push(msg.sender);\n//             s_idToSnowball[snowballID].cohortTicketAmounts[cohort] += additionalTickets;\n//         } else {\n//             s_idToSnowball[snowballID].cohorts_tickets[cohort][msg.sender] += additionalTickets;\n//             s_idToSnowball[snowballID].cohortTicketAmounts[cohort] += additionalTickets;\n//         }\n\n//         // Calculate the commissions and transfer to bank\n//         uint256 remainingAmount = additionalTickets * cohortPrices[cohortPrices.length - 1]; //Amount available for snowball owner and debt holders. Not in custody\n//         console.log(remainingAmount);\n//         uint256 commissionAmount = calculateCommission(remainingAmount);\n//         console.log(commissionAmount);\n//         remainingAmount -= commissionAmount;\n//         console.log(remainingAmount);\n//         bool success = usdcToken.transferFrom(msg.sender, bank,  commissionAmount);\n//         if (!success) {\n//             console.log(\"f1\");\n//             revert TransferFail();\n//         }\n//         success = usdcToken.transferFrom(msg.sender, address(this), (additionalTickets * (price - cohortPrices[cohortPrices.length - 1])));\n//         if (!success) {\n//             console.log(\"f1\");\n//             revert TransferFail();\n//         }\n\n//         // Pay the debt holders if any\n//         if (s_idToSnowball[snowballID].totalDebt > 0) {\n//             remainingAmount = payDebtHolders(snowballID, remainingAmount);\n//             console.log(\"Remaining %s\", remainingAmount);\n\n//             // Pay any remaining amount to the snowball owner\n//             success = usdcToken.transferFrom(msg.sender, s_idToSnowball[snowballID].owner, remainingAmount);\n//             if (!success) {\n//                 revert TransferFail();\n//             }\n//         } else {\n//             // Pay snowball owner directly\n//             success = usdcToken.transferFrom(msg.sender, s_idToSnowball[snowballID].owner, remainingAmount);\n//             if (!success) {\n//                 revert TransferFail();\n//             }\n//         }\n//     }\n\n//     //Calculates the commissions given the non-custody amount\n//     function calculateCommission(uint256 totalAmount) internal view returns (uint256) { //should be internal\n//         uint256 commissionAmount = totalAmount /10000 *commission; \n//         return (commissionAmount);\n//     }\n\n//     //This function pays any debt holders for a given snowball after receiving the post-commissions available Amount. Function returns any residual amounts. \n//     function payDebtHolders(uint256 snowballID, uint256 availableAmount) private returns (uint256 remainingAmount) {\n//         uint256 totalDebt = s_idToSnowball[snowballID].totalDebt;\n//         uint256[] memory listOfTrancheLoans = getLoansbySnowballID(snowballID);\n//         console.log(\"Initial totalDebt:\", totalDebt);\n//         console.log(\"Initial availableAmount:\", availableAmount);\n\n//         // Initiate helper variables\n//         uint256 closedTranches = 0; \n//         uint256[] memory amountsToPay = new uint256[](listOfTrancheLoans.length);\n//         address[] memory ownersToPay = new address[](listOfTrancheLoans.length);\n//         uint256 numPayments = 0;\n\n//         // Update total debt \n//         if (totalDebt < availableAmount) {\n//             s_idToSnowball[snowballID].totalDebt = 0;\n//         } else {\n//             s_idToSnowball[snowballID].totalDebt = totalDebt - availableAmount; \n//         }\n\n//         console.log(\"Updated totalDebt:\", s_idToSnowball[snowballID].totalDebt);\n\n//         // Calculate payment amounts for each tranche and load state changes into memory\n//         for (uint256 i = 0; i < listOfTrancheLoans.length; i++) {\n//             (uint256 faceAmount, , ,address debtOwner) = loanFactory.Loans(listOfTrancheLoans[i]);\n//             console.log(\"Processing tranche\", i);\n\n//             // Check the number of tranches for which we can make full payment. \n//             if (faceAmount <= availableAmount) {\n//                 // Load repayment data into memory\n//                 amountsToPay[numPayments] = faceAmount;\n//                 ownersToPay[numPayments] = debtOwner;\n//                 numPayments++;\n//                 closedTranches++; \n\n//                 // Update the remaining amount \n//                 availableAmount -= faceAmount;\n\n//                 // Burn the associated tokens\n//                 loanFactory.burnToken(listOfTrancheLoans[i]);\n//                 console.log(\"Full payment for tranche\", i);\n\n//             // Calculate the payment amount for tranches and load state changes into memory for tranches that we can do partial payment\n//             } else {\n//                 if (availableAmount > 0) {\n//                     amountsToPay[numPayments] = availableAmount;\n//                     ownersToPay[numPayments] = debtOwner;\n//                     numPayments++;\n\n//                     // Update the tranche debt and remaining amount\n//                     loanFactory.UpdateLoanAmount(listOfTrancheLoans[i], availableAmount);\n//                     availableAmount = 0;\n//                     console.log(\"Partial payment for tranche\", i);\n//                     break; \n//                 }\n//             }\n//         }\n\n//         // Shift and clean up closed tranches\n//         if (closedTranches > 0) {\n//             console.log(\"Cleaning up closed tranches\");\n//             uint256 newLength = listOfTrancheLoans.length - closedTranches;\n//             if (newLength == 0) {\n//                 // All tranches are closed, reset arrays\n//                 snowballIDToLoanIDPerTranche[snowballID] = new uint256[](0);\n//             } else {\n//                 for (uint256 i = 0; i < newLength; i++) {\n//                     snowballIDToLoanIDPerTranche[snowballID][i] = snowballIDToLoanIDPerTranche[snowballID][i + closedTranches];\n//                 }\n//                 for (uint256 i = 0; i < closedTranches; i++) { \n//                     snowballIDToLoanIDPerTranche[snowballID].pop(); \n//                 }\n//             }\n//         }\n\n//         // Transfer payments\n//         for (uint256 i = 0; i < numPayments; i++) {\n//             if (amountsToPay[i] ==0) break;\n//             (bool success) = usdcToken.transferFrom(msg.sender, ownersToPay[i], amountsToPay[i]);\n//             if (!success) {\n//                 failedTransferBalance += amountsToPay[i];\n//             }\n//             console.log(\"Paid debt holder\", ownersToPay[i]);\n//             console.log(\"Paid:\", amountsToPay[i]);\n//         }\n\n//         return availableAmount; // Return any leftover amount after paying debt holders\n//     }\n\n//     function checkUpkeep() public {\n//         uint256 closeCounter;\n//         uint256 updateCounter;\n//         bool upkeepNeeded = false;\n        \n//         // Loop to check for contracts that need closing or updating\n//         for (uint256 i = 0; i < activeSnowballContractsByID.length; i++) {\n//             //Loading variables into memory\n//             uint256[] memory cohortPrices = s_idToSnowball[activeSnowballContractsByID[i]].cohortPrices;\n            \n//             // Check if the contract is expired or full\n//             if (block.timestamp - s_idToSnowball[activeSnowballContractsByID[i]].duration >= s_idToSnowball[activeSnowballContractsByID[i]].startTime || s_idToSnowball[activeSnowballContractsByID[i]].numParticipants == s_idToSnowball[activeSnowballContractsByID[i]].maxSlots) {\n//                 closeCounter += 1;\n//                 upkeepNeeded = true;\n//                 console.log(\"ID %s close.\", s_idToSnowball[activeSnowballContractsByID[i]].id);\n//             } else {\n//                 // Loop through each cohort\n//                 for (uint256 j = 0; j < cohortPrices.length; j++) {\n//                     // Check if the effective prices paid for any cohorts are outdated and there are actual participants\n//                     if (cohortPrices[j] > s_idToSnowball[activeSnowballContractsByID[i]].price && s_idToSnowball[activeSnowballContractsByID[i]].cohorts[j].length > 0) {\n//                         updateCounter += 1;\n//                         upkeepNeeded = true;\n//                         console.log(\"ID %s update\", s_idToSnowball[activeSnowballContractsByID[i]].id);\n//                         break; // no need to continue looping for this snowball\n//                     }\n//                 }\n//             }\n//         }\n\n//         // Initialize arrays of upkeeps\n//         uint256[] memory toClose = new uint256[](closeCounter);\n//         uint256 closeIndex;\n//         uint256[] memory toUpdate = new uint256[](updateCounter);\n//         uint256 updateIndex;\n\n//         // Loop again to fill the arrays\n//         for (uint256 i = 0; i < activeSnowballContractsByID.length; i++) {\n\n//             //Loading variables into memory\n//             uint256[] memory cohortPrices = s_idToSnowball[activeSnowballContractsByID[i]].cohortPrices;\n            \n//             if (block.timestamp - s_idToSnowball[activeSnowballContractsByID[i]].duration >= s_idToSnowball[activeSnowballContractsByID[i]].startTime \n//             || s_idToSnowball[activeSnowballContractsByID[i]].numParticipants == s_idToSnowball[activeSnowballContractsByID[i]].maxSlots) {\n//                 //toClose[closeIndex] = activeSnowballContractsByID[i];\n//                 toClose[closeIndex] = i; \n//                 closeIndex += 1;\n//                 console.log(\"Adding Snowball ID %s to close list.\", s_idToSnowball[activeSnowballContractsByID[i]].id);\n//             } else {\n//                 for (uint256 j = 0; j < cohortPrices.length; j++) {\n//                     if (cohortPrices[j] > s_idToSnowball[activeSnowballContractsByID[i]].price && s_idToSnowball[activeSnowballContractsByID[i]].cohorts[j].length > 0) {\n//                         toUpdate[updateIndex] = i;//activeSnowballContractsByID[i];\n//                         updateIndex += 1;\n//                         console.log(\"Adding Snowball ID %s to update list.\", s_idToSnowball[activeSnowballContractsByID[i]].id);\n//                         break; // no need to continue looping for this snowball\n//                     }\n//                 }\n//             }\n//         }\n\n//         // Encode the data to be passed to performUpkeep\n//         bytes memory performData = abi.encode(toClose, toUpdate);\n//         performUpkeep(performData);\n//         //return (upkeepNeeded, performData);\n//     }\n\n//     function performUpkeep(bytes memory performData) public {\n//         if(msg.sender != s_forwarderAddress) {\n//             revert NotApproved(); \n//         }\n        \n//         (uint256[] memory toClose, uint256[] memory toUpdate) = abi.decode(\n//             performData,\n//             (uint256[], uint256[])\n//         );\n        \n//         // First pay cohorts then close contracts\n//         for (uint256 i = 0; i < toUpdate.length; i++) {\n//             uint256 snowballID = activeSnowballContractsByID[toUpdate[i]];\n//             console.log(\"Updating Snowball ID %s.\", snowballID);\n//             uint256 accumulatedPayout = payoutCohorts(snowballID);\n//             console.log(accumulatedPayout);\n//             console.log(s_idToSnowball[snowballID].balance);\n//             s_idToSnowball[snowballID].balance -= accumulatedPayout;\n//         }\n\n//         // Close contracts\n//         uint256 i = toClose.length;\n//         while (i > 0) {\n//             i--;\n//             uint256 snowballID = activeSnowballContractsByID[toClose[i]];\n//             console.log(\"Closing Snowball ID %s.\", snowballID);\n\n//             //snowballContract storage snowball = s_idToSnowball[snowballID];\n            \n//             //Change below logic if not using USDC or other token vulnerable to re-entrancy. \n//             uint256 accumulatedPayout = payoutCohorts(snowballID);\n//             console.log(accumulatedPayout);\n//             uint256 remainingAmount = s_idToSnowball[snowballID].balance - accumulatedPayout;\n//             console.log(s_idToSnowball[snowballID].balance);\n\n//             uint256 commissionAmount = calculateCommission(remainingAmount);\n//             console.log(commissionAmount);\n//             (bool success) = usdcToken.transfer(bank, commissionAmount);\n//             console.log(success);\n//             if(!success) {\n//                 failedTransferBalance += commissionAmount;\n//             }\n//             remainingAmount -= commissionAmount; \n//             s_idToSnowball[snowballID].balance = 0;\n            \n//             if (s_idToSnowball[snowballID].totalDebt > 0) {\n//             remainingAmount = payDebtHolders(snowballID, remainingAmount);\n//             }\n//             console.log(1);\n            \n//             if (remainingAmount > 0) {\n//                 (bool success) = usdcToken.transfer(s_idToSnowball[snowballID].owner, remainingAmount);//snowball.owner.call{value: remainingAmount}(\"\");\n//                 if(!success) {\n//                     failedTransferBalance += remainingAmount;\n//                 }\n//                 console.log(\"Paid %s to owner.\", remainingAmount);\n//             } \n//             console.log(2);\n\n//             snowballWorkingCapital.deleteAllSnowballRequests(snowballID);\n//             console.log(3);\n\n//             activeSnowballContractsByID[toClose[i]] = activeSnowballContractsByID[activeSnowballContractsByID.length - 1];\n//             activeSnowballContractsByID.pop();\n//             console.log(\"Closed \", snowballID);\n//         }\n//     }\n\n//     function payoutCohorts(uint256 snowballID) private returns (uint256 accumulatedPayout) {\n//         //Load variables into memory\n//         uint256[] memory cohortPrices = s_idToSnowball[snowballID].cohortPrices;\n//         uint256 price = s_idToSnowball[snowballID].price;\n\n//         uint256 j = 0;\n//         while (j < cohortPrices.length && cohortPrices[j] > price) {\n//             address[] memory currentCohort = s_idToSnowball[snowballID].cohorts[j];\n//             uint256 currentCohortPrice = cohortPrices[j];\n//             s_idToSnowball[snowballID].cohortPrices[j] = price;\n//             for (uint256 k = 0; k < currentCohort.length; k++) {\n//                 address user = currentCohort[k];\n//                 uint256 tickets = s_idToSnowball[snowballID].cohorts_tickets[j][user];\n//                 uint256 val = tickets * (currentCohortPrice - price);\n//                 console.log(val);\n//                 accumulatedPayout += val;\n//                 //console.log(accumulatedPayout);\n//                 console.log(usdcToken.balanceOf(address(this)));\n                \n//                 (bool success) = usdcToken.transfer(user, val); //payable(user).call{value: val}(\"\");\n//                 console.log(success);\n//                 if(!success) {\n//                     console.log(\"f\");\n//                     failedTransferBalance += val;\n//                 }\n//             }\n//             j++;\n//         }\n//         return accumulatedPayout;\n//     }\n\n//     /// @notice Set the address that `performUpkeep` is called from\n//     /// @dev Only callable by the owner\n//     /// @param forwarderAddress the address to set\n//     //MAKE THIS ONLY OWNER\n//     function setForwarderAddress(address forwarderAddress) external onlyOwner {\n//         s_forwarderAddress = forwarderAddress;\n//     }\n\n//     function setWorkingCapitalProvider(address _WCProviderAddress) external onlyOwner {\n//         WCProviderAddress = _WCProviderAddress; \n//         snowballWorkingCapital = ISnowballWorkingCapital(_WCProviderAddress); \n//     }\n\n//     function setLoanFactory(address _loanFactoryAddress) external onlyOwner {\n//         loanFactory = ILoanFactory(_loanFactoryAddress); \n//     }\n\n//     function getSnowballsByOwner(address user) public view returns (uint256[] memory) {\n//         return addressToSnowballIDs[user];\n//     }\n\n//     //Add debt to snowball in the next tranche and returns the tranche number. \n//     function addDebtToSnowball(uint256 snowballID, uint256 debtAmount, uint256 loanID) external  returns (uint256) {\n//         if(msg.sender != WCProviderAddress) {\n//             revert NotApproved(); \n//         }\n//         console.log(s_idToSnowball[snowballID].totalDebt);\n//         s_idToSnowball[snowballID].totalDebt += debtAmount;\n//         console.log(s_idToSnowball[snowballID].totalDebt);\n//         snowballIDToLoanIDPerTranche[snowballID].push(loanID);\n//         return snowballIDToLoanIDPerTranche[snowballID].length;\n//     }\n\n//     function getLoansbySnowballID(uint256 snowballID) public view returns (uint256[] memory) {\n//         return snowballIDToLoanIDPerTranche[snowballID];\n//     }\n\n//     // function sendFailedFunds (address to, uint256 amount) onlyOwner public {\n//     //     if (amount > failedTransferBalance) {\n//     //         revert TransferFail(); \n//     //     }\n//     //     failedTransferBalance -= amount; \n//     //     usdcToken.transfer(to, amount);\n//     // }\n\n\n//     function getSnowballMetrics(uint256 id) \n//         external \n//         view \n//         returns(\n//             uint256, \n//             uint256,\n//             uint256, \n//             uint256, \n//             address, \n//             uint256, \n//             uint256, \n//             uint256, \n//             uint256[] memory,\n//             uint256[] memory, \n//             uint256[] memory\n//         ) \n//     {\n//         snowballContract storage snowball = s_idToSnowball[id]; \n//         return (\n//             snowball.price, \n//             snowball.maxSlots,\n//             snowball.duration, \n//             snowball.totalDebt, \n//             snowball.owner, \n//             snowball.startTime, \n//             snowball.numParticipants, \n//             snowball.balance, \n//             snowball.cohortTicketAmounts,\n//             snowball.cohortPrices, \n//             snowball.thresholds\n//         );\n//     }\n// }\n"
    },
    "interfaces/IISOManager.sol": {
      "content": "pragma solidity ^0.8.24;\n\ninterface IISOManager {\n    function payStore(\n        address store,\n        uint256 toStore,\n        uint256 commission,\n        uint256 custodyAmount,\n        address erc20Token,\n        address payor\n    ) external;\n}\n"
    },
    "interfaces/IMerchantManager.sol": {
      "content": "pragma solidity ^0.8.24;\n\ninterface IMerchantManager {\n    function approveOperator(\n        address approvedOperator,\n        address parentAccount\n    ) external;\n\n    function removeOperator(address toRemove, address parentAccount) external;\n\n    function approveAdministrator(\n        address approvedAdministrator,\n        bool addOperator\n    ) external;\n\n    function removeAdministrator(\n        address toRemove,\n        bool removeAsOperator\n    ) external;\n\n    function isApprovedOperator(\n        address operator,\n        address parentAccount\n    ) external view returns (bool);\n\n    function getReceiverAddress(\n        address userAddress,\n        address tokenAddress\n    ) external view returns (address);\n}\n"
    },
    "interfaces/IReceiptManager.sol": {
      "content": "pragma solidity ^0.8.24;\n\ninterface IReceiptManager {\n    function setRoyalty(uint256 promotionID, uint256 basisPoints) external;\n\n    function setPromotionOwner(\n        uint256 promotionID,\n        address promotionOwner\n    ) external;\n\n    function mintReceipts(\n        address to,\n        uint256 promotionID,\n        uint256 participantNumber,\n        uint256 numTokens\n    ) external returns (uint256);\n\n    function incrementReceiptIDs(uint256 numOrders) external returns (uint256);\n\n    function modifyPromotionURI(\n        uint256 promotionID,\n        string calldata newURIRoot\n    ) external;\n\n    function ownerOf(uint256 tokenId) external view returns (address);\n\n    function customURIRoot(uint256 key) external view returns (string memory);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}